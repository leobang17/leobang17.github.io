{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-운영체제-운영체제-03-프로세스-md-e097f594e3f651cc7885.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/운영체제/운영체제03-프로세스.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    h2: \"h2\",\n    h4: \"h4\",\n    h5: \"h5\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\",\n    em: \"em\",\n    strong: \"strong\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"3-프로세스\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#3-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\",\n    \"aria-label\": \"3 프로세스 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3. 프로세스\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"31-프로세스-개념\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#31-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B0%9C%EB%85%90\",\n    \"aria-label\": \"31 프로세스 개념 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.1 프로세스 개념\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"311-프로세스\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#311-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\",\n    \"aria-label\": \"311 프로세스 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.1.1 프로세스\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"프로세스와-프로그램\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8\",\n    \"aria-label\": \"프로세스와 프로그램 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"프로세스와 프로그램\"), \"\\n\", React.createElement(_components.p, null, \"프로세스\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Program in execution = 실행 중인 프로그램\"), \"\\n\", React.createElement(_components.li, null, \"HDD에 있는 프로그램 (= set of instruction)을 메모리에 로드하면 cpu의 입장에서 fetch-execution 할 수 있는 상황이 됨\"), \"\\n\", React.createElement(_components.li, null, \"Time sharing으로 여러 개의 process가 cpu를 공유하여 점유할 수 있어야 한다.\"), \"\\n\", React.createElement(_components.li, null, \"Process 자체가 다른 개체를 위한 실행환경으로 동작할 수 있다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Java 프로그래밍의 경우 JVM (자바 가상머신) 안에서 실행된다.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"프로세스의-메모리-배치\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B0%B0%EC%B9%98\",\n    \"aria-label\": \"프로세스의 메모리 배치 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"프로세스의 메모리 배치\"), \"\\n\", React.createElement(_components.img, {\n    src: \"/Users/leobang/Documents/pics/%E1%84%86%E1%85%A6%E1%84%86%E1%85%A9%E1%84%85%E1%85%B5%E1%84%85%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%8B%E1%85%A1%E1%84%8B%E1%85%AE%E1%86%BA.png\",\n    alt: \"메모리레이아웃\"\n  }), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Text\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"실행 코드\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Data\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"전역 변수들을 저장하는 곳\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Heap\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"runtime (프로그램 실행 중)에 동적으로 메모리 할당되는 메모리\"), \"\\n\", React.createElement(_components.li, null, \"메모리 할당에 따라 힙 공간이 커질 수 있으며 반환되면 힙 공간도 줄어든다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Stack\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"함수 호출할 떄 임시 데이터 저장장소\"), \"\\n\", React.createElement(_components.li, null, \"i.e) 함수 매개변수, 복귀 주소 및 지역 변수 등\"), \"\\n\", React.createElement(_components.li, null, \"함수가 호출될 때마다 \", React.createElement(_components.em, null, \"활성화 레코드\"), \" (매개변수, 복귀주소 등)가 stack에 푸시되고, 함수에서 제어가 되돌아오면 stack에서 활성화 레코드가 pop 된다.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Text와 Data section은 크기가 고정되어 프로그램 실행 시간 동안 크기가 변하지 않는다. 반면 stack 및 Heap section은 런타임에 동적으로 줄어들거나 커질 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"Heap과 Stack이 서로를 향해 커지더라도 OS에서는 이를 겹치지 않도록 관리해야한다.\"), \"\\n\", React.createElement(_components.p, null, \"두 프로세스들이 동일한 프로그램에 연관될 수 있지만 별도의 실행순서로 간주한다.\"), \"\\n\", React.createElement(_components.p, null, \"별도의 프로세스는 Text section이 동등하다 할지라도 data, heap 및 stack 섹션이 다를 수 있다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"312-프로세스-상태-state\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#312-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%81%ED%83%9C-state\",\n    \"aria-label\": \"312 프로세스 상태 state permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.1.2 프로세스 상태 (state)\"), \"\\n\", React.createElement(_components.p, null, \"OS는 process를 관리해야한다는 것을 알았는데, 어떻게 관리할까? process의 생명주기는 5가지가 있다. 어느 한 순간에 한 처리기 코어에서는 오직 하나의 프로세스만이 실행되기 때문에 적절히 상태를 바꾸어가며 cpu를 점유하는 것이 중요하다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"/Users/leobang/Documents/pics/process-state.png.webp\",\n    alt: \"process-state\"\n  }), \"\\n\", React.createElement(_components.h5, {\n    id: \"new\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#new\",\n    \"aria-label\": \"new permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"New\"), \"\\n\", React.createElement(_components.p, null, \"프로세스가 생성 중이거나 / 막 생성된 상태\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"running\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#running\",\n    \"aria-label\": \"running permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Running\"), \"\\n\", React.createElement(_components.p, null, \"프로세스가 cpu를 점유해서 process의 명령어를 cpu에 로드해서 실행하는 상태\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"waiting\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#waiting\",\n    \"aria-label\": \"waiting permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Waiting\"), \"\\n\", React.createElement(_components.p, null, \"다른 process가 cpu를 점유할 수도 있다. cpu를 점유하지 못한 process들의 상태\"), \"\\n\", React.createElement(_components.p, null, \"주로 I/O가 끝나기를 대기하는 상태이다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"ready\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#ready\",\n    \"aria-label\": \"ready permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Ready\"), \"\\n\", React.createElement(_components.p, null, \"I/O compleiton을 대기하고 있다가 끝났다는 신호가 오더라도 바로 cpu를 점유할 수는 없다. 이미 running 상태인 다른 process를 바로 뺏을 순 없기 때문이다. 먼저 Ready Queue에 가서 대기해야한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"terminated\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#terminated\",\n    \"aria-label\": \"terminated permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Terminated\"), \"\\n\", React.createElement(_components.p, null, \"프로세스의 실행이 종료된 상태\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"313-pcb-프로세스-제어-블록-process-control-block\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#313-pcb-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4-%EB%B8%94%EB%A1%9D-process-control-block\",\n    \"aria-label\": \"313 pcb 프로세스 제어 블록 process control block permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.1.3 PCB 프로세스 제어 블록 (Process Control Block)\"), \"\\n\", React.createElement(_components.p, null, \"각 프로세스는 운영체제에서 PCB에 의해 표현된다. 특정 프로세스와 연관된 여러 정보를 수록하며, 다음과 같은 것들을 포함한다. 이러한 정보들을 하나의 구조체에 typedef 해서 PCB에 저장한다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"/Users/leobang/Documents/pics/pcb.jpeg\",\n    alt: \"pcb\"\n  }), \"\\n\", React.createElement(_components.p, null, \"프로세스 상태 (new, running 등)\"), \"\\n\", React.createElement(_components.p, null, \"프로그램 카운터 (PC - Program Counter)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이 프로세스가 다음에 실행할 명령어의 주소를 가리킨다. IR (instruction register)가 메모리에 있는 명령어를 fetch 해와야 하는데 어디있는 명령어를 가져와야 할지 주소값을 저장.\"), \"\\n\", React.createElement(_components.li, null, \"counter를 1씩 증가시켜서 다음 것을 읽거나 goto로 점프시킨다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"CPU 레지스터들\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Instruction Register, 누산기, 인덱스 레지스터, 스택 레지스터, 범용 레지스터와 함께 상태 코드가 포함된다.\"), \"\\n\", React.createElement(_components.li, null, \"PC와 함께 프로세스가 다시 스케줄 될 때 계속 올바르게 실행되도록 하기 위해 interrupt 발생 시 저장되어야 한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"CPU 스케줄링 정보\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"프로세스 우선순위, 스케줄 큐에 대한 포인터와 다른 스케줄 매개변수를 포함함.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"메모리 관리 정보\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"기준 (base) 레지스터와 한계 (limit) 레지스터의 값, 페이지 테이블 또는 세그먼트 테이블 등\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Accounting 정보\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"cpu 사용시간과 경과된 실시간, 시간제한, 계정번호, job 혹은 process id를 포함한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"I/O status 정보\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이 프로세스에 할당된 I/O 장치들과 열린 파일들의 목록등을 포함한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"314-thread\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#314-thread\",\n    \"aria-label\": \"314 thread permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.1.4 Thread\"), \"\\n\", React.createElement(_components.p, null, \"지금까지는 단일 스레드 환경을 가정했다. single thread of control은 한번에 한 작업만 수행할 수 있다. 예를들어 한 스레드가 워드 프로세스 프로그램을 실행 중이라면, 실행 중인 명령어의 단일 스레드는 프로세스가 한 번에 한가지 일만 실행하도록 허용한다. 따라서 사용자는 문자를 입력하면서 동시에 철자 검사기를 실행할 수 없다.\"), \"\\n\", React.createElement(_components.p, null, \"현대의 OS는 보다 확장된 process concept를 가지고 있다.\"), \"\\n\", React.createElement(_components.p, null, \"위의 single thread의 thread는 실제로 한 줄로 실행된다는 의미에서 ‘실’이었지만 이제부터의 thread는 light weight process라는 의미로 쓰인다.\"), \"\\n\", React.createElement(_components.p, null, \"하나의 cpu안에서도 PCB를 이용해서 OS가 여러개의 process를 time sharing 하듯, process 안에서도 쪼개서 thread를 여러개로 이용하면 된다. 프로세스를 여러개 하는 것보다 쓰레드를 병렬적으로 운용하는 것이 더 유용하다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"32-프로세스-스케줄링\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#32-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\",\n    \"aria-label\": \"32 프로세스 스케줄링 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.2 프로세스 스케줄링\"), \"\\n\", React.createElement(_components.p, null, \"multi programming, 멀티 프로세싱의 목적은 항상 어떤 프로세스가 실행되도록 하는데 있다. 이를 달성하기 위해 process scheduler는 코어에서 실행가능한 여러 프로세스 중 하나의 프로세스를 선택하며 프로세스들 사이에서 CPU 코어를 빈번하게 교체하는 것이다. (각 CPU Core는 한 번에 하나의 프로세스를 실행할 수 있으므로) 여러개의 Core가 있는 시스템의 경우 한 번에 2개 이상의 프로세스를 실행할 수 있다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"321-스케줄링-큐-scheduling-queue\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#321-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%ED%81%90-scheduling-queue\",\n    \"aria-label\": \"321 스케줄링 큐 scheduling queue permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.2.1 스케줄링 큐 (Scheduling Queue)\"), \"\\n\", React.createElement(_components.p, null, \"실제 구현은 linked list로 할 수 있다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"ready-queue\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#ready-queue\",\n    \"aria-label\": \"ready queue permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Ready Queue\"), \"\\n\", React.createElement(_components.p, null, \"프로세스가 시스템에 들어가면 ready queue에 삽입되어 준비상태가 되어 CPU 코어에서 실행되기를 기다린다. Ready Queue의 헤더에는 첫 번째 PCB에 대한 포인터가 저장되고 각 PCB에는 ready queue의 다음 PCB를 가리키는 포인터 필드가 포함된다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"waiting-queue\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#waiting-queue\",\n    \"aria-label\": \"waiting queue permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Waiting Queue\"), \"\\n\", React.createElement(_components.p, null, \"I.O completion과 같은 특정 이벤트가 발생하기를 기다리는 process는 여기에 삽입된다. Waiting Queue는 여러개 있을 수 있다. I/O 디바이스가 여러 개 있기 때문이다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"queuing-diagram\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#queuing-diagram\",\n    \"aria-label\": \"queuing diagram permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Queuing Diagram\"), \"\\n\", React.createElement(_components.p, null, \"새 프로세스는 처음에 ready queue에 놓인다. process는 실행을 위해 선택되거나 dispatch 될 때까지 기다린다. 프로세스가 CPU를 점유하여 running 상태에 들어가면, 다음과 같은 이벤트 중 하나가 발생할 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"프로세스가 I/O request가 있을 때\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"I/O waiting queue로 삽입된다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"프로세스가 child를 fork 했을 때\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"child 프로세스는 new 상태이므로 Ready Queue로 들어간다.\"), \"\\n\", React.createElement(_components.li, null, \"child 프로세스의 종료를 대기할 경우 본인은 Waiting Queue로 들어갈 수 있다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"interrupt가 일어나거나 time slice가 만료되었을 때\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"프로세스가 코어에서 제거되며 Ready Queue로 돌아간다.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"종료시점 모든 큐에서 제거되고 PCB 및 자원이 반환된다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"322-cpu-스케줄링\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#322-cpu-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81\",\n    \"aria-label\": \"322 cpu 스케줄링 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.2.2 CPU 스케줄링\"), \"\\n\", React.createElement(_components.p, null, \"CPU 스케줄러의 역할은 Ready Queue에 있는 프로세스 중 선택된 하나의 프로세스에 CPU코어를 할당하는 것.\"), \"\\n\", React.createElement(_components.p, null, \"스케줄러는 프로세스에게 코어를 장기간 부여하지 않는다. 대신 프로세스에서 CPU를 강제로 제거하고 실행될 다른 프로세스를 스케줄하도록 설계될 것이다. CPU 스케줄링은 적어도 100 밀리초마다 한번씩 실행된다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"323-context-switching-문맥교환\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#323-context-switching-%EB%AC%B8%EB%A7%A5%EA%B5%90%ED%99%98\",\n    \"aria-label\": \"323 context switching 문맥교환 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.2.3 Context Switching (문맥교환)\"), \"\\n\", React.createElement(_components.p, null, \"Interrupt는 OS가 CPU 코어를 현재 작업에서 뺏어 내 제어 커널 루틴을 실행할 수 있도록 한다. Interrupt가 발생하면 시스템은 Interrupt 처리가 끝난 후에 Context를 복구할 수 있도록 현재 실행 중인 프로세스의 현재 문맥을 저장해야한다.\"), \"\\n\", React.createElement(_components.p, null, \"Context란 프로세스의 입장에서 process가 사용되고 있는 상태라 볼 수 있다 = context는 프로세스의 PCB에 표현된다. CPU의 현재 상태를 저장하는 작업 (state save)을 수행하고, 나중에 연산을 재개하기 위해 상태 복구작업 (state restore)을 수행한다.\"), \"\\n\", React.createElement(_components.p, null, \"Context Switch는 CPU core를 다른 process에 넘겨주고, 현재 process의 state를 저장하고, 다른 process의 state를 restore하는 task의 일련이다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"33-프로세스에-대한-연산\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#33-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%9C-%EC%97%B0%EC%82%B0\",\n    \"aria-label\": \"33 프로세스에 대한 연산 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.3 프로세스에 대한 연산\"), \"\\n\", React.createElement(_components.p, null, \"대부분의 경우 프로세스들은 병행 실행될 수 있으며 반드시 동적으로 생성되고 제거되어야 한다. 부모 프로세스는 자식 프로세스를 생성할 수 있고, 자식프로세스는 또 그의 자식 프로세스를 생성할 수 있다. 그 결과 프로세스의 \", React.createElement(_components.strong, null, \"트리\"), \"를 형성한다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"331-프로세스-생성과-종료\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#331-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%A2%85%EB%A3%8C\",\n    \"aria-label\": \"331 프로세스 생성과 종료 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.3.1 프로세스 생성과 종료\"), \"\\n\", React.createElement(_components.p, null, \"UNIX, Linux 등 대부분의 현대 운영체제들은 유일한 프로세스 id (pid)를 사용하여 프로세스를 구분하는데, 이 식별자는 보통 정수이다. 이 id를 통해 커널이 유지하고 있는 프로세스에 고유한 값을 가지도록 할당된다.\"), \"\\n\", React.createElement(_components.p, null, \"언제나 pid = 1인 systemd 프로세스가 다른 모든 사용자 프로세스의 root 부모 프로세스 역할을 수행하고, 시스템이 부팅될 때 생성되는 첫번째 프로세스이기도 하다. 시스템이 부팅되면 systemd 프로세스는 다양한 프로세스를 생성한다. 이에는 웹, 프린트서버, ssh 서버 등이 포함된다.\"), \"\\n\", React.createElement(_components.img, {\n    src: \"/Users/leobang/Documents/pics/%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%89%E1%85%A6%E1%84%89%E1%85%B3%E1%84%90%E1%85%B3%E1%84%85%E1%85%B5.jpeg\",\n    alt: \"프로세스트리\"\n  }), \"\\n\", React.createElement(_components.p, null, \"프로세스가 새로운 자식 프로세스를 생성할 때, 두 프로세스를 실행시키는데 2가지 방법이 존재한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"부모와 child 프로세스가 병행하게 실행한다.\"), \"\\n\", React.createElement(_components.li, null, \"부모는 일부 또는 모든 자식이 실행을 종료할 때까지 기다린다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"새로운 프로세스들의 주소공간 측면에서 다음과 같은 2가지 가능성이 존재한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"child 프로세스는 부모 프로세스의 복사본이다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"child 프로세스는 부모와 똑같은 프로그램과 데이터를 가진다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"자식 프로세스가 자신에게 적재될 새로운 프로그램을 가지고 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"새로운-프로세스를-생성하는-방법---fork\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95---fork\",\n    \"aria-label\": \"새로운 프로세스를 생성하는 방법   fork permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"새로운 프로세스를 생성하는 방법 - fork()\"), \"\\n\", React.createElement(_components.p, null, \"UNIX와 같은 OS에서 \", React.createElement(_components.code, null, \"fork()\"), \"라는 system call을 이용해서 생성된다. 이 때 자식 프로세스는 부모 의 주소공간을 그대로 복사해서 만든다. fork() 시스템 콜 이후 line의 instruction을 병렬적으로 수행한다. 이 때, \", React.createElement(_components.code, null, \"fork()\"), \"의 return이 0일 경우 child process이고, 0이 아닌 정수 pid를 return할 경우 이는 parent process이다.\"), \"\\n\", React.createElement(_components.p, null, \"child가 실행되는 동안 다른 할일이 없다면 child 가 종료될 때까지 Ready Queue 대기하기 위해 \", React.createElement(_components.code, null, \"wait()\"), \" 시스템 콜을 한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"fork()\"), \"을 하면 그대로 ‘값’을 복사한다. 주소를 복사하는 것이 아니므로 부모와 자식 프로세스는 같은 주소공간을 공유하지 않는다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"자식-프로세스가-다른-일을-하게-해준다---execlp\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B0%80-%EB%8B%A4%EB%A5%B8-%EC%9D%BC%EC%9D%84-%ED%95%98%EA%B2%8C-%ED%95%B4%EC%A4%80%EB%8B%A4---execlp\",\n    \"aria-label\": \"자식 프로세스가 다른 일을 하게 해준다   execlp permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"자식 프로세스가 다른 일을 하게 해준다 - execlp()\"), \"\\n\", React.createElement(_components.p, null, \"이진파일을 메모리로 load하고 (이 때 exec() 시스템 콜을 포함하는 원래의 프로그램의 메모리 이미지를 파괴한다.) 그 프로그램의 실행을 시작한다. 이와 같은 방법으로 두 프로세스는 통신할 수 있으며 각자의 길을 간다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"exec()\"), \"을 호출하면 프로세스의 주소공간을 새 프로그램으로 덮어씌우기 때문에 \", React.createElement(_components.code, null, \"exec()\"), \" 시스템 콜은 오류가 발생하지 않는 한 제어를 반환하지 않는다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"프로세스의-종료---exit\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%A2%85%EB%A3%8C---exit\",\n    \"aria-label\": \"프로세스의 종료   exit permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"프로세스의 종료 - exit()\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"exit()\"), \" 시스템 콜을 사용하여 OS에 자신의 삭제를 요청하면 프로세스가 종료된다. 이 시점에서 자신을 waiting 하고 있던 부모 프로세스에 상태값을 반환할 수 있다. 물리메모리, 가상메모리, 열린 파일, 입출력 버퍼를 포함한 프로세스의 모든 resource가 할당 해제되고 운영체제로 반납된다.\"), \"\\n\", React.createElement(_components.p, null, \"통상적으로 프로세스의 종료는 부모 프로세스만이 호출할 수 있다. 부모가 자식을 종료시키려면 자식의 pid를 알아야 한다. -> 이래서 \", React.createElement(_components.code, null, \"fork()\"), \" 시스템 콜의 반환이 pid인 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"부모가 자식 프로세스를 종료시키는 이유는 다음 중 하나이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"자식이 자신에게 할당된 자원을 초과하여 사용할 때\"), \"\\n\", React.createElement(_components.li, null, \"자식에게 할당된 task가 더이상 필요 없을 때\"), \"\\n\", React.createElement(_components.li, null, \"부모가 \", React.createElement(_components.code, null, \"exit()\"), \"을 하는데 OS는 부모가 \", React.createElement(_components.code, null, \"exit()\"), \"한 후 자식이 실행을 계속하는 것을 허용하지 않는 경우\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"332-프로세스-종료\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#332-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A2%85%EB%A3%8C\",\n    \"aria-label\": \"332 프로세스 종료 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.3.2 프로세스 종료\"), \"\\n\", React.createElement(_components.p, null, \"연쇄식 종료 (Cascading Termination)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"몇몇 시스템에서는 부모 프로세스가 종료한 이후 자식 프로세스가 존재할 수 없다. 정상적이든 비정상적이든 부모 프로세스가 종료되면 비롯된 모든 자식 프로세스 역시 종료한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"좀비 프로세스\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"자식은 이미 종료했는데 부모가 \", React.createElement(_components.code, null, \"wait()\"), \"을 호출하지 않아서 프로세스 정보만 남아있는 프로세스를 말한다.\"), \"\\n\", React.createElement(_components.li, null, \"종료하게되면 모든 프로세스는 좀비상태가 되지만 아주 짧은 시간 동안만 머무른다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"고아 (Orphan) 프로세스\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"부모 프로세스가 \", React.createElement(_components.code, null, \"wait()\"), \"을 호출하는 대신 종료한다면 이때 자식프로세스는 Orphan이 된다.\"), \"\\n\", React.createElement(_components.li, null, \"UNIX는 고아 프로세스의 새로운 부모 프로세스를 init 프로세스로 지정함으로서 이 문제를 해결한다. init 프로세스는 주기적으로 \", React.createElement(_components.code, null, \"wait()\"), \"을 호출하여 고아 프로세스의 종료 상태를 수집하고 pid와 프로세스 테이블 항목을 반환한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"34-프로세스-간-통신\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#34-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B0%84-%ED%86%B5%EC%8B%A0\",\n    \"aria-label\": \"34 프로세스 간 통신 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.4 프로세스 간 통신\"), \"\\n\", React.createElement(_components.p, null, \"여러 개의 프로세스가 동시에 실행되는 것을 \", React.createElement(_components.em, null, \"concurrency\"), \" 라고 한다.  프로세스는 독립적으로 실행되거나 협력적으로 실행된다.\"), \"\\n\", React.createElement(_components.p, null, \"Independent Process (독립적 실행)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"다른 프로세스와 데이터를 공유하지 않는다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Cooperative Process (협력적 실행)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"다른 프로세스에 영향을 주거나 받을 수 있는 프로세스\"), \"\\n\", React.createElement(_components.li, null, \"다른 프로세스와 데이터를 공유하고 있는 프로세스\"), \"\\n\", React.createElement(_components.li, null, \"협력적 프로세스에서 대부분 문제가 생긴다. 자기 일 독립적으로 알아서 하면 상관 없는데 부모 / 자식 프로세스가 동시에 실행되면서 서로 간섭하니 문제가 생김.\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"ipc-interprocess-communication-프로세스간-통신\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#ipc-interprocess-communication-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B0%84-%ED%86%B5%EC%8B%A0\",\n    \"aria-label\": \"ipc interprocess communication 프로세스간 통신 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"IPC (InterProcess Communication) 프로세스간 통신\"), \"\\n\", React.createElement(_components.p, null, \"협력적 프로세스는 서로 데이터를 주고 받아야 하므로 프로세스 간 통신 (IPC) 기법이 필요하다. 가장 기본적인 2가지 모델은 다음과 같다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"shared-memory-공유-메모리\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#shared-memory-%EA%B3%B5%EC%9C%A0-%EB%A9%94%EB%AA%A8%EB%A6%AC\",\n    \"aria-label\": \"shared memory 공유 메모리 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Shared Memory (공유 메모리)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Cooperating process들 간의 공유되는 메모리 영역이 구축된다. -> 그 영역에 데이터를 읽고 씀으로서 데이터 교환\"), \"\\n\", React.createElement(_components.li, null, \"분산시스템에서는 구현하기 어렵다.\"), \"\\n\", React.createElement(_components.li, null, \"shared memory 영역을 구축할 때만 system call이 필요하고 구축한 이후에는 모든 접근은 일반적인 메모리 접근으로 취급하므로 커널의 도움이 필요없다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"message-passing-메시지-전달\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#message-passing-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%A0%84%EB%8B%AC\",\n    \"aria-label\": \"message passing 메시지 전달 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Message Passing (메시지 전달)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"message queue를 통해 cooperating process 들 간 메시지 전달을 이용해 데이터를 전달한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"충돌을 회피할 필요가 없기 때문에 적은 양의 데이터를 교환하는데 유용하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"메시지 전달은 system call을 이용해 구현되므로 커널 interrupt 등의 부가적으로 시간이 소비되므로 shared memory 보다 느리다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이 두 모델은 OS에서 통상적이며 많은 시스템이 두 가지를 모두 구현하고 있다,.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"35-shared-memory-시스템에서의-프로세스-간-통신-ipc-in-shared-memory-systems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#35-shared-memory-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90%EC%84%9C%EC%9D%98-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B0%84-%ED%86%B5%EC%8B%A0-ipc-in-shared-memory-systems\",\n    \"aria-label\": \"35 shared memory 시스템에서의 프로세스 간 통신 ipc in shared memory systems permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.5 Shared Memory 시스템에서의 프로세스 간 통신 (IPC in Shared-Memory Systems)\"), \"\\n\", React.createElement(_components.p, null, \"일반적으로 OS는 한 process가 다른 process의 메모리에 접근하는 것을 금지한다. shared memory는 이 제약조건을 어기는 것이 전제다.\"), \"\\n\", React.createElement(_components.p, null, \"데이터의 형식과 위치는 이들 cooperating process에 의해 결정되며 OS의 소관이 아니다. 또한 process들은 동시에 동일한 위치에 write 하지 않도록 책임져야 한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"producer---consumer-problem-생산자-소비자-문제\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#producer---consumer-problem-%EC%83%9D%EC%82%B0%EC%9E%90-%EC%86%8C%EB%B9%84%EC%9E%90-%EB%AC%B8%EC%A0%9C\",\n    \"aria-label\": \"producer   consumer problem 생산자 소비자 문제 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Producer - Consumer Problem (생산자-소비자 문제)\"), \"\\n\", React.createElement(_components.p, null, \"cooperating process의 가장 일반적인 패러다임이다. Producer는 정보를 생산하고 Consumer 프로세스는 정보를 소비한다. (i.e. 컴파일러나 어셈블리 코드를 생성하면 어셈블러는 그 코드를 consume해서 binary code를 생산한다.)\"), \"\\n\", React.createElement(_components.p, null, \"Producer와 Consumer process들이 concurrency 하려면 Producer가 정보를 채워넣고 소비자가 소모할 수 있는 항목들의 \", React.createElement(_components.strong, null, \"buffer\"), \"가 반드시 필요하다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"buffer는 producer와 consumer가 공유하는 메모리 영역에 존재하게 된다.\"), \"\\n\", React.createElement(_components.li, null, \"무한 버퍼 (unbounded buffer)와 유한 버퍼 (bounded buffer)가 존재한다. 하지만 대부분의 버퍼는 bounded buffer이다.\"), \"\\n\", React.createElement(_components.li, null, \"bounded buffer의 경우, 비어있을 경우 consumer process가 가져갈 것이 없으므로 waiting queue에 들어가고, 가득 찬 경우 producer process가 더 채울 수 없으므로 waiting queue에 들어가게 된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"shared-memory-scheme의-문제점\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#shared-memory-scheme%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\",\n    \"aria-label\": \"shared memory scheme의 문제점 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Shared memory scheme의 문제점\"), \"\\n\", React.createElement(_components.p, null, \"메모리 영역을 공유하게되면 공유된 영역에 접근하고 조작하는 코드를 application programmer들이 명시적으로 작성해주어야 한다. app programmer가 shared memory를 알아서 관리하라 그럼 그 OS는 아무도 안쓸 것이다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"36-message-passing-시스템에서의-프로세스-간-통신-ipc-in-message-passing-system\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#36-message-passing-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90%EC%84%9C%EC%9D%98-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B0%84-%ED%86%B5%EC%8B%A0-ipc-in-message-passing-system\",\n    \"aria-label\": \"36 message passing 시스템에서의 프로세스 간 통신 ipc in message passing system permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.6 Message Passing 시스템에서의 프로세스 간 통신 (IPC in Message-Passing System)\"), \"\\n\", React.createElement(_components.p, null, \"Message Passing은 동일한 주소공간을 공유하지 않고도 프로세스들이 통신을 하며 그들의 동작을 동기화할 수 있도록 해준다. cooperating process들이 분산환경에 존재할 경우 특히 유용하다. 예를들어 www에 사용되는 chat 프로그램은 서로 메시지를 교환하여 통신하도록 설계될 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"Message Passing 시스템은 최소한 두 가지 연산을 제공한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"send(message)\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"receive(message)\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"만약 process P와 Q가 서로 message passing으로 통신을 원하면, 반드시 서로 메시지를 보내고 받아야 한다. 이들 사이에 \", React.createElement(_components.strong, null, \"Communication Link\"), \"가 설정되어야 한다. 이는 다양한 방법으로 구현할 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Direct 또는 Indirect Communication\"), \"\\n\", React.createElement(_components.li, null, \"Synchronous 또는 Asynchronous Communication\"), \"\\n\", React.createElement(_components.li, null, \"Automatic 또는 Explicit Buffering\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"361-direct--indirect\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#361-direct--indirect\",\n    \"aria-label\": \"361 direct  indirect permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.6.1 Direct / Indirect\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"direct-communication-직접-통신\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#direct-communication-%EC%A7%81%EC%A0%91-%ED%86%B5%EC%8B%A0\",\n    \"aria-label\": \"direct communication 직접 통신 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Direct Communication (직접 통신)\"), \"\\n\", React.createElement(_components.p, null, \"통신을 원하는 각 프로세스는 누구한테 받는지, 누구한데 주는지 이름을 명시해야한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"send(P, message)\"), \" - 프로세스 P에게 메시지를 전송한다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"receive(Q, message)\"), \" - 프로세스 Q로부터 메시지를 수신한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이 경우에는 프로세스의 쌍 사이에 communication link가 자동으로 구축된다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"누가 누구한테 주고 누가 누구한테 받는지 명시해놓았으므로.\"), \"\\n\", React.createElement(_components.li, null, \"해당 link는 정확히 두 프로세스 사이에만 연관되며, 각 쌍 사이에는 정확히 하나의 연결만 존재해야한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"방금은 주고 받는 모두 pid를 명시해놓았으므로 ‘대칭적’이라 할 수 있다. send에만 pid를 명시하고 receive의 경우 임의의 프로세스로부터 메시지를 수신하는 ‘비대칭적’ 방식도 가능하다.\"), \"\\n\", React.createElement(_components.p, null, \"Direct Communication은 프로세스를 지정하는 방식 때문에 모듈성을 제한한다는 것이 단점이다. Indirect Communication이 더욱 바람직하다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"indirect-commnunication-간접-통신\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#indirect-commnunication-%EA%B0%84%EC%A0%91-%ED%86%B5%EC%8B%A0\",\n    \"aria-label\": \"indirect commnunication 간접 통신 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Indirect Commnunication (간접 통신)\"), \"\\n\", React.createElement(_components.p, null, \"메시지들은 \", React.createElement(_components.em, null, \"메일 박스\"), \" 또는 *포트 (port)*로 송신 / 수신된다. 메일 박스는 추상적으로 프로세스들에 의해 메시지들이 넣어지고 제거될 수 있는 객체라고도 볼 수 있다. 각 메일 박스는 고유의 id값을 가진다.\"), \"\\n\", React.createElement(_components.p, null, \"프로세스는 다수의 상이한 메일박스를 통해 다른 프로세스들과 통신할 수 있다. 두 프로세스들이 공유 메일박스를 가질 때만 이들 프로세스가 통신할 수 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"send(A, message)\"), \" - 메시지를 메일박스 A로 보낸다.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"receive(A, message)\"), \" - 메시지를 메일박스 A로부터 수신한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"메일박스를 2개 이상의 프로세스가 공유할 수도 있고, 하나의 프로세스 쌍 사이에 다수의 메일박스가 존재할 수도 있다. 용도에 따라 전용 mail box를 놓을수도 있다. port 80은 http로 쓰고, port 32는 telnet을 기다리는 용도로 쓰는 것 -> 이 port가 다 전용 mail box이다.\"), \"\\n\", React.createElement(_components.p, null, \"운영체제는 Process가 다음을 할 수 있도록 반드시 허용해야한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"새 mailbox 생성\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"생성하는 프로세스가 default로 메일박스의 소유자가 된다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"mailbox에 send 혹은 receive\"), \"\\n\", React.createElement(_components.li, null, \"mailbox 삭제\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"362-synchronization\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#362-synchronization\",\n    \"aria-label\": \"362 synchronization permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.6.2 Synchronization\"), \"\\n\", React.createElement(_components.p, null, \"Message Passing의 구현에는 2가지 design option이 있다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"blocking--synchronous\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#blocking--synchronous\",\n    \"aria-label\": \"blocking  synchronous permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Blocking (~= Synchronous)\"), \"\\n\", React.createElement(_components.p, null, \"blocking send\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"사이즈 1GB인 8090 port를 생성했다고 하자 (mail box)\"), \"\\n\", React.createElement(_components.li, null, \"그런데 총 4GB의 파일을 consumer에게 보내야한다고 했을 때, sender가 consumer가 4GB를 모두 소비할 동안 block 되어있는 것이 blocking send이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"blocking receive\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"4GB를 받아야 하는데 port의 buffer size가 1GB 뿐이라면 이를 produce - consume 계속해야함.\"), \"\\n\", React.createElement(_components.li, null, \"4GB를 모두 받을 때까지 아무것도 안하고 기다리는게 blocking receive\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"non-blocking--asynchronous\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#non-blocking--asynchronous\",\n    \"aria-label\": \"non blocking  asynchronous permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Non-Blocking (~= Asynchronous)\"), \"\\n\", React.createElement(_components.p, null, \"non-blocking send\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"sender가 message를 \", React.createElement(_components.code, null, \"send()\"), \"하고 지 하던 일을 계속한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"non-blocking receive\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"receiver가 message를 \", React.createElement(_components.code, null, \"receive()\"), \"하고 지 하던 일을 계속한다. 제대로 받아지건 말건. message가 valid하건 null하건 끝나고 알게될 뿐 자기 할일을 계속한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"비동기 전송은 내가 상대방에게 모두 전송했는지 확인할 길이 없다. 대신 좋은 점은 전송했다치고 자기 할 일을 하면 되니까 produce나 consumer 입장에서 효율적으로 다른 일을 빠르게 할 수 있다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"363-buffering\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#363-buffering\",\n    \"aria-label\": \"363 buffering permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.6.3 Buffering\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"무용량 버퍼 (Zero Capacity)\"), \"\\n\", React.createElement(_components.li, null, \"유한용량 버퍼 (Bounded Capacity)\"), \"\\n\", React.createElement(_components.li, null, \"무한용량 버퍼(Unbounded Capacity)\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"37-ipc-시스템의-사례\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#37-ipc-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EC%82%AC%EB%A1%80\",\n    \"aria-label\": \"37 ipc 시스템의 사례 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.7 IPC 시스템의 사례\"), \"\\n\", React.createElement(_components.p, null, \"실제로 IPC가 어떻게 사용되는지 사례를 통해 알아본다. POSIX란 Portable Operating System Interface for uniX의 약어로 UNIX가 표준 없이 너무 난립해 운영체제의 표준화를 시도한 인터페이스이다. POSIX API를 위주로 살펴본다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"371-posix-shared-memory\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#371-posix-shared-memory\",\n    \"aria-label\": \"371 posix shared memory permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.7.1 POSIX Shared-Memory\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"372-mach-message-passing\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#372-mach-message-passing\",\n    \"aria-label\": \"372 mach message passing permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.7.2 Mach Message Passing\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"373-windows\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#373-windows\",\n    \"aria-label\": \"373 windows permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.7.3 Windows\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"374-pipes\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#374-pipes\",\n    \"aria-label\": \"374 pipes permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.7.4 Pipes\"), \"\\n\", React.createElement(_components.p, null, \"UNIX 시스템에서 아주 초창기에 IPC에 이용한 메커니즘이다. pipe는 2개의 프로세스가 소통하는 도구처럼 행동한다. pipe를 구현하기 위해 다음 4가지 문제를 고려해야한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"uni-directional vs bi-directional (단방향 vs 양방향)\"), \"\\n\", React.createElement(_components.li, null, \"양방향이 허용된다면, half duplex (반이중) vs full duplex (전이중)\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"full duplex는 동시에 양방향 데이터 전송이 가능하다.\"), \"\\n\", React.createElement(_components.li, null, \"half duplex는 한 순간엔 한 방향 전송만 가능하다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"통신하는 두 process가 부모-자식 관계여야 하는지\"), \"\\n\", React.createElement(_components.li, null, \"네트워크를 통해 다른 컴퓨터의 프로세스와도 통신할 수 있는지?\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"네트워크에서 이용할 수 있는 pipe를 우리는 socket이라고 한다!\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"다음은 UNIX와 Windows 시스템에서 두가지 유형의 파이프들이다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"ordinary-pipe-일반-파이프\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#ordinary-pipe-%EC%9D%BC%EB%B0%98-%ED%8C%8C%EC%9D%B4%ED%94%84\",\n    \"aria-label\": \"ordinary pipe 일반 파이프 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Ordinary Pipe (일반 파이프)\"), \"\\n\", React.createElement(_components.p, null, \"parent - child 관계에서만 이용가능하다. 일반적으로 부모 프로세스가 pipe를 생성하고 자식 프로세스와 소통한다. uni-directional한 pipe이므로 양방향 통신을 위해서는 2개의 pipe가 필요하다. 파이프를 생성한 프로세스 외에는 접근할 수 없다. 2개의 File Descriptor (fd)를 이용해서 ordinary pipe를 구현할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"일반 파이프는 오로지 프로세스들이 서로 통신하는 동안에만 존재한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"named-pipe-지명-파이프\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#named-pipe-%EC%A7%80%EB%AA%85-%ED%8C%8C%EC%9D%B4%ED%94%84\",\n    \"aria-label\": \"named pipe 지명 파이프 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Named Pipe (지명 파이프)\"), \"\\n\", React.createElement(_components.p, null, \"parent-child 관계가 아니더라도 이용할 수 있다. bi-directional한 통신을 지원하며 여러 프로세스들이 이를 사용하여 통신할 수 있다. 실제로 지명파이프는 일반적으로 다수의 writer를 가진다. 통신 프로세스가 종료하더라도 named pipe는 계소ㄱ존재한다. 양방향 전송이긴 하지만 half duplex이므로 양방향이 필요하다면 2개를 이용한다.\"), \"\\n\", React.createElement(_components.p, null, \"통신하는 두 프로세스는 동일한 기계 내에 존재해야한다. 서로 다른 프로세스 간 통신이 필요하다면 socket을 사용하자.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"38-클라이언트-서버-환경에서-통신\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#38-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%EC%84%9C%EB%B2%84-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%ED%86%B5%EC%8B%A0\",\n    \"aria-label\": \"38 클라이언트 서버 환경에서 통신 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.8 클라이언트 서버 환경에서 통신\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"381-socket\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#381-socket\",\n    \"aria-label\": \"381 socket permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.8.1 Socket\"), \"\\n\", React.createElement(_components.p, null, \"통신을 위한 양 종단 (endpoint)를 의미한다. remote computor와의 연결을 의미하는 pipe 형태의 connection을 socket이라 한다. pipe는 port가 된다. 두 프로세스가 네트워크 상에서 통신하려면 양 프로세스 마다 하나씩, 총 2개의 소켓이 필요하다. 각 Socket은 identifiable 해야하므로 IP 주소와 Port 번호를 2가지를 접합하여 구별한다.\"), \"\\n\", React.createElement(_components.p, null, \"서버는 지정된 port에 클라이언트 요청 메시지가 도착하기를 기다리게 된다. 요청이 수신되면 서버는 클라이언트 소켓으로부터 연결 요청을 수락함으로써 연결이 완성된다. Telnet, ftp 및 http 등의 특정 서비스를 구현하는 서버는 \", React.createElement(_components.em, null, \"well-known\"), \" 포트에서 메시지를 기다린다. (i.e. SSH 서버는 22번 port, FTP 서버는 21번 port, HTTP 서버는 80번 포트를 사용한다. 1024 미만의 포트는 well-known port로 표준 서비스를 구현하는데 사용된다.)\"), \"\\n\", React.createElement(_components.p, null, \"클라이언트 프로세스가 연결을 요청하면 host 컴퓨터가 1024 이상의 임의의 포트 번호를 부여한다. 예를들어,\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"IP 주소 146.86.5.20인 호스트 X에 있는 클라이언트가 IP 주소 161.25.19.8의 웹 서버에 접속하려고 한다면 호스트 X는 클라이언트에 포트 1625를 부여한다. (웹 서버는 80번 port에서 listen 하고 있다)\"), \"\\n\", React.createElement(_components.li, null, \"연결은 이 두개의 소켓 (호스트 X의 146.86.5.20:1625와 웹서버의 161.25.19.8:80)으로 구성된다.\"), \"\\n\", React.createElement(_components.li, null, \"두 호스트 사이에 패킷이 오고갈 때 그 패킷들은 목적지 포트 번호가 지정하는데 따라 적절한 프로세스로 배달된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.img, {\n    src: \"/Users/leobang/Documents/pics/%E1%84%89%E1%85%A9%E1%84%8F%E1%85%A6%E1%86%BA%E1%84%90%E1%85%A9%E1%86%BC%E1%84%89%E1%85%B5%E1%86%AB.jpeg\",\n    alt: \"소켓통신\"\n  }), \"\\n\", React.createElement(_components.p, null, \"모든 연결은 유일해야한다. 따라서 호스트 X에 있는 다른 클라이언트 프로세스가 위와 동일한 웹 서버와 통신을 하고자 한다면 그 클라이언트는 1625가 아닌 다른 포트넘버를 부여받게 된다. 모든 연결은 유일한 소켓 쌍으로 구성되어있다.\"), \"\\n\", React.createElement(_components.p, null, \"소켓 통신은 분산된 프로세스 간 널리 사용되는 방식이지만 너무 저수준이다. 소켓은 스레드 간 구조화되지 않은 바이트 스트림만을 통신하기 때문이다. 이를 대안으로 RPC가 나왔다\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"382-rpc-remote-procedure-calls---원격-프로시저-호출\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#382-rpc-remote-procedure-calls---%EC%9B%90%EA%B2%A9-%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80-%ED%98%B8%EC%B6%9C\",\n    \"aria-label\": \"382 rpc remote procedure calls   원격 프로시저 호출 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"3.8.2 RPC (Remote Procedure Calls - 원격 프로시저 호출)\"), \"\\n\", React.createElement(_components.p, null, \"원격에 있는 process들 간의 원격 호출을 추상화 해준다. 네트워크 커넥션을 통해 원격지에 있는 함수를 호출하고 싶을 때 RPC를 이용한다.\"), \"\\n\", React.createElement(_components.p, null, \"A에서 B의 함수를 호출하려면 B에 있는 함수가 뭔지 알아야 하는데 그게 stub이다. client side에 있는 stub을 통해 server에 있는 skeleton을 호출해주어야 하는데, 함수를 호출하려면 parameter를 넘겨주어야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"Object Serialization (객체 직렬화) -> class Person을 선언했을 때 객체를 하나 보내려면 그 안의 참조들을 다 묶어서 보내야 하는데, 이렇게 묶는 것을 serialization 이라 한다.\"), \"\\n\", React.createElement(_components.p, null, \"marshalled parameter를 보내고, marshalled 객체를 return 받는다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/운영체제/운영체제03-프로세스.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","h2","h4","h5","p","ul","li","img","em","strong","code","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","src","alt","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}