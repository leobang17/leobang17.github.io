{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-algorithm-정렬-알고리즘-md-3960ce943721fe78aa27.js","mappings":"oOAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,EAAG,IACHC,OAAQ,SACRC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,KAAM,OACNC,GAAI,KACJC,IAAK,QACJC,EAAAA,EAAAA,MAAsBf,EAAMgB,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBhB,EAAYG,GAAI,CACnFc,GAAI,aACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,8EACN,aAAc,uBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,cAAe,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,mBAAoBU,EAAAA,cAAoBhB,EAAYO,OAAQ,KAAM,MAAO,iGAAkG,KAAMS,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,OAAQU,EAAAA,cAAoB,IAAK,KAAM,mCAAoC,iDAAkD,KAAMA,EAAAA,cAAoBhB,EAAYG,GAAI,CAClcc,GAAI,aACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,cACN,aAAc,uBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,cAAe,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,iDAAkD,KAAMU,EAAAA,cAAoBhB,EAAYQ,GAAI,CAC7JS,GAAI,mBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,4HACN,aAAc,6BACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,qBAAsB,KAAMP,EAAAA,cAAoBhB,EAAYS,GAAI,KAAM,KAAMO,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,8CAA+C,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,wDAAyD,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,mDAAoD,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,iCAAkCU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,SAAU,KAAMK,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,iBAAkB,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,kCAAmC,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,8BAA+B,MAAO,MAAO,MAAO,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYQ,GAAI,CACnsCS,GAAI,SACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,kDACN,aAAc,mBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,UAAW,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAMU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,QAAS,kBAAmBK,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,WAAY,qCAAsCK,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,YAAa,SAAU,KAAMK,EAAAA,cAAoBhB,EAAYQ,GAAI,CAChVS,GAAI,KACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,sBACN,aAAc,eACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,oBAAqBM,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,YAAa,iBAAkB,KAAMK,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,uDAAwD,MAAO,MAAO,KAAMM,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,2CAA4C,MAAO,KAAMM,EAAAA,cAAoBhB,EAAYQ,GAAI,CAC7fS,GAAI,KACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,sBACN,aAAc,eACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,uBAAwBM,EAAAA,cAAoBhB,EAAYO,OAAQ,KAAM,eAAgB,WAAY,KAAMS,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,4CAA6C,MAAO,KAAMM,EAAAA,cAAoBhB,EAAYQ,GAAI,CAC1VS,GAAI,YACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,6BACN,aAAc,sBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,eAAgB,KAAMP,EAAAA,cAAoBhB,EAAYa,IAAK,KAAMG,EAAAA,cAAoBhB,EAAYW,KAAM,CAC1GU,UAAW,mBACV,2tBAA4tB,KAAML,EAAAA,cAAoBhB,EAAYG,GAAI,CACvwBc,GAAI,aACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,cACN,aAAc,uBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,cAAe,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,qDAAsD,KAAMU,EAAAA,cAAoBhB,EAAYQ,GAAI,CACjKS,GAAI,qBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,8HACN,aAAc,+BACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,qBAAsB,KAAMP,EAAAA,cAAoBhB,EAAYS,GAAI,CACnEe,MAAO,KACN,KAAMR,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,4CAA6C,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,yBAA0B,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,+BAAgCU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,SAAU,KAAMK,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,oBAAqB,KAAMM,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,2BAA4B,KAAMM,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,+BAAgC,MAAO,MAAO,KAAMM,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,wCAAyC,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,8CAA+C,MAAO,MAAO,KAAMU,EAAAA,cAAoBhB,EAAYQ,GAAI,CAC7jCS,GAAI,oBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,qDACN,aAAc,8BACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,qBAAsB,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,wFAAyFU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,UAAW,uBAAwB,KAAMK,EAAAA,cAAoBhB,EAAYM,EAAG,KAAMU,EAAAA,cAAoB,IAAK,KAAM,mCAAoC,0FAA2F,KAAMA,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,6DAA8DU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,UAAW,gBAAiB,KAAMK,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,0BAA2BU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,yBAA0B,mGAAoG,KAAMK,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,gIAAiI,KAAMU,EAAAA,cAAoBhB,EAAYQ,GAAI,CAChkCS,GAAI,QACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,iDACN,aAAc,kBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,SAAU,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,oBAAqBU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,YAAa,cAAeK,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,UAAW,iBAAkB,KAAMK,EAAAA,cAAoBhB,EAAYQ,GAAI,CAC5QS,GAAI,OACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,wBACN,aAAc,iBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,2CAA4C,KAAMU,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,2DAA4D,KAAMM,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,wBAAyB,KAAMM,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,8BAA+B,MAAO,MAAO,KAAMM,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,KAAMM,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,UAAWU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,WAAY,OAAQ,KAAMK,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,gCAAiC,MAAO,MAAO,MAAO,KAAMM,EAAAA,cAAoBhB,EAAYQ,GAAI,CACj3BS,GAAI,OACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,wBACN,aAAc,iBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,kCAAmC,KAAMM,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,8CAA+C,MAAO,KAAMM,EAAAA,cAAoBhB,EAAYQ,GAAI,CAC7RS,GAAI,KACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,sBACN,aAAc,eACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBhB,EAAYa,IAAK,KAAMG,EAAAA,cAAoBhB,EAAYW,KAAM,CACjGU,UAAW,mBACV,sUAAuU,KAAML,EAAAA,cAAoBhB,EAAYG,GAAI,CAClXc,GAAI,YACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,aACN,aAAc,sBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,aAAc,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,2BAA4B,KAAMU,EAAAA,cAAoBhB,EAAYQ,GAAI,CACtIS,GAAI,sBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,+IACN,aAAc,gCACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,wBAAyB,KAAMP,EAAAA,cAAoBhB,EAAYS,GAAI,KAAM,KAAMO,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,uBAAwBM,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,YAAa,KAAMK,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,gBAAiBM,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,WAAY,iCAAkC,MAAO,MAAO,KAAMK,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,6BAA8BM,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,YAAa,KAAMK,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,eAAgBM,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,WAAY,iCAAkC,MAAO,MAAO,MAAO,KAAMK,EAAAA,cAAoBhB,EAAYQ,GAAI,CACtzBS,GAAI,UACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,mDACN,aAAc,oBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,SAAU,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,gDAAiDU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,YAAa,kBAAmB,KAAMK,EAAAA,cAAoBhB,EAAYQ,GAAI,CACnOS,GAAI,OACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,wBACN,aAAc,iBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,YAAaM,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,YAAa,kBAAmB,MAAO,KAAMK,EAAAA,cAAoBhB,EAAYQ,GAAI,CACpPS,GAAI,OACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,wBACN,aAAc,iBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBhB,EAAYY,GAAI,KAAM,KAAMI,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,mDAAoD,MAAO,KAAMM,EAAAA,cAAoBhB,EAAYQ,GAAI,CAC/MS,GAAI,OACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,wBACN,aAAc,iBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBhB,EAAYa,IAAK,KAAMG,EAAAA,cAAoBhB,EAAYW,KAAM,CACjGU,UAAW,mBACV,wLAAyL,KAAML,EAAAA,cAAoBhB,EAAYG,GAAI,CACpOc,GAAI,qBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,sBACN,aAAc,+BACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,wBAAyB,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,kCAAmC,KAAMU,EAAAA,cAAoBhB,EAAYQ,GAAI,CACxJS,GAAI,wBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,iJACN,aAAc,kCACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,wBAAyB,KAAMP,EAAAA,cAAoBhB,EAAYS,GAAI,KAAM,KAAMO,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,2BAA4B,KAAMM,EAAAA,cAAoBhB,EAAYU,GAAI,KAAM,sCAAuC,MAAO,KAAMM,EAAAA,cAAoBhB,EAAYQ,GAAI,CAChSS,GAAI,UACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,mDACN,aAAc,oBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,SAAU,KAAMP,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,SAAUU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,YAAa,wCAAyC,KAAMK,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,UAAWU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,WAAY,KAAMK,EAAAA,cAAoBhB,EAAYM,EAAG,KAAM,iCAAkCU,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,WAAY,4EAA6EK,EAAAA,cAAoBhB,EAAYW,KAAM,KAAM,QAAS,YAAa,KAAMK,EAAAA,cAAoBhB,EAAYQ,GAAI,CAC5lBS,GAAI,OACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBhB,EAAYI,EAAG,CACpCgB,KAAM,wBACN,aAAc,iBACdC,UAAW,uBACVL,EAAAA,cAAoBhB,EAAYK,IAAK,CACtCiB,wBAAyB,CACvBC,OAAQ,meAEP,MAAO,KAAMP,EAAAA,cAAoBhB,EAAYa,IAAK,KAAMG,EAAAA,cAAoBhB,EAAYW,KAAM,CACjGU,UAAW,mBACV,yhCACL,CAKA,MAJA,SAAoBtB,EAAQ,CAAC,GAC3B,MAAO0B,QAASC,GAAazB,OAAOC,OAAO,CAAC,GAAGY,EAAAA,EAAAA,MAAsBf,EAAMgB,YAC3E,OAAOW,EAAYV,EAAAA,cAAoBU,EAAW3B,EAAOiB,EAAAA,cAAoBlB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oEC/UA,MACM4B,EAAc,EAAEC,OAAMC,WAAUC,iBACpC,MAAM,SAACC,EAAQ,SAAEC,GAAYJ,EACvBK,EAAe,IAChBL,EAAKM,IAAIC,YACZC,WAAYR,EAAKM,IAAIG,OAAOD,YAE9B,OAAOpB,EAAAA,cAAoBsB,EAAAA,EAAoB,CAC7CV,KAAMA,GACLZ,EAAAA,cAAoBuB,EAAAA,EAAe,KAAMvB,EAAAA,cAAoBwB,EAAAA,EAAoBP,GAAejB,EAAAA,cAAoByB,EAAAA,EAAiB,KAAMZ,GAAWb,EAAAA,cAAoB0B,EAAAA,EAAa,CACxLC,KAAMZ,EACNa,KAAMZ,IACJhB,EAAAA,cAAoB6B,EAAAA,IAAa,EAGxB,SAASC,EAAiB/C,GACvC,OAAOiB,EAAAA,cAAoBW,EAAa5B,EAAOiB,EAAAA,cAAoB+B,EAAqBhD,GAC1F,C","sources":["webpack://gatsby-theme-simplex/./documents/Algorithm/정렬-알고리즘.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    strong: \"strong\",\n    h5: \"h5\",\n    ol: \"ol\",\n    li: \"li\",\n    code: \"code\",\n    ul: \"ul\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"정렬이-중요한-이유\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%A0%95%EB%A0%AC%EC%9D%B4-%EC%A4%91%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\",\n    \"aria-label\": \"정렬이 중요한 이유 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"정렬이 중요한 이유\"), \"\\n\", React.createElement(_components.p, null, \"데이터 정렬이 중요한 이유는 \", React.createElement(_components.strong, null, \"탐색\"), \"을 위해서이다. 컴퓨터의 경우 수백만 건의 데이터는 우습게 다루는데 탐색할 대상 데이터가 정렬되어있지 않다면 O(N)의 linear search로 탐색을 수행해야한다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 \", React.createElement(\"u\", null, \"데이터가 정렬되어있는 상황이라면 Binary Search\"), \"라는 O(logN)의 시간복잡도를 가지는 강력한 탐색 알고리즘을 적용할 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"merge-sort\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#merge-sort\",\n    \"aria-label\": \"merge sort permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Merge Sort\"), \"\\n\", React.createElement(_components.p, null, \"divide & conquer 알고리즘을 사용해 구현하는 대표적인 정렬 알고리즘.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"알고리즘의-원리는-다음과-같다\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EC%9B%90%EB%A6%AC%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EB%8B%A4\",\n    \"aria-label\": \"알고리즘의 원리는 다음과 같다 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"알고리즘의 원리는 다음과 같다:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"(재귀 종료조건) 배열의 길이가 1보다 작거나 같으면 바로 배열을 반환한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"배열의 길이가 2보다 크다면, 중간 index를 기준으로 배열을 2개의 하위 배열로 분할한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"왼쪽 하위 배열과 오른쪽 하위 배열에 대해 merge sort를 재귀적으로 호출한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"정렬된 왼쪽/오른쪽 하위배열을 하나의 배열로 합친다. \", React.createElement(_components.code, null, \"O(N)\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"이 때 비교가 이뤄진다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"왼쪽과 오른쪽 하위배열의 앞쪽에서부터 서로를 비교해가며\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"더 작은 수를 새로운 배열에 순차적으로 담는다.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"시간-복잡도\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\",\n    \"aria-label\": \"시간 복잡도 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"시간 복잡도\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"O(N)\"), \"의 merge 과정을 높이 \", React.createElement(_components.code, null, \"O(logN)\"), \"만큼 수행하므로, merge sort의 전체 시간복잡도는 **\", React.createElement(_components.code, null, \"O(NlogN)\"), \"**이다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"장점\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%9E%A5%EC%A0%90\",\n    \"aria-label\": \"장점 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"장점\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"worst case에서도 항상 \", React.createElement(_components.code, null, \"O(NlogN)\"), \"의 시간복잡도를 보장한다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"배열을 분할할 때 항상 중간 지점에 대해서 2분할하므로, 호출의 높이는 항상 로그 수준이다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"안정 정렬 알고리즘에 속하기 때문에 정렬 도중 원소의 순서를 유지한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"단점\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%8B%A8%EC%A0%90\",\n    \"aria-label\": \"단점 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"단점\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"임시 배열을 사용해 정렬하기 때문에 \", React.createElement(_components.strong, null, \"O(N)의 공간복잡도\"), \"를 소모한다.\"), \"\\n\", React.createElement(_components.li, null, \"입력 배열의 크기가 작은 경우에는 다른 정렬 알고리즘보다 느릴 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"구현-python\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B5%AC%ED%98%84-python\",\n    \"aria-label\": \"구현 python permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"구현 (python)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def merge_sort(arr):\\n  if len(arr) <= 1:\\n    return arr\\n  \\n  # 좌, 우 배열로 분할하여 재귀적으로 merge_sort\\n  mid = len(arr) // 2\\n  left = merge_sort(arr[mid:])\\n  right = merge_sort(arr[:mid])\\n\\n  # merge_sort된 좌, 우 배열을 병합 O(N)\\n  sorted_arr = []\\n  ptr_left, ptr_right = 0, 0\\n  while ptr_left < len(left) and ptr_right < len(right):\\n    if left[ptr_left] < right[ptr_right]:\\n      sorted_arr.append(left[ptr_left])\\n      ptr_left += 1\\n    else: \\n      sorted_arr.append(right[ptr_right])\\n      ptr_right += 1\\n\\n  while ptr_left < len(left):\\n    sorted_arr.append(left[ptr_left])\\n    ptr_left += 1\\n  while ptr_right < len(right):\\n    sorted_arr.append(right[ptr_right])\\n    ptr_right += 1      \\n\\n  return sorted_arr\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"quick-sort\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#quick-sort\",\n    \"aria-label\": \"quick sort permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Quick Sort\"), \"\\n\", React.createElement(_components.p, null, \"pivot이라는 개념을 사용해 divide & conquer 방식으로 정렬하는 알고리즘.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"알고리즘의-원리는-다음과-같다-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EC%9B%90%EB%A6%AC%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EB%8B%A4-1\",\n    \"aria-label\": \"알고리즘의 원리는 다음과 같다 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"알고리즘의 원리는 다음과 같다:\"), \"\\n\", React.createElement(_components.ol, {\n    start: \"0\"\n  }, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"(재귀 종료조건) 배열의 길이가 1 이하일 경우 그대로 배열을 반환한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"배열에서 임의의 pivot을 선택한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"pivot을 기준으로 좌/우 하위 배열로 나눈다. \", React.createElement(_components.code, null, \"O(N)\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이 시점에서 비교가 이뤄진다.\"), \"\\n\", React.createElement(_components.li, null, \"pivot보다 작은 값은 왼쪽 하위배열에,\"), \"\\n\", React.createElement(_components.li, null, \"pivot보다 큰 값은 오른쪽 하위배열에 담는다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"좌/우 하위배열에 대해 재귀적으로 quick sort를 호출한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"왼쪽 하위배열 + pivot 값 + 오른쪽 하위배열의 값을 return한다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"partitioning의-중요성\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#partitioning%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1\",\n    \"aria-label\": \"partitioning의 중요성 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"partitioning의 중요성\"), \"\\n\", React.createElement(_components.p, null, \"pivot을 골라 하위 배열로 나누는 과정을 partitioning이라고 한다. pivot 값을 어떻게 잡느냐에 따라 quick sort는 최악의 경우 \", React.createElement(_components.code, null, \"O(N^2)\"), \"의 시간복잡도까지 늘어날 수 있다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"u\", null, \"pivot을 고르는 행위가 해당 재귀 호출의 높이와 직결\"), \"되기 때문이다. 고른 pivot이 중위값에 가까울수록 배열의 길이는 1/2에 가깝게 분할될 것이고, 이 경우 재귀 호출의 높이는 log 수준을 갖게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"반면 고른 pivot이 항상 최대 혹은 최소값이라면, 재귀 호출의 높이는 N이 되므로 전체 시간복잡도는 \", React.createElement(_components.code, null, \"O(N^2)\"), \"까지 늘어나는 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"예를들어, 이미 오름차순으로 정렬된 배열 \", React.createElement(_components.code, null, \"[1, 2, 3, 4, 5, 6, 7]\"), \" 에 대해서, pivot을 고르는 partitioning 알고리즘이 배열의 첫번째 원소를 pivot으로 선택하는 경우가 quick sort에서 최악의 시간복잡도를 보인다.\"), \"\\n\", React.createElement(_components.p, null, \"따라서 pivot을 결정하는 partitioning 알고리즘이 quick sort의 성능에 영향을 미치게되며 난수 값을 발생시켜 pivot을 삼는 방식이 가장 간단하면서도 평균에 가까운 시간복잡도를 내줄 수 있는 방식이다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"시간복잡도\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84\",\n    \"aria-label\": \"시간복잡도 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"시간복잡도\"), \"\\n\", React.createElement(_components.p, null, \"상술했듯 평균적인 시간복잡도는 \", React.createElement(_components.code, null, \"O(NlogN)\"), \"이지만 최악의 경우 \", React.createElement(_components.code, null, \"O(N^2)\"), \"의 시간복잡도를 가진다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"장점-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%9E%A5%EC%A0%90-1\",\n    \"aria-label\": \"장점 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"장점\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"비교 정렬 알고리즘 중에서도 평균적으로 빠른 편에 속하는 알고리즘이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"원소끼리 근접한 메모리 영역에 붙어있는 배열을 사용하기 때문에 일반적으로 cache 친화적이기 때문\"), \"\\n\", React.createElement(_components.li, null, \"추가적인 공간을 할당하는 시간이 없고\"), \"\\n\", React.createElement(_components.li, null, \"한번 결정된 pivot은 비교연산에서 제외되므로\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"공간복잡도가 \", React.createElement(_components.code, null, \"O(logN)\"), \"이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"재귀 호출의 높이만큼 call stack에 쌓인다.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"단점-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%8B%A8%EC%A0%90-1\",\n    \"aria-label\": \"단점 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"단점\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"pivot의 선택에 따라 최악의 성능을 보일 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"불안정 정렬에 속하므로 정렬하는 도중 원소의 순서가 일치하지 않을 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"구현\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B5%AC%ED%98%84\",\n    \"aria-label\": \"구현 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"구현\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"def quick_sort(arr):\\n  if len(arr) <= 1:\\n    return arr\\n\\n  pivot = len(arr) // 2\\n  left, right = [], []\\n  for i, v in enumerate(arr):\\n    if i == pivot:\\n      continue\\n    if arr[pivot] < v:\\n      right.append(v)\\n    else:\\n      left.append(v)\\n\\n  return quick_sort(left) + [arr[pivot]] + quick_sort(right)\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"heap-sort\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#heap-sort\",\n    \"aria-label\": \"heap sort permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Heap Sort\"), \"\\n\", React.createElement(_components.p, null, \"Heap 자료구조를 활용한 정렬 알고리즘.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"알고리즘의-동작-원리는-다음과-같다\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EB%8B%A4\",\n    \"aria-label\": \"알고리즘의 동작 원리는 다음과 같다 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"알고리즘의 동작 원리는 다음과 같다:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"원소들을 전부 heap에 삽입한다. \", React.createElement(_components.code, null, \"O(NlogN)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"heap의 삽입 연산은 \", React.createElement(_components.code, null, \"O(logN)\"), \"의 시간복잡도를 가지고, 원소의 개수만큼 반복하므로.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"힙이 빌 때까지 Heap에서 원소를 제거한다. \", React.createElement(_components.code, null, \"O(NlogN)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"heap의 삭제연산은 \", React.createElement(_components.code, null, \"O(logN)\"), \"의 시간복잡도를 가지고, 원소의 개수만큼 반복하므로.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"시간복잡도-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84-1\",\n    \"aria-label\": \"시간복잡도 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"시간복잡도\"), \"\\n\", React.createElement(_components.p, null, \"heap 자료구조에 의지해서 항상 동일한 메커니즘으로 동작하므로 최악의 경우에도 \", React.createElement(_components.code, null, \"O(NlogN)\"), \"의 시간복잡도를 보장한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"장점-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%9E%A5%EC%A0%90-2\",\n    \"aria-label\": \"장점 2 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"장점\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"최악의 경우에도 \", React.createElement(_components.code, null, \"O(NlogN)\"), \"의 시간복잡도를 보장한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"단점-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%8B%A8%EC%A0%90-2\",\n    \"aria-label\": \"단점 2 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"단점\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"heap 자료구조 자체가 완전히 정렬되어있지 않은 상태이므로, 불안정 정렬에 속한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"구현-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B5%AC%ED%98%84-1\",\n    \"aria-label\": \"구현 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"구현\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"import heapq\\n\\ndef heap_sort(arr):\\n  heap = []\\n  \\n  while arr:\\n    heapq.heappush(heap, arr.pop())\\n  \\n  while heap:\\n    arr.append(heapq.heappop(heap))\\n  \\n  return arr\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"tree-sort-bst-sort\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tree-sort-bst-sort\",\n    \"aria-label\": \"tree sort bst sort permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Tree Sort (BST Sort)\"), \"\\n\", React.createElement(_components.p, null, \"이진 탐색 트리 자료구조를 활용해서 정렬하는 알고리즘.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"알고리즘의-동작-원리는-다음과-같다-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EB%8B%A4-1\",\n    \"aria-label\": \"알고리즘의 동작 원리는 다음과 같다 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"알고리즘의 동작 원리는 다음과 같다:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"이진 탐색 트리에 모든 원소를 집어넣는다.\"), \"\\n\", React.createElement(_components.li, null, \"이진 탐색 트리를 in-order로 순회하며 원소를 출력한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"시간복잡도-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84-2\",\n    \"aria-label\": \"시간복잡도 2 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"시간복잡도\"), \"\\n\", React.createElement(_components.p, null, \"평균적으로 \", React.createElement(_components.code, null, \"O(NlogN)\"), \" = 이진 탐색트리 삽입연산 * O(N)  + 트리 순회 O(N)\"), \"\\n\", React.createElement(_components.p, null, \"최악의 경우 \", React.createElement(_components.code, null, \"O(N^2)\")), \"\\n\", React.createElement(_components.p, null, \"이진 탐색 트리에 삽입 연산의 시간복잡도는 일반적으로 \", React.createElement(_components.code, null, \"O(logN)\"), \"이다. 하지만 트리가 완전히 불균형한 상태로 구성된다면 트리의 높이 역시 N을 가지게 되므로 삽입 연산의 시간복잡도는 최악의 경우 \", React.createElement(_components.code, null, \"O(N)\"), \"까지 늘어난다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"구현-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B5%AC%ED%98%84-2\",\n    \"aria-label\": \"구현 2 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"구현\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Node:\\n  def __init__(self, value):\\n    self.value = value\\n    self.left = None\\n    self.right = None\\n\\nclass BST:\\n  def __init__(self):\\n    self.root = None\\n\\n  def insert(self, value):\\n    node = Node(value)\\n    if self.root is None:\\n      self.root = node\\n      return \\n    \\n    current = self.root\\n    while True:\\n      if node.value < current.value:\\n          if current.left is None:\\n            current.left = node\\n            break\\n          else:\\n            current = current.left\\n      else:\\n         if current.right is None:\\n            current.right = node\\n            break\\n         else:\\n            current = current.right\\n            \\n  def inorder_traversal(self, node, arr):\\n    if node is None:\\n      return\\n    self.inorder_traversal(node.left, arr)\\n    arr.append(node.value)\\n    self.inorder_traversal(node.right, arr)\\n\\ndef tree_sort(arr):\\n  bst = BST()\\n  for a in arr:\\n    bst.insert(a)\\n  sorted_arr = []\\n  bst.inorder_traversal(bst.root, sorted_arr)\\n  return sorted_arr\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/leobang/blog-starter/documents/Algorithm/정렬-알고리즘.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","div","p","strong","h5","ol","li","code","ul","pre","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","start","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}