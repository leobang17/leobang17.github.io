{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-데이터베이스-database-index-md-fda7850ce22f91ae5e16.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/데이터베이스/Database-index.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\",\n    h5: \"h5\",\n    a: \"a\",\n    div: \"div\",\n    pre: \"pre\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"인덱스란 DB의 \", React.createElement(_components.strong, null, \"테이블에 대한 검색 속도를 향상시켜주는 자료구조\"), \"이다.\"), \"\\n\", React.createElement(_components.p, null, \"예를들어, \", React.createElement(_components.code, null, \"SELECT * FROM customer WHERE first_name = 'Minsoo';\"), \" 라는 쿼리가 있다고 해보자. 단순 비교를 통해 색인하는 것이므로 \", React.createElement(_components.code, null, \"first_name\"), \" column에 index가 걸려있지 않은 경우 DB 엔진은 모든 row를 linear하게 탐색하며 비교할 것이다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"이를 Full Scan 혹은 Table Scan이라고 한다. Full Scan의 시간복잡도는 O(N)이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"B-Tree index 기반이라면 탐색을 O(logN)으로 처리할 수 있다. 데이터들은 index에 의해 \", React.createElement(\"u\", null, \"정렬된 형태\"), \"를 갖는다.\"), \"\\n\", React.createElement(_components.p, null, \"Index를 사용하는 이유는 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"특정 조건을 만족하는 Tuple(들)을 빠르게 조회하기 위해서\"), \"\\n\", React.createElement(_components.li, null, \"빠르게 정렬(order by)하거나 그루핑 (group by)하기 위해서\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"데이터들은 기본적으로 파일이므로 HDD 혹은 SSD와 같은 디스크 스토리지에 들어가있지만 \", React.createElement(\"u\", null, \"인덱스는 보통 메인 메모리에 올라가 있는다\"), \". 이게 index가 빠른 또 하나의 이유이기도 하다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"index를-만들어보자\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#index%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\",\n    \"aria-label\": \"index를 만들어보자 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Index를 만들어보자\"), \"\\n\", React.createElement(_components.p, null, \"index에 대한 column은 중복을 허용할 수도 있다. 이름 같은 경우는 중복될 수도 있잖아. 그러면 mysql같은 경우 다음과 같이 쿼리를 작성하면 된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"CREATE INDEX player_name_idx ON player(name);\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"player 테이블의 name attribute에 대해 index를 건다.\"), \"\\n\", React.createElement(_components.li, null, \"이후부터는 name을 조건 탐색하는 경우 index가 걸려서 색인하게 된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"CREATE UNIQUE INDEX team_id_backnumber_idx ON player(team_id, backnumber);\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"해당 attribute가 row를 특정할 수 있다면 UNIQUE 인덱스를 생성해줄 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"이렇게 두 개 이상의 attribute로 이루어진 index를 multicolumn index, composite index라고 한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"이렇게 table이 생성된 이후에 쿼리를 통해 인덱스를 만들어도 되지만 table을 정의할 때부터 index를 정의할 수도 있다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"u\", null, \"Primary Key의 경우 index가 자동으로 생성\"), \"된다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"b-tree-기반-index가-어떻게-동작하는지\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#b-tree-%EA%B8%B0%EB%B0%98-index%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94%EC%A7%80\",\n    \"aria-label\": \"b tree 기반 index가 어떻게 동작하는지 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"B Tree 기반 Index가 어떻게 동작하는지\"), \"\\n\", React.createElement(_components.p, null, \"인덱스를 걸어준 attribute의 column을 복사해서 정렬해놓는다. 그리고 ptr 데이터를 가지고 있음. 이 ptr이 원래 table의 어떤 tuple을 가리키고 있는지에 대한 정보를 저장한다.\"), \"\\n\", React.createElement(_components.p, null, \"만약 \", React.createElement(_components.code, null, \"SELECT * FROM members WHERE a = 7 AND b = 95;\"), \"의 쿼리를 실행하는데 \", React.createElement(_components.code, null, \"a\"), \" attribute에만 인덱스가 걸려있다면?\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"a의 조건에 맞는 tuple을 찾는데는 logN의 시간복잡도가 필요하지만, a 조건에 부합하는 tuple 안에서는 또다시 full scan을 해주어야 한다.\"), \"\\n\", React.createElement(_components.li, null, \"따라서 a, b가 같이 묶여서 많이 조회된다면 composite index를 만드는 것을 고려해보아도 좋다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"composite index의 경우 \", React.createElement(_components.code, null, \"CREATE INDEX(a, b)\"), \" 쿼리의 왼쪽부터 정렬해준다.\"), \"\\n\", React.createElement(_components.li, null, \"a부터 정렬하고 a의 값이 같다면 그 안에서 b를 기준으로 정렬해주는 것.\"), \"\\n\", React.createElement(_components.li, null, \"index의 attribute 순서가 다르다!\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"만약 a와 b를 섞어 composite index를 걸었는데, b를 조건으로만 색인을 한다면?\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"성능이 안나온다. 먼저 a가 정렬되어있기 때문. 사실상 정렬되어있지 않는 상태다.\"), \"\\n\", React.createElement(_components.li, null, \"대부분 Full Scan하게 된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"정리하자면, 많이 사용되는 query에 맞추어 적절하게 index를 걸어주면 query의 속도를 개선할 수 있다.\")), \"\\n\", React.createElement(_components.p, null, \"player table이 다음과 같다고 하자.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"id\"), React.createElement(_components.th, null, \"name\"), React.createElement(_components.th, null, \"team_id\"), React.createElement(_components.th, null, \"backnumber\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"···\"), React.createElement(_components.td, null, \"···\"), React.createElement(_components.td, null, \"···\"), React.createElement(_components.td, null, \"···\")))), \"\\n\", React.createElement(_components.p, null, \"index가 걸려있는 항목은 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"id: pk이므로 기본으로 걸려있음\"), \"\\n\", React.createElement(_components.li, null, \"name\"), \"\\n\", React.createElement(_components.li, null, \"(team_id, backnumber)\"), \"\\n\", React.createElement(_components.li, null, \"backnumber\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"만약 이 상황에서 \", React.createElement(_components.code, null, \"SELECT * FROM player WHERE backnumber = 7;\"), \" 쿼리를 실행하면 어떻게 될까? \", React.createElement(_components.code, null, \"backnumber\"), \" attribute를 이용하는 index는 2개니까! 이 때는 sql optimizer가 적합한 index를 사용해 처리한다.\"), \"\\n\", React.createElement(_components.p, null, \"근데 가끔씩은 이 optimizer도 빠가가 되어 인덱스를 잘못 선택하는 경우가 있다. 이 때는 직접 이용할 index를 골라 쿼리를 실행할 수도 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT * FROM player USE INDEX (backnumber_idx) WHERE backnumber = 7;\\n혹은\\nSELECT * FROM player FORCE INDEX (backnumber_idx) WHERE backnumber = 7;\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"USE INDEX\"), \" 키워드의 경우 권장 사항의 느낌. ‘optimizer에게 가급적 이 index를 이용해달라’ 부탁하는 느낌\"), \"\\n\", React.createElement(_components.li, null, \"무조건 이용하도록 하는 키워드는 \", React.createElement(_components.code, null, \"FORCE INDEX\")), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"index는-막-만들어도-괜찮을까-성능-향상에-좋은-것-같은데\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#index%EB%8A%94-%EB%A7%89-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%8F%84-%EA%B4%9C%EC%B0%AE%EC%9D%84%EA%B9%8C-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%EC%97%90-%EC%A2%8B%EC%9D%80-%EA%B2%83-%EA%B0%99%EC%9D%80%EB%8D%B0\",\n    \"aria-label\": \"index는 막 만들어도 괜찮을까 성능 향상에 좋은 것 같은데 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Index는 막 만들어도 괜찮을까? 성능 향상에 좋은 것 같은데.\"), \"\\n\", React.createElement(_components.p, null, \"Index에는 여러 단점도 존재한다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"index를 위한 추가적인 저장공간이 필요하다.\"), \"\\n\", React.createElement(_components.li, null, \"index를 관리하기 위해 추가 작업이 필요하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Index를 생성해줄 때마다 Index를 위한 부가적인 자료구조가 담긴 테이블도 생성된다. 그 것도 모든 column의 값을 복사해서! 그리고 Index 자료구조는 \", React.createElement(\"u\", null, \"메인 메모리에 상주할 가능성이 높기 때문에 불필요한 메모리 점유를 초래\"), \"할 수도 있다.\"), \"\\n\", React.createElement(_components.p, null, \"또한 index는 항상 정렬된 상태로 유지해야하기 때문에 index가 적용된 column에 INSERT, UPDATE, DELETE를 수행하면 정렬을 맞추기 위한 추가 작업이 필요하다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"index가 걸린 table이 커질수록 write 작업에 대한 overhead도 늘어나게 된다.\"), \"\\n\", React.createElement(_components.li, null, \"또한 데이터의 index를 \", React.createElement(\"u\", null, \"제거하는 것이 아니라 ‘사용하지 않음’으로 처리하고 남겨\"), \"두기 때문에 UPDATE 작업이 많은 경우 실제 데이터 크기에 비해 index가 과도하게 커지는 문제점이 나타날 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"따라서 불필요한 index는 만들지 않는 것이 중요하다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"index가-오히려-독이-되는-경우--full-scan이-더-나은-경우\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#index%EA%B0%80-%EC%98%A4%ED%9E%88%EB%A0%A4-%EB%8F%85%EC%9D%B4-%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0--full-scan%EC%9D%B4-%EB%8D%94-%EB%82%98%EC%9D%80-%EA%B2%BD%EC%9A%B0\",\n    \"aria-label\": \"index가 오히려 독이 되는 경우  full scan이 더 나은 경우 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Index가 오히려 독이 되는 경우 = Full Scan이 더 나은 경우\"), \"\\n\", React.createElement(_components.p, null, \"table에 데이터가 조금만 있을 경우에는 성능 차이가 거의 없다.\"), \"\\n\", React.createElement(_components.p, null, \"혹은 조회하려는 데이터가 테이블의 상당 부분을 차지할 때도 오히려 성능 저하를 초래한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"만약 \", React.createElement(_components.code, null, \"SELECT * FROM customer WHERE mobile_carrier = 'SK';\"), \" 라는 쿼리를 실행해야하는데, SK를 이용하는 이용자가 90% 이상일 경우 full scan하는 것이 더 낫다.\"), \"\\n\", React.createElement(_components.li, null, \"물론 full scan할지는 optimizer가 판단한다.\"), \"\\n\", React.createElement(_components.li, null, \"성별, 나이와 같이 range가 적은 column의 경우에도 index를 읽고 나서 다시 많은 데이터를 조회해야하므로 비효율적이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"covering-index-스킬\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#covering-index-%EC%8A%A4%ED%82%AC\",\n    \"aria-label\": \"covering index 스킬 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Covering Index 스킬!\"), \"\\n\", React.createElement(_components.p, null, \"만약 \", React.createElement(_components.code, null, \"SELECT team_id, backnumber FROM player WHERE team_id = 5;\"), \" 라는 쿼리를 실행하는데, 해당 \", React.createElement(_components.code, null, \"player\"), \" 테이블에 \", React.createElement(_components.code, null, \"team_id\"), \"와 \", React.createElement(_components.code, null, \"backnumber\"), \"를 모은 composite index가 걸려있다고 해보자.\"), \"\\n\", React.createElement(_components.p, null, \"이미 index 테이블에 team_id와 backnumber 값은 정렬된 채로 저장되어있는 상태이다. 굳이 B Tree를 색인한 후에 ptr이 가리키는 tuple로 돌아와서 값을 줄 필요 없이, index 테이블에서 바로 꺼내올 수 있는 상태!\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"조회하려는 attribute들을 index가 모두 cover하고 있는 경우, covering index를 이용하면 조회 속도가 더 빨라진다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"index의-구현-방식\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#index%EC%9D%98-%EA%B5%AC%ED%98%84-%EB%B0%A9%EC%8B%9D\",\n    \"aria-label\": \"index의 구현 방식 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Index의 구현 방식\"), \"\\n\", React.createElement(_components.p, null, \"위에서는 B Tree를 말했지만 Hash를 이용해 구현한 Hash Index도 존재한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"조회 시간복잡도가 O(1)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"하지만 단점도 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"rehashing에 대한 부담\"), \"\\n\", React.createElement(_components.li, null, \"equality 비교만 가능하다. range 비교는 불가능\"), \"\\n\", React.createElement(_components.li, null, \"multicolumn index의 경우 전체 attributes에 대한 조회만 가능하다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"(a, b)로 composite했다면, 조회 조건에 a와 b가 모두 들어가는 경우에만 이용할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"b tree의 경우 (a, b) composite여도 a로만 검색할 수도 있었음.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"hash table 자료구조의 경우 array로 되어있는데, array가 늘어날 경우 어느 지점에서는 이 data size를 늘려주어야 하는데, 이를 rehashing 이라고 한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"트래픽이 막 몰려오는데 rehashing 하는데에 대한 부담\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"order-by나-group-by에도-index가-사용될-수-있다\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#order-by%EB%82%98-group-by%EC%97%90%EB%8F%84-index%EA%B0%80-%EC%82%AC%EC%9A%A9%EB%90%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\",\n    \"aria-label\": \"order by나 group by에도 index가 사용될 수 있다 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"order by나 group by에도 index가 사용될 수 있다\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"foreign-key에는-index가-자동으로-생성되지-않을-수-있다\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#foreign-key%EC%97%90%EB%8A%94-index%EA%B0%80-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EC%83%9D%EC%84%B1%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8B%A4\",\n    \"aria-label\": \"foreign key에는 index가 자동으로 생성되지 않을 수 있다 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"foreign key에는 index가 자동으로 생성되지 않을 수 있다\"), \"\\n\", React.createElement(_components.p, null, \"join 관련해서 성능 문제가 나타날 수 있기 때문\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"이미-data가-몇-백만-건-이상-있는-테이블에-index를-생성하는-경우-시간이-몇-분-이상-소요될-수-있고-db-성능에-안좋은-영향을-줄-수-있다\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%9D%B4%EB%AF%B8-data%EA%B0%80-%EB%AA%87-%EB%B0%B1%EB%A7%8C-%EA%B1%B4-%EC%9D%B4%EC%83%81-%EC%9E%88%EB%8A%94-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90-index%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0-%EC%8B%9C%EA%B0%84%EC%9D%B4-%EB%AA%87-%EB%B6%84-%EC%9D%B4%EC%83%81-%EC%86%8C%EC%9A%94%EB%90%A0-%EC%88%98-%EC%9E%88%EA%B3%A0-db-%EC%84%B1%EB%8A%A5%EC%97%90-%EC%95%88%EC%A2%8B%EC%9D%80-%EC%98%81%ED%96%A5%EC%9D%84-%EC%A4%84-%EC%88%98-%EC%9E%88%EB%8B%A4\",\n    \"aria-label\": \"이미 data가 몇 백만 건 이상 있는 테이블에 index를 생성하는 경우 시간이 몇 분 이상 소요될 수 있고 db 성능에 안좋은 영향을 줄 수 있다 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"이미 Data가 몇 백만 건 이상 있는 테이블에 index를 생성하는 경우 시간이 몇 분 이상 소요될 수 있고, DB 성능에 안좋은 영향을 줄 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"그 시간동안 DB 성능에 안좋은 영향을 줄 수 있겠지? 그냥 read 쿼리면 괜찮은데 index를 생성하는 도중에 write 쿼리가 많이 날아오는 상황이라면··· 더 느려질 것.\"), \"\\n\", React.createElement(_components.p, null, \"트래픽이 적은 시간에 하길 추천.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/leobang/blog-starter/documents/데이터베이스/Database-index.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","code","blockquote","ul","li","h5","a","div","pre","table","thead","tr","th","tbody","td","ol","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}