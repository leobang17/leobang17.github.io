{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-spring-enable-jpa-auditing을-분리하게된-과정-md-a8dd45ba01723eeb607b.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/Spring/EnableJpaAuditing을-분리하게된-과정.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    h4: \"h4\",\n    blockquote: \"blockquote\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"에러-내용\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%97%90%EB%9F%AC-%EB%82%B4%EC%9A%A9\",\n    \"aria-label\": \"에러 내용 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"에러 내용\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Caused by: java.lang.IllegalArgumentException: JPA metamodel must not be empty!\\n\\tat org.springframework.util.Assert.notEmpty(Assert.java:464)\\n\\tat org.springframework.data.jpa.mapping.JpaMetamodelMappingContext.<init>(JpaMetamodelMappingContext.java:58)\\n\\tat org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean.createInstance(JpaMetamodelMappingContextFactoryBean.java:80)\\n\\tat org.springframework.data.jpa.repository.config.JpaMetamodelMappingContextFactoryBean.createInstance(JpaMetamodelMappingContextFactoryBean.java:44)\\n\\tat org.springframework.beans.factory.config.AbstractFactoryBean.afterPropertiesSet(AbstractFactoryBean.java:142)\\n\\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1830)\\n\\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1767)\\n\\t... 52 more\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"when\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#when\",\n    \"aria-label\": \"when permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"When\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"@WebMvcTest\"), \"를 이용해 sliced test를 진행하고 있었다. ExceptionHandler가 올바르게 작동하는지에 대한 테스트 였음.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"why\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#why\",\n    \"aria-label\": \"why permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Why\"), \"\\n\", React.createElement(_components.p, null, \"스프링 부트의 메인클래스, \", React.createElement(_components.code, null, \"@SpringBootApplication\"), \"어노테이션이 붙어있는 클래스는 자동으로 모든 테스트들의 기본 설정으로 적용된다.\"), \"\\n\", React.createElement(_components.p, null, \"당시 메인클래스에는 \", React.createElement(_components.code, null, \"@EnableJpaAuditing\"), \" 어노테이션이 적용되어있었다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"@EnableJpaAuditing   // <--\\n@SpringBootApplication\\npublic class YomojomoApplication {\\n  //...\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"따라서 테스트 코드는 실행될 때 \", React.createElement(_components.code, null, \"@SpringBootApplication\"), \"이 붙은 나의 \", React.createElement(_components.code, null, \"~~Application.java\"), \"를 로딩하는데, 테스트 코드에 붙은 \", React.createElement(_components.code, null, \"@WebMvcTest\"), \" 은 sliced test로 JPA 관련 bean 들을 로딩하지 않아 \", React.createElement(_components.code, null, \"@EnableJpaAuditing\"), \"과 설정이 맞지 않는 문제가 생긴 것.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"@WebMvcTest\"), \" 역시 Spring 통합 테스트 이기에 스프링 앱을 실행시켜 Application context를 구성해야함. 그래서 \", React.createElement(_components.code, null, \"@SpringBootApplication\"), \"이 붙은 메인 클래스의 main 메서드를 실행시켜 앱을 실행시키는데, 이 때 메인 클래스에 붙은 \", React.createElement(_components.code, null, \"@EnableJpaAuditing\"), \"이 같이 적용됨. 근데 \", React.createElement(_components.code, null, \"@WebMvcTest\"), \"의 경우 \", React.createElement(_components.code, null, \"@EnableJpaAuditing\"), \"이 필요로 하는 JPA 관련 Bean들을 ApplicationContext에 로드하지 않으므로 bean을 찾지 못했다는 에러가 뜬 것.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"how\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#how\",\n    \"aria-label\": \"how permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"How\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"1-configuration-파일-분리-권장\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#1-configuration-%ED%8C%8C%EC%9D%BC-%EB%B6%84%EB%A6%AC-%EA%B6%8C%EC%9E%A5\",\n    \"aria-label\": \"1 configuration 파일 분리 권장 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"1. configuration 파일 분리 (권장)\"), \"\\n\", React.createElement(_components.p, null, \"임의의 디렉토리에 해당 \", React.createElement(_components.code, null, \"@EnableJpaAuditing\"), \"을 위한 설정 파일을 만든다. \", React.createElement(_components.code, null, \"@SpringBootApplication\"), \"에 붙은 \", React.createElement(_components.code, null, \"@ComponentScan\"), \"에 의해 \", React.createElement(_components.code, null, \"@Configuration\"), \" 이 등록된 클래스를 빈으로 로드한다. 이 과정에서 \", React.createElement(_components.code, null, \"@Enable~\"), \" 역시 적용된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"@EnableJpaAuditing\\n@Configuration\\npublic class JpaAuditingConfig { }\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"테스트 해보니까 안되는데요?\")), \"\\n\", React.createElement(_components.p, null, \"혹시 sliced test를 진행중인지 확인해보자. @Configuration 클래스를 스캔하지 않는 @WebMvcTest나 @DataJpaTest의 경우, 애초에 스캔을 안하므로 적용이 안된다.\"), \"\\n\", React.createElement(_components.p, null, \"해당 기능을 확인하고 싶다면 @SpringBootTest를 이용해 완전한 integration test를 진행하자.\"), \"\\n\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"2-필요한-sliced-test마다-mockbean으로-적용\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#2-%ED%95%84%EC%9A%94%ED%95%9C-sliced-test%EB%A7%88%EB%8B%A4-mockbean%EC%9C%BC%EB%A1%9C-%EC%A0%81%EC%9A%A9\",\n    \"aria-label\": \"2 필요한 sliced test마다 mockbean으로 적용 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"2. 필요한 sliced test마다 @MockBean으로 적용.\"), \"\\n\", React.createElement(_components.p, null, \"모든 sliced 테스트 코드마다 적용해주어야 하는 단점이 있다. 또한, main 클래스에 붙은 \", React.createElement(_components.code, null, \"@Enable~\"), \" 기능이 필요 없는 테스트 마저 해당 기능을 불러오기 때문에 비효율적인 테스트가 될 수 있기 때문에 지양하자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"@WebMvcTest\\n@MockBean(JpaMetamodelMappingContext.class)\\nclass UserApiControllerTest {  ...  }\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/Spring/EnableJpaAuditing을-분리하게된-과정.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","div","pre","code","p","h4","blockquote","strong","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}