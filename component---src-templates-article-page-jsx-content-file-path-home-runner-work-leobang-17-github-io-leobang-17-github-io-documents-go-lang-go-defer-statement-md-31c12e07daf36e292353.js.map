{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-go-lang-go-defer-statement-md-31c12e07daf36e292353.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/GoLang/Go-defer-statement.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    em: \"em\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, React.createElement(_components.code, null, \"defer\"), \" keyword는 다른 일반적인 programming language에는 등장하지 않는 Go의 특별한 기능이다. \", React.createElement(_components.strong, null, \"함수가 반환하기 직전에 특정한 코드를 실행하도록 예약\"), \"하는 기능이다. 말그대로, \", React.createElement(_components.em, null, \"해당 함수 내의 defer된 동작\"), \"을 정의한다. 주로 clean-up 작업에 유용하게 쓰인다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"resource를 정리하거나 (i.e. file, network connection 등을 닫을 때)\"), \"\\n\", React.createElement(_components.li, null, \"Lock을 해제하거나\"), \"\\n\", React.createElement(_components.li, null, \"Callstack을 타고 올라오는 \", React.createElement(_components.code, null, \"Panic\"), \"을 처리하는데 사용된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"defer\"), \" statement는 \", React.createElement(_components.strong, null, \"해당 키워드 뒤에 오는 \", React.createElement(_components.em, null, \"function call\"), \"을 ”\", React.createElement(_components.em, null, \"defer stack\"), \"“에 삽입\"), \"한다. 주의할 점은, function이 아니라 \", React.createElement(_components.em, null, \"function call\"), \"이라는 점이다. 실행되는 function의 호출을 defer statement에 제공해야하므로, anonymous function을 \", React.createElement(_components.code, null, \"defer\"), \" 뒤에 작성하는 경우 \", React.createElement(_components.code, null, \"()\"), \" 을 붙여 function call임을 명시해야한다.\"), \"\\n\", React.createElement(_components.p, null, \"resource 정리의 측면에서 \", React.createElement(_components.code, null, \"defer\"), \"가 유용하게 이용되는 용례를 확인해보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"func main() {\\n\\tif err := write(\\\"readme.txt\\\", \\\"This is a readme file\\\"); err != nil {\\n\\t\\tlog.Fatal(\\\"failed to write file:\\\", err)\\n\\t}\\n}\\n\\nfunc write(fileName string, text string) error {\\n\\tfile, err := os.Create(fileName)\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\t_, err = io.WriteString(file, text)\\n\\tif err != nil {\\n    file.Close()\\t\\t// < duplicated close call # 1\\n\\t\\treturn err\\n\\t}\\n\\tfile.Close()\\t\\t\\t// < duplicated close call # 2\\n\\treturn nil\\n}\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"io.WriteString\"), \"이 실패하든 실패하지 않든, 열린 파일은 함수가 return되기 전에 닫혀야 불필요한 메모리 점유를 피할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"지금은 2가지 경우의 수만 있지만, 앞으로도 file이 열린 후 발생할 예외처리가 늘어난다면?\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"어차피 함수를 탈출하기 전에 닫아야 하는 것이라면, \", React.createElement(_components.code, null, \"defer\"), \"를 이용해 보다 직관적인 코드 작성이 가능하다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"func main() {\\n\\tif err := write(\\\"readme.txt\\\", \\\"This is a readme file\\\"); err != nil {\\n\\t\\tlog.Fatal(\\\"failed to write file:\\\", err)\\n\\t}\\n}\\n\\nfunc write(fileName string, text string) error {\\n\\tfile, err := os.Create(fileName)\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\tdefer file.Close()\\n\\t_, err = io.WriteString(file, text)\\n\\tif err != nil {\\n\\t\\treturn err\\n\\t}\\n\\treturn nil\\n}\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"multiple-defer-statements\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#multiple-defer-statements\",\n    \"aria-label\": \"multiple defer statements permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Multiple defer statements\"), \"\\n\", React.createElement(_components.p, null, \"Go runtime은 \", React.createElement(_components.code, null, \"defer\"), \"를 관리하기 위해 내부적으로 \", React.createElement(_components.em, null, React.createElement(_components.code, null, \"defer\"), \" stack\"), \"을 유지한다. 다른 언어와 동일하게 Go에서 함수 호출 시, 각 함수는 자신의 stack frame을 가지게 되며, \", React.createElement(_components.code, null, \"defer\"), \"된 함수의 호출이 담긴 \", React.createElement(_components.code, null, \"defer\"), \" stack은 이 stack frame 내부에 저장되게 된다. (= 각 함수의 stack frame 속에 해당 함수 안에 정의된 defer stack이 유지된다)\"), \"\\n\", React.createElement(_components.p, null, \"이름 그대로, defer stack 역시 LIFO 구조다. 하나의 함수 내에서 여러 개의 \", React.createElement(_components.code, null, \"defer\"), \" statement가 등장하면 어떻게 될까? 답은 선언된 역순으로 실행된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"func main() {\\n  defer fmt.Println(\\\"one\\\")\\n  defer fmt.Println(\\\"two\\\")\\n  defer fmt.Println(\\\"three\\\")\\n}\\n\\n// three two one\\n\")), \"\\n\", React.createElement(_components.p, null, \"하나의 함수 안에서 원하는 만큼 \", React.createElement(_components.code, null, \"defer\"), \" 문을 선언할 수 있다. \", React.createElement(_components.strong, null, \"모든 \", React.createElement(_components.code, null, \"defer\"), \" 동작은 선언된 역순으로 실행된다\"), \"는 것을 기억하자.\"), \"\\n\", React.createElement(_components.p, null, \"물론 defer stack이 선언되기 전의 insturction에서 return한다면, 그보다 아래의 defer statement들은 무시된다. defer stack의 head는 실제 runtime에서 return에 걸리는 부분 직전에 선언된 defer statement가 된다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"panic-handling\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#panic-handling\",\n    \"aria-label\": \"panic handling permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Panic Handling\"), \"\\n\", React.createElement(_components.p, null, \"Go에서 일반적인 Error handling은 Error value를 반환하고 이를 처리하는 방식으로 진행되지만, 다른 일반적인 programming language에서 지원하는 throw 메커니즘과 비슷한 Error 역시 존재한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Panic\"), \"은 타 language의 exception처럼 발생하는 즉시 함수의 실행이 중단되고 함수의 call stack을 거슬어 올라가게 된다. 이 때, \", React.createElement(_components.em, null, \"stack을 거슬러 올라가며 거치는 함수의 모든 \", React.createElement(_components.code, null, \"defer\"), \" 문을 실행\"), \"하게 된다. 이를 통해 프로그램이 비정상 중단되기 전에 중요한 clean-up 작업을 수행할 수 있는 기회를 제공한다.\"), \"\\n\", React.createElement(_components.p, null, \"또한 \", React.createElement(_components.code, null, \"defer\"), \" statement는 그 뒤에 등장하는 function call 속에서 \", React.createElement(_components.code, null, \"recover()\"), \"라는 특수한 함수를 호출할 수 있게 한다. \", React.createElement(_components.code, null, \"recover\"), \" 함수는 말그대로 \", React.createElement(_components.code, null, \"panic\"), \" 상황을 restore하고 panic에 의해 설정된 error value를 반환한다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"restore\"), \" function은 오직 \", React.createElement(_components.code, null, \"defer\"), \" 뒤에 오는 function call에서만 유효하다. 다른 곳에서 \", React.createElement(_components.code, null, \"restore\"), \"를 호출해도 panic 상황을 복구하지 않는다. 애초에 panic 상황에서는 defer stack 속의 함수만을 호출하므로 생각해보면 당연하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"따라서, 일반적인 \", React.createElement(_components.code, null, \"try···catch\"), \" 메커니즘을 Go에서는 \", React.createElement(_components.code, null, \"defer\"), \"와 \", React.createElement(_components.code, null, \"restore\"), \" 함수를 이용해 구현할 수 있겠다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"func mayPanic() {\\n  panic(\\\"something bad happened\\\")\\n}\\n\\nfunc main() {\\n  defer func() {\\n    if r := recover(); r != nil {\\n      fmt.Println(\\\"Recovered in main\\\", r)\\n    }\\n  }()\\n  mayPanic()\\n  fmt.Println(\\\"This statement will not be executed\\\")\\n}\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/GoLang/Go-defer-statement.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","strong","em","ul","li","pre","h2","a","div","blockquote","_provideComponents","components","React","className","id","style","position","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}