{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-데이터베이스-database-partitioning-md-fa30f17f3626c6a89137.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/데이터베이스/Database-partitioning.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h5: \"h5\",\n    blockquote: \"blockquote\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"partitioning이란\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#partitioning%EC%9D%B4%EB%9E%80\",\n    \"aria-label\": \"partitioning이란 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Partitioning이란\"), \"\\n\", React.createElement(_components.p, null, \"database table을 더 작은 크기의 테이블로 나누는 것을 말한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"vertical-partitioning이란\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#vertical-partitioning%EC%9D%B4%EB%9E%80\",\n    \"aria-label\": \"vertical partitioning이란 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Vertical Partitioning이란?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"u\", null, \"Column을 기준으로 table을 나누는\"), \" 방식이다. 따라서 테이블의 스키마가 바뀌며, 새로운 테이블이 한 개 이상 생기게 된다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"정규화 역시 vertical partitioning의 한 방식이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"![image-20231026120943090](/Users/leobang/Library/Application Support/typora-user-images/image-20231026120943090.png)\"), \"\\n\", React.createElement(_components.p, null, \"Select문을 실행하면, 아무리 select에 원하는 column만을 지정해두어도 일단 query가 동작하는 방식은 해당 테이블의 row를 모두 가져온 후에 원하는 column만 반환하게 된다. 예를들어:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sql\"\n  }, \"SELECT id, title, ... ,commend_cnt FROM article WHERE ...;\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이 SQL문을 실행하더라도 실제 schema에 content라는 attribute가 있다면 그 것까지 모두 HDD 혹은 SSD에서 읽어들인다는 뜻이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"그런데 만약 읽기가 자주 일어나는 query에 불필요한 attribute의 크기가 굉장히 큰 경우라면? 불필요하게 I/O에 영향을 주게 된다. (물론 index를 잘 걸어두었거나 했다면 괜찮지만 full-scan을 했을 때는 체감이 될 수도 있다.)\"), \"\\n\", React.createElement(_components.p, null, \"이 때 ARTICLE 테이블에서 content 속성을 빼고, 새로운 ARTICLE_CONTENT 테이블에 해당 속성을 추가하여 따로 색인할 수 있도록 분리하는 것을 vertical partitioning 이라고 한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"horizontal-partitioning이란\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#horizontal-partitioning%EC%9D%B4%EB%9E%80\",\n    \"aria-label\": \"horizontal partitioning이란 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Horizontal Partitioning이란?\"), \"\\n\", React.createElement(_components.p, null, \"Row를 기준으로 table을 나누는 방식이다. 따라서 테이블의 스키마는 변함이 없다.\"), \"\\n\", React.createElement(_components.p, null, \"만약 인덱스를 걸어두었을 경우, 테이블의 크기가 커질수록 인덱스의 크기도 커지게 된다. 즉, 테이블에 읽기/쓰기가 있을 때마다 index에서 처리되는 시간도 조금씩 늘어난다는 뜻이다.\"), \"\\n\", React.createElement(_components.p, null, \"이렇게 하나의 테이블이 너무너무 row가 많아졌을 때 수평으로 뎅강해서 테이블을 나누는 것을 horizontal partitioning이라고 한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"horizontal-partitioning을-구현하는-방법-hash-based\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#horizontal-partitioning%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-hash-based\",\n    \"aria-label\": \"horizontal partitioning을 구현하는 방법 hash based permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Horizontal Partitioning을 구현하는 방법: Hash-Based\"), \"\\n\", React.createElement(_components.p, null, \"Hash function을 하나 마련한다. 특정 key를 넣어주면 해당 key의 row가 저장되어 있는/저장될 테이블을 가리키는 값을 반환해준다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이 때 Hash function에 입력되는 key를 \", React.createElement(\"u\", null, \"Partition Key\"), \"라고 부른다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Partitoin Key를 올바르게 설계하는 것은 매우 중요하다. 다음의 예시를 생각해보자:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"partition key를 user_id로 지정했지만, 어떠한 query의 경우 member_name을 기준으로 SELECT를 하고 싶다면?\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"이 때는 모든 수평분할된 테이블을 조회해주어야 한다. member_name을 기준으로 나눈게 아니기 때문이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"따라서, \", React.createElement(\"u\", null, \"가장 많이 사용될 패턴에 따라 partition key를 정해주는 것\"), \"이 굉장히 중요하다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"또한, 데이터가 균등하게 분배될 수 있도록 hash function을 잘 정의하는 것도 중요하다.\"), \"\\n\", React.createElement(_components.p, null, \"Horizontal Partitioning의 단점은 \", React.createElement(\"u\", null, \"한번 partiton이 나눠져서 사용되고 있다면 이후에 partiton을 추가하기 까다롭다\"), \"는 점이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"파티션을 \", (0, 1), \"로 나누어 파티셔닝을 운용하고 있다가 나중에 파티션을 \", (0, 1, 2, 3), \"으로 늘리고 싶다고 생각해보자.\"), \"\\n\", React.createElement(_components.li, null, \"이는 가능하긴 하지만 \", (0, 1), \"의 데이터를 다시 \", (0, 1, 2, 3), \"으로 나눌 hash funciton을 재정의하고 해당 hash에 따라 데이터를 모두 옮겨주어야 하므로 부하가 큰 작업이 될 수 있다. 초반에 설계를 잘 하자.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"sharding이란\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#sharding%EC%9D%B4%EB%9E%80\",\n    \"aria-label\": \"sharding이란 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Sharding이란?\"), \"\\n\", React.createElement(_components.p, null, \"Horizontal Partitoning처럼 동작한다. 개념 자체는 동일하다! 하지만 Horizontal Partitioning과 다른 점은 \", React.createElement(\"u\", null, \"각각의 파티션이 서로 다른 DB 서버에 저장 되어있다\"), \"는 점이다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Horizontal Partitioning의 경우 각 파티션이 동일한 DB 서버에서 동작한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"부하를 분산시킬 수 있으므로 트래픽이 큰 서비스의 경우 샤딩을 잘 이용하면 좋다.\"), \"\\n\", React.createElement(_components.p, null, \"샤딩의 경우 partiton key를 shard key라고 부르고, 각 partition을 shard라고 부른다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"replication이란\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#replication%EC%9D%B4%EB%9E%80\",\n    \"aria-label\": \"replication이란 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Replication이란?\"), \"\\n\", React.createElement(_components.p, null, \"Master/Primary/Leader 노드가 있고, 이를 바라보고 있는 복사본인 Slave/Secondary/Replica 노드라고 한다.\"), \"\\n\", React.createElement(_components.p, null, \"마스터 노드의 변경사항이 생기면 (write) 이를 전파하는데, 그 방식은 동기적일 수도 있고 비동기적으로 구성될 수도 있다. 그리고 read 요청이 올 경우 read replica에게 부하를 분산해줄 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"Fail over에도 능하다. master가 죽었을 경우 다른 replica를 승격시키면 되므로. 이를 통해 \", React.createElement(\"u\", null, \"HA (고가용성)\"), \"을 획득할 수 있다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/데이터베이스/Database-partitioning.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","div","p","h5","blockquote","pre","code","ul","li","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}