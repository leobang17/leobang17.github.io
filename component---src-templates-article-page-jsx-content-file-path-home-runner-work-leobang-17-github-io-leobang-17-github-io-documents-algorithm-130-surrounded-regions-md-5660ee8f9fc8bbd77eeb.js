"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[991],{5317:function(e,n,t){t.r(n),t.d(n,{Head:function(){return p.py},default:function(){return v}});var l=t(1151),a=t(7294);function r(e){const n=Object.assign({h2:"h2",a:"a",div:"div",p:"p",code:"code",h4:"h4",ul:"ul",li:"li",pre:"pre"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h2,{id:"문제",style:{position:"relative"}},a.createElement(n.a,{href:"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"문제"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://leetcode.com/problems/surrounded-regions/description/?envType=study-plan-v2&envId=top-interview-150",target:"_self",rel:"nofollow"},"130. Surrounded Regions")),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"m")," * ",a.createElement(n.code,null,"n"),"의 2차원 배열 ",a.createElement(n.code,null,"board"),"가 주어진다. ",a.createElement(n.code,null,"board"),"는 ",a.createElement(n.code,null,'"X"')," 혹은 ",a.createElement(n.code,null,'"O"'),"으로 이루어져 있다. 사방이 ",a.createElement(n.code,null,'"X"'),"으로 둘러싸인 ",a.createElement(n.code,null,'"O"')," 지역을 ",a.createElement(n.code,null,'"X"'),"으로 뒤집으려고 한다.\n주어진 ",a.createElement(n.code,null,"board")," 배열을 조작하고 다른 것을 반환하지 말 것."),"\n",a.createElement(n.h4,{id:"constraints",style:{position:"relative"}},a.createElement(n.a,{href:"#constraints","aria-label":"constraints permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Constraints"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.code,null,"m == board.length")),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"n == board[i].length")),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"1 <= m, n <= 200")),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"board[i][j] is 'X' or 'O'.")),"\n"),"\n",a.createElement(n.h2,{id:"approach---graph-bfs",style:{position:"relative"}},a.createElement(n.a,{href:"#approach---graph-bfs","aria-label":"approach   graph bfs permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Graph (BFS)"),"\n",a.createElement(n.p,null,"사방이 X로 둘러싸인 지역 = index의 끝 부분에 걸쳐있는 노드가 없는 지역을 말한다.\nBFS로 연결된 “O” 지역을 탐색하며 index의 끝에 존재하는 노드가 있는지 확인하고, 이 결과를 플래그에 저장한다. 탐색한 노드들(인접한 “O”들로 연결되어있는 노드들)은 stack에 따로 담긴다.\n플래그가 True일 경우 사방이 “X”로 둘러싸인 지역이라는 뜻이므로 stack에 존재하는 모든 노드를 “X”로 바꾸어 준다."),"\n",a.createElement(n.h4,{id:"complexity",style:{position:"relative"}},a.createElement(n.a,{href:"#complexity","aria-label":"complexity permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"time complexity: `O()"),"\n",a.createElement(n.li,null,"space complexity:"),"\n"),"\n",a.createElement(n.h4,{id:"code",style:{position:"relative"}},a.createElement(n.a,{href:"#code","aria-label":"code permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},'from collections import deque\n\nclass Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        dx, dy = [-1, 0, 1, 0], [0, 1, 0, -1]\n        N, M = len(board), len(board[0])\n        visited = [[False for _ in range(M)] for _ in range(N)]\n        \n        for i in range(N):\n            for j in range(M):\n                if visited[i][j] or board[i][j] == "X":\n                    continue\n                flag = True\n                stack = [(i, j)]\n                q = deque([(i, j)])\n\n                while q:\n                   x, y = q.popleft()\n                   \n                   for k in range(4):\n                        nx, ny = x + dx[k], y + dy[k]\n                        if 0 > nx or nx >= N or 0 > ny or ny >= M:\n                            flag = False\n                        elif not visited[nx][ny] and board[nx][ny] == "O":\n                            q.append((nx, ny))\n                            stack.append((nx, ny))\n                            visited[nx][ny] = True\n                if flag:\n                    for x, y in stack:\n                        board[x][y] = "X"\n')),"\n",a.createElement(n.h2,{id:"approach---graph-그런데-더-좋은-아이디어",style:{position:"relative"}},a.createElement(n.a,{href:"#approach---graph-%EA%B7%B8%EB%9F%B0%EB%8D%B0-%EB%8D%94-%EC%A2%8B%EC%9D%80-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4","aria-label":"approach   graph 그런데 더 좋은 아이디어 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Graph, 그런데 더 좋은 아이디어."),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://www.youtube.com/watch?v=9z2BunfoZ5Y",target:"_self",rel:"nofollow"},"NeetCode의 해설"),"에 있던 솔루션. 아이디어가 참 좋았다..!"),"\n",a.createElement(n.p,null,"사방이 “X”로 둘러싸인 “O” 지역을 발견하는게 아니라, 발상의 전환을 해서 사방이 “X”로 둘러싸이지 않은 지역을 발견하는 것. 사방이 “X”로 둘러싸이지 않은 지역은, “O” 지역의 노드 중 하나 이상이 index의 끝에 위치한 노드였었다.\n그 말인즉, index의 끝에 위치한 노드가 “O” 지역일 경우 해당 노드와 인접한 “O” 지역은 모두 “X”로 변하지 않아도 되는 지역인 것이다.\n내 풀이처럼 굳이 매 노드를 순회하며 그래프 탐색을 수행하고, flag로 기억하고, stack에 넣은 노드들을 “X”로 다시 바꾸어주는 번거로운 과정이 필요없어졌다.\n그냥 가생이만 돌면서 “O”를 발견하면 그래프 탐색을 시작하면 된다!"),"\n",a.createElement(n.h4,{id:"complexity-1",style:{position:"relative"}},a.createElement(n.a,{href:"#complexity-1","aria-label":"complexity 1 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"time complexity:"),"\n",a.createElement(n.li,null,"space complexity:"),"\n"),"\n",a.createElement(n.h4,{id:"code-1",style:{position:"relative"}},a.createElement(n.a,{href:"#code-1","aria-label":"code 1 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},'from collections import deque\n\nclass Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        dx, dy = [-1, 0, 1, 0], [0, 1, 0, -1]\n        N, M = len(board), len(board[0])\n        visited = [[False for _ in range(M)] for _ in range(N)]\n        \n        for i in range(N):\n            for j in range(M):\n                if visited[i][j] or board[i][j] == "X":\n                    continue\n\n                if i == 0 or i == N - 1 or j == 0 or j == M - 1:\n                    stack = [(i, j)]\n                    visited[i][j] = True\n                    board[i][j] = "T"\n                    \n                    while stack:\n                        x, y = stack.pop()\n                        \n                        for k in range(4):\n                            nx, ny = x + dx[k], y + dy[k]\n                            if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and board[nx][ny] == "O":\n                                visited[nx][ny] = True\n                                board[nx][ny] = "T"\n                                stack.append((nx, ny))\n        \n        for i in range(N):\n            for j in range(M):\n                if board[i][j] == "O":\n                    board[i][j] = "X"\n                elif board[i][j] == "T":\n                    board[i][j] = "O"\n\n')))}var i=function(e={}){const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},c=t(5670),o=t(1326),d=t(4517),s=t(698),h=t(8627),m=t(662),p=t(1873);const u=({data:e,children:n,serverData:t})=>{const{prevPost:l,nextPost:r}=e,i={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return a.createElement(s.Z,{data:e},a.createElement(c.Z,null,a.createElement(d.Z,i),a.createElement(o.Z,null,n),a.createElement(m.Z,{prev:l,next:r}),a.createElement(h.Z)))};function v(e){return a.createElement(u,e,a.createElement(i,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-algorithm-130-surrounded-regions-md-5660ee8f9fc8bbd77eeb.js.map