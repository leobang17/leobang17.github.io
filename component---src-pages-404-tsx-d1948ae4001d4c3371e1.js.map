{"version":3,"file":"component---src-pages-404-tsx-d1948ae4001d4c3371e1.js","mappings":"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","sources":["webpack://gatsby-theme/./src/components/seo.tsx","webpack://gatsby-theme/./src/components/head.tsx","webpack://gatsby-theme/./src/utils/getTitlePrefix.ts","webpack://gatsby-theme/./src/contexts/ErrorPageContext.tsx","webpack://gatsby-theme/./src/dataLayer/api/CategoryAPI.ts","webpack://gatsby-theme/./src/dataLayer/queries/MdxPageQueries.ts","webpack://gatsby-theme/./src/dataLayer/queries/MdxStaticQueries.ts","webpack://gatsby-theme/./src/dataLayer/services/CategoryQueryService.ts","webpack://gatsby-theme/./src/datastructures/category/CategoryNode.ts","webpack://gatsby-theme/./src/datastructures/category/CategoryTree.ts","webpack://gatsby-theme/./src/dataLayer/services/CategoryService.ts","webpack://gatsby-theme/./src/dataLayer/configurators/CategoryApiConfigurator.ts","webpack://gatsby-theme/./src/dataLayer/DataLayer.ts","webpack://gatsby-theme/./src/utils/pageApi/activateCurrentCatgeories.ts","webpack://gatsby-theme/./src/contexts/category/CategoryContextProvider.tsx","webpack://gatsby-theme/./src/datastructures/category/CategoryStringParser.ts","webpack://gatsby-theme/./src/datastructures/category/CategoryStrings.ts","webpack://gatsby-theme/./src/pages/404.tsx","webpack://gatsby-theme/./src/utils/slug.ts"],"sourcesContent":["import React from 'react'\n\nimport MetadataApiConfigurator from 'datalayer/configurators/MetadataApiConfigurator'\nimport { ChildrenProps } from 'types/react-types'\nimport AssetApiConfigurator from 'datalayer/configurators/AssetApiConfigurator'\n\ntype SEOProps = {\n  titlePrefix?: string\n  canonical?: string\n  keywords?: string[]\n} & Partial<ChildrenProps>\n\nconst SEO = ({ titlePrefix, canonical, keywords, children }: SEOProps) => {\n  const { title, siteUrl, description } =\n    MetadataApiConfigurator.instance.api.getBlogMetadata()\n  const faviconUrl = AssetApiConfigurator.instance.api.getFaviconUrl()\n  const keywordString = keywords?.join(',')\n  const representingTitle = `${titlePrefix} | ${title.value}`\n  const url = siteUrl.value + canonical\n  return (\n    <>\n      <title>{representingTitle}</title>\n      <base href={siteUrl} />\n      <link rel=\"canonical\" href={url} />\n      <link rel=\"icon\" href={faviconUrl} />\n      <meta name=\"description\" content={description.value} />\n      <meta name=\"keywords\" content={keywordString} />\n      <meta name=\"robots\" content=\"index, follow\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <meta httpEquiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\n\n      <meta property=\"og:type\" content=\"blog\" />\n      <meta property=\"og:locale\" content=\"ko_KR\" />\n      <meta property=\"og:title\" content={representingTitle} />\n      <meta property=\"og:description\" content={description.value} />\n      <meta property=\"og:url\" content={url} />\n      <meta property=\"og:image\" content=\"\" />\n      <meta property=\"og:site_name\" content={title.value} />\n      <meta property=\"og:image:width\" content=\"800\" />\n      <meta property=\"og:image:height\" content=\"800\" />\n      {children}\n    </>\n  )\n}\n\nexport default SEO\n","import CategoryStrings from 'datastructures/category/CategoryStrings'\nimport { HeadProps } from 'gatsby'\nimport { CategoryPageContext } from 'templates/CategoryPage'\nimport { AllMdxQuery, MdxNode } from 'types/mdx-types'\nimport getTitlePrefix from 'utils/getTitlePrefix'\nimport SEO from './seo'\n\nexport type HeadAPI<DataType = object, PageContextType = object> = (\n  props: HeadProps<DataType, PageContextType>,\n) => JSX.Element\n\nexport const ArticlePageHead: HeadAPI<{ mdx: MdxNode }> = ({\n  location: { pathname },\n  data,\n}) => {\n  const title = data.mdx.frontmatter.title\n  return <SEO titlePrefix={title} canonical={pathname}></SEO>\n}\n\nexport const CategoryPageHead: HeadAPI<AllMdxQuery, CategoryPageContext> = ({\n  location: { pathname },\n  pageContext: { categoryDirectory },\n}) => {\n  const titlePrefix = getTitlePrefix(\n    CategoryStrings.initialize(categoryDirectory),\n  )\n\n  return <SEO titlePrefix={titlePrefix} canonical={pathname}></SEO>\n}\n\nexport const NotFoundPageHead: HeadAPI = () => {\n  return <SEO titlePrefix=\"Oops, Page Not Found 😰\" />\n}\n\nexport const InternalErrorPageHead: HeadAPI = () => {\n  return <SEO titlePrefix=\"Something went wrong 😱\" />\n}\n","import CategoryStrings from 'datastructures/category/CategoryStrings'\n\nexport default function getTitlePrefix(categoryString: CategoryStrings) {\n  const categories = categoryString.categories\n  let titlePrefix: string\n  if (categories.length > 0) {\n    titlePrefix = `Category: ${categories.join(' > ')}`\n  } else {\n    titlePrefix = `All Posts`\n  }\n\n  return titlePrefix\n}\n","import React, { FC } from 'react'\nimport CategoryContextProvider, {\n  CategoryContextProviderProps,\n} from './category/CategoryContextProvider'\n\ntype ErrorPageContextProps = {} & CategoryContextProviderProps\n\nconst ErrorPageContext: FC<ErrorPageContextProps> = ({ children }) => {\n  return (\n    <>\n      <CategoryContextProvider>{children}</CategoryContextProvider>\n    </>\n  )\n}\n\nexport default ErrorPageContext\n","import CategoryService from 'dataLayer/services/CategoryService'\n\nclass CategoryAPI {\n  constructor(private categoryService: CategoryService) {}\n\n  async getCategoryTree() {\n    return await this.categoryService.getCategoryTreee()\n  }\n\n  getCategoryTreeSync() {\n    return this.categoryService.getCategoryTreeSync()\n  }\n}\n\nexport default CategoryAPI\n","import { GroupByNode } from 'types/mdx-types'\nimport { PageGraphQL } from 'types/nodeapi-types'\nimport MdxQueries from './mdxQueries'\n\ntype AllCategoryGroupbyQuery = {\n  data: {\n    allCategory: {\n      group: GroupByNode[]\n    }\n  }\n}\n\nclass MdxPageQueries implements MdxQueries {\n  constructor(private graphql: PageGraphQL) {}\n\n  async getCategoryGroupbyCategoryDirectory(): Promise<GroupByNode[]> {\n    const result = (await this.graphql(`\n        query mdxGroupBySlug {\n          allCategory(sort: { categoryDirectory: ASC }) {\n            group(field: { categoryDirectory: SELECT }) {\n              fieldValue\n              totalCount\n            }\n          }\n        }\n      `)) as AllCategoryGroupbyQuery\n\n    return result.data.allCategory.group\n  }\n}\n\nexport default MdxPageQueries\n","import { graphql, useStaticQuery } from 'gatsby'\n\nimport { GroupByNode } from 'types/mdx-types'\nimport MdxQueries from './mdxQueries'\n\nclass MdxStaticQueries implements MdxQueries {\n  constructor() {}\n\n  getCategoryGroupbyCategoryDirectory(): GroupByNode[] {\n    const data = useStaticQuery(graphql`\n      query mdxGroupBySlug {\n        allCategory(sort: { categoryDirectory: ASC }) {\n          group(field: { categoryDirectory: SELECT }) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `)\n\n    return data.allCategory.group\n  }\n}\n\nexport default MdxStaticQueries\n","import MdxQueries from '../queries/mdxQueries'\n\nclass CategoryQueryService {\n  constructor(private mdxQueries: MdxQueries) {}\n\n  async getCategories() {\n    const data = this.mdxQueries.getCategoryGroupbyCategoryDirectory()\n    return this.resolvePromise(data)\n  }\n\n  getCategoriesSync() {\n    return this.mdxQueries.getCategoryGroupbyCategoryDirectory()\n  }\n\n  private async resolvePromise<T>(data: Promise<T> | T) {\n    if (data instanceof Promise) {\n      return data\n    }\n    return data\n  }\n}\n\nexport default CategoryQueryService\n","import { categoryConfigs } from '../../configuration'\nimport CategoryStrings from './CategoryStrings'\nimport CategoryTree, { CategoryTreeObject } from './CategoryTree'\n\nexport default class CategoryNode {\n  private static readonly MAX_DEPTH = categoryConfigs.maxDepth\n  private count: number = 0\n  private activated: boolean = false\n  readonly subCategories: Map<string, CategoryNode> = new Map()\n  readonly categoryString: CategoryStrings\n\n  constructor(\n    readonly name: string,\n    readonly motherTree: CategoryTree,\n    readonly nodeDepth: number = 0,\n    readonly parent?: CategoryNode,\n  ) {\n    const categoryDirectory = this.constructCategoryDirectory()\n    this.categoryString = CategoryStrings.initialize(categoryDirectory)\n  }\n\n  add(categories: string[], count: number) {\n    this.increaseCount(count)\n    if (this.shouldExit(categories)) {\n      return\n    }\n\n    this.addSubNodeRecursively(categories, count)\n  }\n\n  activateRecursively(currentSlug: string) {\n    if (currentSlug.startsWith(this.categoryString.slug)) {\n      this._activate()\n    }\n    this.subCategories.forEach(cat => cat.activateRecursively(currentSlug))\n  }\n\n  toObject() {\n    const current: CategoryTreeObject = this.createCurrentObject()\n    this.subCategories.forEach(category => {\n      const subObject = category.toObject()\n      current.sub.push(subObject)\n    })\n\n    return current\n  }\n\n  deactivate() {\n    this.activated = false\n  }\n\n  private _activate() {\n    this.motherTree.changeActivatedNode(this)\n    this.activated = true\n  }\n\n  private createCurrentObject() {\n    return {\n      name: this.name,\n      count: this.count,\n      slug: this.categoryString.slug,\n      activated: this.activated,\n      categoryDirectory: this.categoryString.categoryDirectory,\n      nodeDepth: this.nodeDepth,\n      sub: [],\n    }\n  }\n\n  private addSubNodeRecursively(categories: string[], count: number) {\n    const name = categories.shift()!\n    this.setSubNodeIfFirst(name)\n    this.subCategories.get(name)!.add(categories, count)\n  }\n\n  private setSubNodeIfFirst(name: string) {\n    if (this.subNodeExists(name)) {\n      return\n    }\n\n    const subNode = new CategoryNode(\n      name,\n      this.motherTree,\n      this.nodeDepth + 1,\n      this,\n    )\n    this.subCategories.set(name, subNode)\n  }\n\n  private constructCategoryDirectory() {\n    if (this.parent) {\n      return this.parent.categoryString.categoryDirectory + this.name\n    }\n    return ''\n  }\n\n  private isEmpty(arr: Array<unknown>) {\n    return arr.length <= 0\n  }\n\n  private increaseCount(count: number) {\n    this.count += count\n  }\n\n  private shouldExit(categories: string[]) {\n    return this.isEmpty(categories) || !this.depthAvailable()\n  }\n\n  private depthAvailable() {\n    return this.nodeDepth < CategoryNode.MAX_DEPTH\n  }\n\n  private subNodeExists(name: string) {\n    return this.subCategories.has(name)\n  }\n}\n","import CategoryNode from './CategoryNode'\n\nexport type CategoryTreeObject = {\n  name: string\n  count: number\n  categoryDirectory: string\n  activated: boolean\n  slug: string\n  nodeDepth: number\n  sub: CategoryTreeObject[]\n}\n\nexport default class CategoryTree {\n  private static readonly ROOT_NODE_NAME = 'total'\n  private root: CategoryNode\n  private activatedNode?: CategoryNode\n\n  constructor() {\n    this.root = new CategoryNode(CategoryTree.ROOT_NODE_NAME, this)\n  }\n\n  append(categories: string[], count: number) {\n    this.root.add(categories, count)\n  }\n\n  activateCurrentCategory(currentSlug: string) {\n    this.root.activateRecursively(currentSlug)\n  }\n\n  changeActivatedNode(categoryNode: CategoryNode) {\n    if (this.activatedNode) {\n      this.activatedNode.deactivate()\n    }\n    this.activatedNode = categoryNode\n  }\n\n  toObject() {\n    return this.root.toObject()\n  }\n}\n","import CategoryTree from '../../datastructures/category/CategoryTree'\nimport { GroupByNode } from '../../@types/mdx-types'\nimport CategoryQueryService from './CategoryQueryService'\nimport CategoryStrings from '../../datastructures/category/CategoryStrings'\n\nclass CategoryService {\n  constructor(private categoryQueryService: CategoryQueryService) {}\n\n  async getCategoryTreee() {\n    const categoryNodes = await this.categoryQueryService.getCategories()\n    return this.constructCategoryTree(categoryNodes)\n  }\n\n  getCategoryTreeSync() {\n    const categoryNodes = this.categoryQueryService.getCategoriesSync()\n    if (!(categoryNodes instanceof Promise)) {\n      return this.constructCategoryTree(categoryNodes)\n    }\n    throw new Error(\"Don't Call this function with page query\")\n  }\n\n  private constructCategoryTree(categoryNodes: GroupByNode[]) {\n    const categoryTree = new CategoryTree()\n\n    categoryNodes.forEach(node => {\n      const categoryString = CategoryStrings.initialize(node.fieldValue)\n      const count = node.totalCount\n      categoryTree.append(categoryString.categories, count)\n    })\n\n    return categoryTree\n  }\n}\n\nexport default CategoryService\n","import { PageGraphQL } from '../../@types/nodeapi-types'\n\nimport CategoryAPI from '../api/CategoryAPI'\nimport MdxPageQueries from '../queries/MdxPageQueries'\nimport MdxQueries from '../queries/mdxQueries'\nimport MdxStaticQueries from '../queries/MdxStaticQueries'\nimport CategoryQueryService from '../services/CategoryQueryService'\nimport CategoryService from '../services/CategoryService'\n\nclass CategoryApiConfigurator {\n  public readonly api: CategoryAPI\n\n  public constructor(private graphql?: PageGraphQL) {\n    this.api = this._constructCategoryAPI()\n  }\n\n  private _constructCategoryAPI() {\n    const mdxQueries = this._getMdxQueries()\n    const categoryQueryService = this._getCategoryQueryService(mdxQueries)\n    const categoryService = this._getCategoryService(categoryQueryService)\n    return new CategoryAPI(categoryService)\n  }\n\n  private _getCategoryService(categoryQueryService: CategoryQueryService) {\n    return new CategoryService(categoryQueryService)\n  }\n\n  private _getCategoryQueryService(mdxQueries: MdxQueries) {\n    return new CategoryQueryService(mdxQueries)\n  }\n\n  private _getMdxQueries() {\n    if (this.graphql) {\n      return new MdxPageQueries(this.graphql)\n    }\n    return new MdxStaticQueries()\n  }\n}\n\nexport default CategoryApiConfigurator\n","import { PageGraphQL } from 'types/nodeapi-types'\n\nimport CategoryAPI from './api/CategoryAPI'\nimport CategoryApiConfigurator from './configurators/CategoryApiConfigurator'\n\nexport default class DataLayer {\n  private static _singleton: DataLayer\n  private _categoryApi: CategoryAPI\n\n  private constructor() {\n    this._categoryApi = new CategoryApiConfigurator().api\n  }\n\n  get categoryApi() {\n    return this._categoryApi\n  }\n\n  static get singleton() {\n    if (!this._singleton) {\n      this._singleton = new DataLayer()\n    }\n    return this._singleton\n  }\n\n  public configurePageGraphql(graphql: PageGraphQL): DataLayer {\n    this._categoryApi = new CategoryApiConfigurator(graphql).api\n    return this\n  }\n}\n","import { Pages, PAGE_PREFIX } from 'constants/PageConsts'\nimport CategoryTree from 'datastructures/category/CategoryTree'\n\nexport default function activateCurrentCategories(\n  tree: CategoryTree,\n  categoryDirectory?: string,\n) {\n  const currentEndpoint = getCurrentEndpointDecoded()\n\n  const page = findCurrentPageByEndpoint(currentEndpoint)\n  let currentSlug = getCurrentSlug(currentEndpoint, page)\n\n  if (categoryDirectory) {\n    currentSlug = categoryDirectory\n  }\n\n  switch (page) {\n    case 'INDEX':\n      break\n    default:\n      tree.activateCurrentCategory(currentSlug)\n  }\n}\n\nfunction getCurrentEndpointDecoded() {\n  let pathname = '/'\n  if (typeof window !== 'undefined') {\n    pathname = window.location.pathname\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nfunction getCurrentSlug(currentEndpoint: string, page: Pages) {\n  const pagePrefix = PAGE_PREFIX[page]\n  return currentEndpoint.split(pagePrefix)[1]\n}\n\nfunction findCurrentPageByEndpoint(currentEndpoint: string) {\n  const pageKeys = Object.keys(PAGE_PREFIX) as Pages[]\n  const originPage = pageKeys.find(key =>\n    currentEndpoint.startsWith(PAGE_PREFIX[key]),\n  )\n  throwIfPageNotFound(originPage)\n  return originPage!\n}\n\nfunction throwIfPageNotFound(page?: Pages) {\n  if (!page) {\n    throw new Error('CategoryContext가 올바르지 않은 페이지에서 생성됨')\n  }\n}\n\nconst isBrowser = () => typeof window !== 'undefined'\n","import React, { FC } from 'react'\n\nimport DataLayer from 'datalayer/DataLayer'\nimport { ChildrenProps } from 'types/react-types'\nimport activateCurrentCategories from 'utils/pageApi/activateCurrentCatgeories'\n\nimport { CategoryContext } from './CategoryContext'\n\nexport type CategoryContextProviderProps = {\n  categoryDirectory?: string\n} & ChildrenProps\n\nconst CategoryContextProvider: FC<CategoryContextProviderProps> = ({\n  categoryDirectory,\n  children,\n}) => {\n  const api = DataLayer.singleton.categoryApi\n  const categoryTree = api.getCategoryTreeSync()\n  activateCurrentCategories(categoryTree, categoryDirectory)\n  return (\n    <CategoryContext.Provider\n      value={{\n        categoryTree,\n      }}\n    >\n      {children}\n    </CategoryContext.Provider>\n  )\n}\n\nexport default CategoryContextProvider\n","import { categoryConfigs } from '../../configuration'\nimport { slugify } from '../../utils/slug'\n\nclass CategoryStringParser {\n  private static CATEGORY_MAX_DEPTH: number = categoryConfigs.maxDepth\n  private static instance: CategoryStringParser\n  private constructor() {}\n\n  static singleton() {\n    this._setInstanceIfNotExists()\n    return this.instance\n  }\n\n  toCategoryDirectory(filePath: string) {\n    const directories = filePath.split('/')\n    this.lrStripSlashes(directories)\n    this.dropFilename(directories)\n    this.dropExeedingCategories(directories)\n    return directories.reduce((prev, curr) => {\n      return prev + curr + '/'\n    }, '/')\n  }\n\n  toCategories(categoryDirectory: string) {\n    const categories = categoryDirectory.split('/')\n    this.purifyCategories(categories)\n\n    return categories\n  }\n\n  toSlug(categories: string[]) {\n    this.purifyCategories(categories)\n\n    return categories.reduce((prev, curr) => {\n      return prev + slugify(curr) + '/'\n    }, '/')\n  }\n\n  refineCategoryDirectory(categoryDirectory: string) {\n    if (categoryDirectory[categoryDirectory.length - 1] !== '/') {\n      return categoryDirectory + '/'\n    }\n    return categoryDirectory\n  }\n\n  private purifyCategories(categories: string[]) {\n    this.lrStripSlashes(categories)\n    this.dropExeedingCategories(categories)\n  }\n\n  private dropExeedingCategories(splited: string[]) {\n    while (splited.length > CategoryStringParser.CATEGORY_MAX_DEPTH) {\n      splited.pop()\n    }\n  }\n\n  private dropFilename(splited: string[]) {\n    splited.pop()\n  }\n\n  private lrStripSlashes(splited: string[]) {\n    this.stripLeadingSlash(splited)\n    this.stripTrailingSlash(splited)\n  }\n\n  private stripLeadingSlash(splited: string[]) {\n    if (this.hasLeadingSlash(splited)) {\n      splited.shift()\n    }\n  }\n\n  private stripTrailingSlash(splited: string[]) {\n    if (this.hasTrailingSlash(splited)) {\n      splited.pop()\n    }\n  }\n\n  private hasLeadingSlash(splited: string[]) {\n    return splited[0] === ''\n  }\n\n  private hasTrailingSlash(splited: string[]) {\n    const lastIndex = splited.length - 1\n    return splited[lastIndex] === ''\n  }\n\n  private static _setInstanceIfNotExists() {\n    if (!this.instance) {\n      this.instance = new CategoryStringParser()\n    }\n  }\n}\n\nexport default CategoryStringParser\n","import CategoryStringParser from './CategoryStringParser'\n\ntype CallerType = 'FilePath' | 'CategoryDirectory'\n\nclass CategoryStrings {\n  public readonly categoryDirectory: string\n  public readonly categories: string[]\n  public readonly slug: string\n  private readonly parser: CategoryStringParser =\n    CategoryStringParser.singleton()\n\n  public static initialize(directory: string) {\n    return new CategoryStrings(directory, 'CategoryDirectory')\n  }\n\n  public static initializeWithFilePath(directory: string) {\n    return new CategoryStrings(directory, 'FilePath')\n  }\n\n  public isParentOf(categoryString: CategoryStrings) {\n    return categoryString.categoryDirectory.startsWith(this.categoryDirectory)\n  }\n\n  private constructor(directory: string, caller: CallerType) {\n    switch (caller) {\n      case 'FilePath':\n        this.categoryDirectory = this.parser.toCategoryDirectory(directory)\n        break\n      case 'CategoryDirectory':\n        this.categoryDirectory = this.parser.refineCategoryDirectory(directory)\n    }\n    this.categories = this.parser.toCategories(directory)\n    this.slug = this.parser.toSlug(this.categories)\n  }\n}\n\nexport default CategoryStrings\n","/** @jsx jsx */\n\nimport { FC } from 'react'\nimport Layout from 'components/Layout'\nimport { jsx, css } from '@emotion/react'\nimport 'styles/404.css'\nimport { GRAY } from 'styles/Color'\nimport { s_mq } from 'styles/facepaint'\nimport ErrorPageContext from 'contexts/ErrorPageContext'\nimport { themeConfigs } from '../configuration'\n\nconst titleStyle = css(\n  s_mq({\n    fontSize: ['1.5rem', '2rem'],\n  }),\n)\n\nconst descriptionStyle = css(\n  s_mq({\n    fontSize: ['0.8rem', '0.9rem'],\n  }),\n)\n\nconst NotFoundPage: FC = () => (\n  <ErrorPageContext>\n    <Layout>\n      <figure className=\"not-found-figure\">\n        <img\n          className=\"not-found-image\"\n          src={`/404-illustrate.svg`}\n          alt=\"404 Not Found Page Image\"\n        />\n        <figcaption\n          id=\"title-caption\"\n          css={titleStyle}\n          style={{\n            color: themeConfigs.light.sub,\n          }}\n        >\n          404: PAGE NOT FOUND\n        </figcaption>\n        <figcaption\n          id=\"description-caption\"\n          css={descriptionStyle}\n          style={{\n            color: GRAY,\n          }}\n        >\n          찾고 있는 페이지가 존재하지 않네요 😢\n        </figcaption>\n      </figure>\n    </Layout>\n  </ErrorPageContext>\n)\n\nexport default NotFoundPage\n\nexport { NotFoundPageHead as Head } from 'components/head'\n","export function slugify(value: string) {\n  let slug = trimSpaces(value)\n  slug = convertConnectiveCharToHyphen(slug)\n  slug = camelToHyphenedSnake(slug)\n  slug = removeUrlUnsafeChars(slug)\n  slug = condensConsecutiveHyphens(slug)\n  return slug\n}\n\nfunction trimSpaces(slug: string) {\n  return slug.trimStart().trimEnd()\n}\n\nfunction convertConnectiveCharToHyphen(slug: string) {\n  return slug.replace(/[\\s_:;]+/g, '-')\n}\n\nfunction camelToHyphenedSnake(slug: string) {\n  return slug\n    .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n    .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\n    .replace(/[-\\s]+/g, '-')\n    .toLowerCase()\n}\n\nfunction removeUrlUnsafeChars(slug: string) {\n  return slug.replace(/[.,!?:;\"'`^*(){}]/g, '')\n}\n\nfunction condensConsecutiveHyphens(slug: string) {\n  return slug.replace(/-+/g, '-')\n}\n"],"names":["_ref","titlePrefix","canonical","keywords","children","title","siteUrl","description","MetadataApiConfigurator","faviconUrl","AssetApiConfigurator","keywordString","join","representingTitle","value","url","___EmotionJSX","href","rel","name","content","httpEquiv","property","ArticlePageHead","location","pathname","data","mdx","frontmatter","SEO","CategoryPageHead","_ref2","pageContext","categoryDirectory","categoryString","categories","length","getTitlePrefix","CategoryStrings","NotFoundPageHead","InternalErrorPageHead","CategoryContextProvider","categoryService","getCategoryTree","async","this","getCategoryTreee","getCategoryTreeSync","graphql","getCategoryGroupbyCategoryDirectory","allCategory","group","useStaticQuery","mdxQueries","getCategories","resolvePromise","getCategoriesSync","CategoryNode","motherTree","nodeDepth","parent","count","activated","subCategories","Map","constructCategoryDirectory","add","increaseCount","shouldExit","addSubNodeRecursively","activateRecursively","currentSlug","startsWith","slug","_activate","forEach","cat","toObject","current","createCurrentObject","category","subObject","sub","push","deactivate","changeActivatedNode","shift","setSubNodeIfFirst","get","subNodeExists","subNode","set","isEmpty","arr","depthAvailable","MAX_DEPTH","has","categoryConfigs","CategoryTree","root","ROOT_NODE_NAME","append","activateCurrentCategory","categoryNode","activatedNode","categoryQueryService","categoryNodes","constructCategoryTree","Promise","Error","categoryTree","node","fieldValue","totalCount","api","_constructCategoryAPI","_getMdxQueries","_getCategoryQueryService","_getCategoryService","CategoryAPI","CategoryService","CategoryQueryService","MdxPageQueries","MdxStaticQueries","DataLayer","_categoryApi","CategoryApiConfigurator","configurePageGraphql","_singleton","activateCurrentCategories","tree","currentEndpoint","window","decodeURIComponent","getCurrentEndpointDecoded","page","originPage","Object","keys","PAGE_PREFIX","find","key","throwIfPageNotFound","findCurrentPageByEndpoint","pagePrefix","split","getCurrentSlug","singleton","categoryApi","CategoryContext","CategoryStringParser","_setInstanceIfNotExists","instance","toCategoryDirectory","filePath","directories","lrStripSlashes","dropFilename","dropExeedingCategories","reduce","prev","curr","toCategories","purifyCategories","toSlug","slugify","refineCategoryDirectory","splited","CATEGORY_MAX_DEPTH","pop","stripLeadingSlash","stripTrailingSlash","hasLeadingSlash","hasTrailingSlash","directory","caller","parser","initialize","initializeWithFilePath","isParentOf","titleStyle","css","s_mq","fontSize","descriptionStyle","jsx","ErrorPageContext","Layout","className","src","alt","id","style","color","themeConfigs","GRAY","trimStart","trimEnd","trimSpaces","replace","convertConnectiveCharToHyphen","toLowerCase","camelToHyphenedSnake","removeUrlUnsafeChars","condensConsecutiveHyphens"],"sourceRoot":""}