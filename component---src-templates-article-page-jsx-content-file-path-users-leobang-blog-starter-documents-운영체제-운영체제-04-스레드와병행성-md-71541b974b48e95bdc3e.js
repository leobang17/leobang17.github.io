"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[226],{3826:function(e,l,a){a.r(l),a.d(l,{Head:function(){return v.py},default:function(){return u}});var t=a(1151),n=a(7294);function r(e){const l=Object.assign({h1:"h1",a:"a",div:"div",h2:"h2",p:"p",ul:"ul",li:"li",h4:"h4",em:"em",ol:"ol",h5:"h5",strong:"strong",blockquote:"blockquote",code:"code"},(0,t.ah)(),e.components);return n.createElement(n.Fragment,null,n.createElement(l.h1,{id:"4-스레드와-병행성",style:{position:"relative"}},n.createElement(l.a,{href:"#4-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%99%80-%EB%B3%91%ED%96%89%EC%84%B1","aria-label":"4 스레드와 병행성 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4. 스레드와 병행성"),"\n",n.createElement(l.h2,{id:"41-개요",style:{position:"relative"}},n.createElement(l.a,{href:"#41-%EA%B0%9C%EC%9A%94","aria-label":"41 개요 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.1 개요"),"\n",n.createElement(l.p,null,"쓰레드는 CPU를 점유하는 가장 basic한 단위로, light weight process이다. 전통적인 프로세스는 single thread of control이었으므로 CPU core를 점유하는 단위가 프로세스였지만, 현대의 컴퓨터는 프로세스 자체가 multiple thread of control을 가질 수 있게 되면서 CPU를 점유하는 단위가 쓰레드로 작아지게 되었다."),"\n",n.createElement(l.p,null,"Thread는 다음과 같이 구성된다."),"\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"쓰레드 id"),"\n",n.createElement(l.li,null,"프로그램 카운터 (PC)"),"\n",n.createElement(l.li,null,"레지스터 집합"),"\n",n.createElement(l.li,null,"스택"),"\n"),"\n",n.createElement(l.p,null,"Thread는 다음 자원들을 process 내 다른 Thread들과 공유한다."),"\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"Code (Text 섹션)"),"\n",n.createElement(l.li,null,"Data"),"\n",n.createElement(l.li,null,"열린 파일 / 신호"),"\n"),"\n",n.createElement("img",{src:"/Users/leobang/Documents/pics/멀티쓰레드.jpeg",alt:"멀티쓰레드",style:"zoom:50%;"}),"\n",n.createElement(l.h4,{id:"411-동기",style:{position:"relative"}},n.createElement(l.a,{href:"#411-%EB%8F%99%EA%B8%B0","aria-label":"411 동기 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.1.1 동기"),"\n",n.createElement(l.p,null,"전통적인 방식에서는 새로운 task를 진행해야할 때 기존의 프로세스는 그 요청을 수행할 별도의 프로세스를 생성했다. 이는 매우 보편적인 방법이었지만 프로세스 생성작업은 ",n.createElement(l.em,null,"많은 시간을 소비하고 많은 자원을 필요로 하는 일"),"이다. 특히 새 프로세스가 해야할 일이 기존의 프로세스가 하는 일과 동일하다면 이렇게 많은 오버헤드는 낭비다."),"\n",n.createElement(l.h4,{id:"412-장점",style:{position:"relative"}},n.createElement(l.a,{href:"#412-%EC%9E%A5%EC%A0%90","aria-label":"412 장점 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.1.2 장점"),"\n",n.createElement(l.p,null,"멀티 쓰레드 프로그래밍의 장점은 다음 4가지가 있다."),"\n",n.createElement(l.ol,null,"\n",n.createElement(l.li,null,"응답성 (Responsiveness)","\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"blocking일 때 다른 쓰레드가 그 일을 대신 하면 된다."),"\n"),"\n"),"\n",n.createElement(l.li,null,"자원 공유 (Resource Sharing)","\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"기존의 프로세스는 IPC 방법으로 shared memory를 쓰거나 message passing으로 data를 공유했었다."),"\n",n.createElement(l.li,null,"이는 I’P’C인 만큼 프로세스 단위의 data passing 단위였는데, 쓰레드는 자동으로 그들이 속한 프로세스의 자원들과 메모리를 공유한다."),"\n"),"\n"),"\n",n.createElement(l.li,null,"경제성 (Economy)","\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"process를 생성하려면 ‘프로세스의 메모레 레이아웃’을 하나 더 만들어 할당해야하는데 이건 비용이 개많이 듦."),"\n",n.createElement(l.li,null,"그리고 PCB를 이용해서 process를 context switching하는 것보다 Thread의 context switching이 더 가볍다."),"\n"),"\n"),"\n",n.createElement(l.li,null,"확장성 (Scalability)","\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"멀티 프로세서 아키텍처의 장점을 취하기 쉽다."),"\n"),"\n"),"\n"),"\n",n.createElement(l.h2,{id:"42-멀티-코어-프로그래밍",style:{position:"relative"}},n.createElement(l.a,{href:"#42-%EB%A9%80%ED%8B%B0-%EC%BD%94%EC%96%B4-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D","aria-label":"42 멀티 코어 프로그래밍 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.2 멀티 코어 프로그래밍"),"\n",n.createElement(l.h5,{id:"병행성-concurrency",style:{position:"relative"}},n.createElement(l.a,{href:"#%EB%B3%91%ED%96%89%EC%84%B1-concurrency","aria-label":"병행성 concurrency permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"병행성 (Concurrency)"),"\n",n.createElement(l.p,null,"하나의 CPU 코어를 schedule해서 context switching을 통해 time sharing하는 것. -> 시분할을 통해 다수의 작업이 마치 동시에 실행되는 것처럼 보이게 해주지만 ",n.createElement(l.em,null,"실제로 한 시점에 CPU를 점유하는 작업 단위 (쓰레드 혹은 프로세스)는 1개 뿐이다.")),"\n",n.createElement(l.h5,{id:"병렬성-parallelism",style:{position:"relative"}},n.createElement(l.a,{href:"#%EB%B3%91%EB%A0%AC%EC%84%B1-parallelism","aria-label":"병렬성 parallelism permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"병렬성 (Parallelism)"),"\n",n.createElement(l.p,null,"컴퓨터 기술이 발전하면서 여러 대의 CPU core가 탑재될 수 있었다. CPU가 여러 대인만큼 한 시점에 CPU를 점유하는 작업 단위가 2개 이상이 될 수있게 되었다. 이처럼 ",n.createElement(l.em,null,"한 시점에 실제로 multiple한 작업 단위가 실행되는 것을")," 병렬성 (Parallelism)이라하고, 멀티 코어 프로그래밍에서 실현될 수 있다."),"\n",n.createElement(l.h4,{id:"421-프로그래밍-도전-과제",style:{position:"relative"}},n.createElement(l.a,{href:"#421-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%8F%84%EC%A0%84-%EA%B3%BC%EC%A0%9C","aria-label":"421 프로그래밍 도전 과제 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.2.1 프로그래밍 도전 과제"),"\n",n.createElement(l.p,null,"멀티코어 시스템으로 발전하면서 애플리케이션 개발자 역시 멀티코어를 올바르게 활용할 필요성이 대두되었다. 멀티코어 시스템을 위한 programming challenge는 다음과 같다."),"\n",n.createElement(l.h5,{id:"identifying-tasks",style:{position:"relative"}},n.createElement(l.a,{href:"#identifying-tasks","aria-label":"identifying tasks permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Identifying Tasks"),"\n",n.createElement(l.p,null,"병렬(parallel)하게 처리할 수 있는 task가 뭔지 규명해 적절히 task를 배분하는 것이 프로그래머의 역할."),"\n",n.createElement(l.h5,{id:"balance",style:{position:"relative"}},n.createElement(l.a,{href:"#balance","aria-label":"balance permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Balance"),"\n",n.createElement(l.p,null,"Equal value를 가지고 Equal work을 하도록 해야한다. 쓰레드끼리 일을 잘 분배하자."),"\n",n.createElement(l.h5,{id:"data-spliting",style:{position:"relative"}},n.createElement(l.a,{href:"#data-spliting","aria-label":"data spliting permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Data Spliting"),"\n",n.createElement(l.p,null,"각 코어에서 data 역시 잘 나누어 가져야 한다."),"\n",n.createElement(l.h5,{id:"data-dependency",style:{position:"relative"}},n.createElement(l.a,{href:"#data-dependency","aria-label":"data dependency permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Data Dependency"),"\n",n.createElement(l.p,null,"task가 접근하는 데이터는 둘 이상의 task에 종속성이 없는지 검토되어야 한다. 한 태스크가 다른 태스크로부터 오는 데이터에 종속적인 경우에는 이 dependency를 잘 수용할 수 있도록 task의 수행을 동기화 해주어야 한다."),"\n",n.createElement(l.h5,{id:"testing-and-debugging",style:{position:"relative"}},n.createElement(l.a,{href:"#testing-and-debugging","aria-label":"testing and debugging permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Testing and Debugging"),"\n",n.createElement(l.p,null,"싱글 스레드는 디버깅이 하나만 브레이크 포인트를 잡으면 되니까 쉽다. 하지만 멀티 쓰레드가 들어가면 그 시스템은 디버깅하고 테스팅하는게 엄청나게 어려워질 것."),"\n",n.createElement(l.h4,{id:"422-types-of-parallelism-병렬-실행의-유형",style:{position:"relative"}},n.createElement(l.a,{href:"#422-types-of-parallelism-%EB%B3%91%EB%A0%AC-%EC%8B%A4%ED%96%89%EC%9D%98-%EC%9C%A0%ED%98%95","aria-label":"422 types of parallelism 병렬 실행의 유형 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.2.2 Types of Parallelism (병렬 실행의 유형)"),"\n",n.createElement("img",{src:"/Users/leobang/Documents/pics/parallelism_types.png",alt:"멀티쓰레드",style:"zoom:15%;"}),"\n",n.createElement(l.p,null,"Task Parallelism과 Data Paralellism은 상호 배타적이지 않으며 실제로 애플리케이션 프로그램은 이 두 전략을 혼합하여 사용할 수 있다."),"\n",n.createElement(l.h5,{id:"task-parallelism-태스크-병렬-실행",style:{position:"relative"}},n.createElement(l.a,{href:"#task-parallelism-%ED%83%9C%EC%8A%A4%ED%81%AC-%EB%B3%91%EB%A0%AC-%EC%8B%A4%ED%96%89","aria-label":"task parallelism 태스크 병렬 실행 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Task Parallelism (태스크 병렬 실행)"),"\n",n.createElement(l.p,null,"데이터가 아니라 task (thread)를 다수의 코어에 분배한다. data는 하나로 둔다."),"\n",n.createElement(l.h5,{id:"data-parallelism-데이터-병렬-실행",style:{position:"relative"}},n.createElement(l.a,{href:"#data-parallelism-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%91%EB%A0%AC-%EC%8B%A4%ED%96%89","aria-label":"data parallelism 데이터 병렬 실행 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Data Parallelism (데이터 병렬 실행)"),"\n",n.createElement(l.p,null,"동일한 데이터의 부분집합을 여러 대의 CPU core에 분배한 뒤 각 core에서 동일한 연산을 실행하는데 초점을 맞춘다."),"\n",n.createElement(l.p,null,"i.e) 크기가 N인 배열의 내용을 더하는 경우 >> 듀얼 코어에서 코어0에서 실행되는 쓰레드 A는 index 0부터 N/2 -1 까지 더하고, 코어 1에서 실행되는 쓰레드 B는 index N/2 부터 N -1 까지 더할 수 있다. 계산은 각자 코어에서 parallel하게 실행된다."),"\n",n.createElement(l.h2,{id:"43-multi-threading-models",style:{position:"relative"}},n.createElement(l.a,{href:"#43-multi-threading-models","aria-label":"43 multi threading models permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.3 Multi-threading Models"),"\n",n.createElement(l.p,null,"쓰레드에는 2개의 타입이 있다."),"\n",n.createElement(l.h5,{id:"user-쓰레드",style:{position:"relative"}},n.createElement(l.a,{href:"#user-%EC%93%B0%EB%A0%88%EB%93%9C","aria-label":"user 쓰레드 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"User 쓰레드"),"\n",n.createElement(l.p,null,"kernel 위에서 지원되며 kernel의 support 없이 user mode에서 관리된다. user space에서 생성된다."),"\n",n.createElement(l.p,null,"Java에서도 process안에서 여러 쓰레드가 돌아가는 것을 지원해준다고 했다. 근데 잘 생각해보면 Java는 운영체제가 아니다. Java는 그냥 virtual machine이고, OS위에서 JVM이 하나의 소프트웨어로 동작하는데 그 안에서 threading을 하는 것이다. 이 JVM의 thread는 control을 여러개로 concurrent 하게 실행할 수 있다뿐이지 운영체제가 갖고 있는 cpu core들을 자기 맘대로 넘나들 수는 없다. 이러한 쓰레드를 user thread라고 한다."),"\n",n.createElement(l.h5,{id:"kernel-쓰레드",style:{position:"relative"}},n.createElement(l.a,{href:"#kernel-%EC%93%B0%EB%A0%88%EB%93%9C","aria-label":"kernel 쓰레드 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Kernel 쓰레드"),"\n",n.createElement(l.p,null,"운영체제에 의해 직접 지원되고 관리된다. OS 입장에서 CPU core도 직접 제어를 한다. core에서 직접 threading할 수 있는 걸 kernel thread로 운영체제가 직접 생성해서 관리해준다. kernel space에서 생성된다."),"\n",n.createElement(l.p,null,"궁극적으로 user thread와 kernel thread는 어떠한 연관관계가 존재햐야한다. 이 연관관계에는 다음과 같이 3가지 모델이 있다."),"\n",n.createElement("img",{src:"/Users/leobang/Documents/pics/멀티스레딩모델.png",alt:"멀티쓰레드",style:"zoom:50%;"}),"\n",n.createElement(l.h4,{id:"431-다대일-모델",style:{position:"relative"}},n.createElement(l.a,{href:"#431-%EB%8B%A4%EB%8C%80%EC%9D%BC-%EB%AA%A8%EB%8D%B8","aria-label":"431 다대일 모델 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.3.1 다대일 모델"),"\n",n.createElement(l.p,null,"kernel thread 1개에 여러 개의 user thread가 붙어있는 모델. ",n.createElement(l.strong,null,"쓰레드 관리는 user space의 thread 라이브러리에 의해 행해진다.")," >> 효율적이다!"),"\n",n.createElement(l.p,null,"하지만 한 thread가 blocking 시스템 콜을 할 경우, 전체 프로세스가 block된다. 또한 한 번에 하나의 thread만 kernel에 접근할 수 있기 때문에 멀티 쓰레드가 멀티 코어 시스템에서 병렬로 실행될 수 없다. 이러한 이유로 가장 기본적인 모델이었으나 멀티 코어가 컴퓨터 시스템의 표준이 되면서 다대일 모델을 사용하는 시스템은 사라졌다."),"\n",n.createElement(l.h4,{id:"432-일대일-모델",style:{position:"relative"}},n.createElement(l.a,{href:"#432-%EC%9D%BC%EB%8C%80%EC%9D%BC-%EB%AA%A8%EB%8D%B8","aria-label":"432 일대일 모델 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.3.2 일대일 모델"),"\n",n.createElement(l.p,null,"user thread와 kernel thread가 각각 짝을 이루어 연결되어 있다. 하나의 user thread가 blocking 시스템 콜을 하더라도 다른 kernel thread가 실행될 수 있기 때문에 더 나은 parallellism을 제공한다."),"\n",n.createElement(l.p,null,"단점은 user thread를 하나 생성하려면 kernel thread도 생성되어야 하며, 많은 수의 kernel thread가 시스템 성능에 부담을 줄 수 있다는 점이다. Linux와 Windows가 일대일 모델을 구현한다."),"\n",n.createElement(l.h4,{id:"433-다대다-모델",style:{position:"relative"}},n.createElement(l.a,{href:"#433-%EB%8B%A4%EB%8C%80%EB%8B%A4-%EB%AA%A8%EB%8D%B8","aria-label":"433 다대다 모델 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.3.3 다대다 모델"),"\n",n.createElement(l.p,null,"(M > N) M개의 user thread가 N개의 kernel thread와 매핑되는 모델이다. kernel thread의 수는 컴퓨터의 성능에 따라 결정된다. (4코어 보다 8코어에서 더 많은 kernel thread를 할당받을 수 있음.) 다대다 모델은 user thread를 필요한 만큼 생성시킬 수 있으면서 blocking 시스템 콜이 호출되어도 병렬적으로 처리할 수 있다. 여러 개의 user thread가 한정된 개수의 kernel thread에 매핑되고 처리가 끝나면 반납하고를 반복한다."),"\n",n.createElement(l.p,null,"하지만 구현이 어렵고 대부분의 시스템에서 처리 코어 수가 증가함에 따라 kernel thread 수를 제한하는 것의 중요성이 줄어들었다. ",n.createElement(l.strong,null,"결과적으로 대부분의 OS는 일대일 모델을 사용한다.")),"\n",n.createElement(l.h2,{id:"44-쓰레드-라이브러리",style:{position:"relative"}},n.createElement(l.a,{href:"#44-%EC%93%B0%EB%A0%88%EB%93%9C-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC","aria-label":"44 쓰레드 라이브러리 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.4 쓰레드 라이브러리"),"\n",n.createElement(l.p,null,"많이 사용되는 쓰레드 라이브러리는 다음과 같다."),"\n",n.createElement(l.h5,{id:"pthreads",style:{position:"relative"}},n.createElement(l.a,{href:"#pthreads","aria-label":"pthreads permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Pthreads"),"\n",n.createElement(l.p,null,"POSIX가 thread 생성과 동기화를 위해 제정한 표준 API 스펙이다. 사용자 또는 커널 수준 라이브러리로서 제공될 수 있다. UNIX, Linux 및 macOS 시스템에서 통상적으로 Pthreads를 구현한 라이브러리를 사용한다. 전역변수로 선언한 데이터, 즉 함수 외부에서 선언된 데이터는 같은 프로세스에 속한 모든 thread가 공유한다."),"\n",n.createElement(l.h5,{id:"windows-threads",style:{position:"relative"}},n.createElement(l.a,{href:"#windows-threads","aria-label":"windows threads permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Windows Threads"),"\n",n.createElement(l.p,null,"Windows 시스템에서 사용가능한 커널 수준 라이브러리로 Pthread 기법과 유사하다. Pthreads와 마찬가지로 개별 스레드가 공유하는 데이터는 전역 변수로 선언된다."),"\n",n.createElement(l.h5,{id:"java-thread-api",style:{position:"relative"}},n.createElement(l.a,{href:"#java-thread-api","aria-label":"java thread api permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Java Thread API"),"\n",n.createElement(l.p,null,"Java 프로그램에서 직접 스레드 생성과 관리를 가능하게 한다. Java는 운영체제가 아니라 JVM이라는 가상 머신 소프트웨어이므로 OS 위에서 돌아간다. 따라서 JVM 쓰레드의 구현은 호스트 OS에 따라 바뀌게 되는데, Windows 시스템에서 Java 쓰레드는 Windows API를 사용하여 구현하고 UNIX, Linux, MacOS 시스템에서 Java 쓰레드는 Pthreads를 사용한다."),"\n",n.createElement(l.p,null,"Java는 전역 데이터 엑세스라는 개념이 없기 때문에 공유 데이터에 대한 접근이 thread 사이에 명시적으로 조율되어야 한다."),"\n",n.createElement(l.p,null,"Java 쓰레드 API는 JVM을 제공하는 어떤 시스템에서도 사용할 수 있으며 모든 Java 프로그램은 적어도 하나의 단일 제어 쓰레드를 포함하고 있다. Java의 가장 기본적인 실행 단위는 쓰레드이다."),"\n",n.createElement(l.h2,{id:"45-implicit-threading-암묵적-쓰레딩",style:{position:"relative"}},n.createElement(l.a,{href:"#45-implicit-threading-%EC%95%94%EB%AC%B5%EC%A0%81-%EC%93%B0%EB%A0%88%EB%94%A9","aria-label":"45 implicit threading 암묵적 쓰레딩 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.5 Implicit Threading (암묵적 쓰레딩)"),"\n",n.createElement(l.p,null,"쓰레드를 실제로 만들어 작업을 할당하는 건 꽤 골치아픈 일이다. 특히 멀티 코어 프로세서의 성장에 따라 수백 또는 수천 개의 쓰레드를 가진 어플리케이션이 등장하게 되면서 프로그래머가 4.2의 programming challenge들을 적용하여 쓰레드를 직접 관리하는 것이 번거로워졌다."),"\n",n.createElement(l.p,null,n.createElement(l.strong,null,"쓰레딩 작업을 앱개발자가 직접 하지 않고 컴파일러나 라이브러리가 알아서 해주는 것이 Implicit Threading이다.")," 개발자는 thread에 신경쓰는 대신, parallel하게 실행할 수 있는 작업을 식별해야한다. task는 일반적으로 함수로 작성되며, 런타임 라이브러리는 일반적으로 다대다 (4.3.3)모델을 사용하여 별도의 쓰레드에 매핑된다."),"\n",n.createElement(l.p,null,"다음은 Implicit Threading을 이용해 멀티 코어 프로세서를 활용하는 4가지 접근법이다."),"\n",n.createElement(l.h4,{id:"451-쓰레드-풀-thread-pool",style:{position:"relative"}},n.createElement(l.a,{href:"#451-%EC%93%B0%EB%A0%88%EB%93%9C-%ED%92%80-thread-pool","aria-label":"451 쓰레드 풀 thread pool permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.5.1 쓰레드 풀 (Thread Pool)"),"\n",n.createElement(l.p,null,"원래 웹서버의 예를 들 때 요청을 받을 때마다 그 요청을 위한 thread를 만들어 처리한다고 했었다. 물론 프로세스를 하나 만들어 할당하는 것보다는 가벼운 작업이지만, thread를 만드는데도 소요되는 시간이 있고 해당 요청만 끝나면 thread가 곧장 용도 폐기될 것이라 생각하면 매 요청마다 thread를 즉각적으로 만드는 작업은 비효율적이다."),"\n",n.createElement(l.p,null,n.createElement(l.strong,null,"쓰레드 풀의 기본 아이디어는 process를 시작할 때 아예 일정한 수의 쓰레드를 미리 pool로 만드는 것이다.")," 쓰레드들은 평소에는 하는 일 없이 일감을 기다리게 된다. 서버가 요청을 받으면 스레드를 생성하지 않고 대신 스레드 풀에 제출하고 추가 요청을 대기한다."),"\n",n.createElement(l.p,null,"앱 개발자는 new thread를 굳이 위험하게 할 필요 없다. threadpool.get()이런거로 이미 만들어져 있는 쓰레드를 가져가서 쓰다가 반납하기만 하면 된다."),"\n",n.createElement(l.p,null,"pool의 활용도를 보며 동적으로 pool의 크기를 바꾸어 줄 수도 있다. 이러한 구조는 시스템 부하가 적을 때에는 더 작은 pool을 유지함으로서 메모리 등의 소모를 줄일 수 있다."),"\n",n.createElement(l.h4,{id:"452-fork--join",style:{position:"relative"}},n.createElement(l.a,{href:"#452-fork--join","aria-label":"452 fork  join permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.5.2 Fork & Join"),"\n",n.createElement(l.p,null,"fork-join 모델은 부모가 자식 쓰레드를 fork()한 뒤 자식 쓰레드의 종료를 기다린 뒤 join() 하고 (process의 exit과 동일) 그 시점부터 자식의 결과를 확인하고 결합하는 ",n.createElement(l.em,null,"동기식 모델"),"이다. ",n.createElement(l.strong,null,"이는 원래 explicit threading이지만, implicit threading에도 이용될 수 있다.")),"\n",n.createElement(l.p,null,"implicit threading에서의 fork()단계는 thread를 직접 생성하는게 아니라, 대신 parallel 작업을 식별하는 단계이다. 라이브러리는 생성되는 thread 수를 관리하여 thread에 작업 배정을 책임진다."),"\n",n.createElement(l.h4,{id:"453-openmp",style:{position:"relative"}},n.createElement(l.a,{href:"#453-openmp","aria-label":"453 openmp permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.5.3 OpenMP"),"\n",n.createElement(l.p,null,"OpenMP는 compilier 지시어를 전달해서 아주 쉽게 C, C++에서 병렬처리할 수 있도록 지원하는 라이브러리이다. parallel하게 실행하고자 하는 code block을 찾아 parallel region으로 식별해주기만 하면 OpenMP가 해당 영역을 병렬적으로 실행한다."),"\n",n.createElement(l.blockquote,null,"\n",n.createElement(l.p,null,"compiler directive (컴파일러 지시어)"),"\n",n.createElement(l.p,null,"#pragma omp parallel 이런 것들을"),"\n"),"\n",n.createElement(l.h4,{id:"454-gcd-grand-central-dispatch",style:{position:"relative"}},n.createElement(l.a,{href:"#454-gcd-grand-central-dispatch","aria-label":"454 gcd grand central dispatch permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.5.4 GCD (Grand Central Dispatch)"),"\n",n.createElement(l.p,null,"macOS 및 iOS 운영체제를 위해 애플에서 개발한 기술. 개발자가 parallel하게 실행될 코드 섹션 (task)를 식별할 수 있도록 하는 런타임 라이브러리, API 및 언어 확장의 조합이다."),"\n",n.createElement(l.h2,{id:"46-threading-issues-스레드와-관련된-문제들",style:{position:"relative"}},n.createElement(l.a,{href:"#46-threading-issues-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%99%80-%EA%B4%80%EB%A0%A8%EB%90%9C-%EB%AC%B8%EC%A0%9C%EB%93%A4","aria-label":"46 threading issues 스레드와 관련된 문제들 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.6 Threading Issues (스레드와 관련된 문제들)"),"\n",n.createElement(l.p,null,"이 절에서는 멀티 스레드 프로그램을 설계할 때 고려해야할 몇 가지 문제들을 논의한다."),"\n",n.createElement(l.h4,{id:"461-fork-및-exec-시스템-콜",style:{position:"relative"}},n.createElement(l.a,{href:"#461-fork-%EB%B0%8F-exec-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C","aria-label":"461 fork 및 exec 시스템 콜 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.6.1 fork() 및 exec() 시스템 콜"),"\n",n.createElement(l.p,null,n.createElement(l.code,null,"fork()")," 시스템 콜은 원래 별도의 복제된 프로세스를 생성하는데 쓰였다. 만일 한 process의 thread가 ",n.createElement(l.code,null,"fork()"),"를 호출한다면? 몇몇 UNIX 기종은 두 가지 버전의 ",n.createElement(l.code,null,"fork()"),"를 제공한다."),"\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"모든 thread를 복제한 새로운 process를 만든다."),"\n",n.createElement(l.li,null,n.createElement(l.code,null,"fork()"),"를 호출한 thread만 복제한 새로운 process를 만든다."),"\n"),"\n",n.createElement(l.p,null,n.createElement(l.code,null,"exec()")," 시스템 콜은 전과 동일한 기능을 제공한다. 어떤 process의 thread가 ",n.createElement(l.code,null,"exec()")," 시스템 콜을 호출하면 ",n.createElement(l.code,null,"exec()")," 의 parameter로 지정된 프로그램이 모든 thread를 포함한 전체 process를 대체한다."),"\n",n.createElement(l.h4,{id:"462-signal-handling-신호-처리",style:{position:"relative"}},n.createElement(l.a,{href:"#462-signal-handling-%EC%8B%A0%ED%98%B8-%EC%B2%98%EB%A6%AC","aria-label":"462 signal handling 신호 처리 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.6.2 Signal Handling (신호 처리)"),"\n",n.createElement(l.p,null,"signal(신호)는 process에 어떤 사건이 일어났음을 알려준다. 불법 메모리 접근, 0으로 나누기 (zero division error)등이 있다."),"\n",n.createElement(l.h4,{id:"463-thread-cancellation",style:{position:"relative"}},n.createElement(l.a,{href:"#463-thread-cancellation","aria-label":"463 thread cancellation permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.6.3 Thread Cancellation"),"\n",n.createElement(l.p,null,"다음과 같은 두 가지 방식으로 Thread가 끝나기 전에 ",n.createElement(l.em,null,"강제로 종료"),"시킬 수 있다."),"\n",n.createElement(l.p,null,n.createElement(l.strong,null,"비동기식 취소")),"\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"쓰레드를 즉시 강제 종료시킨다."),"\n",n.createElement(l.li,null,"시스템 자원을 회수하지 못할 수도 있다."),"\n"),"\n",n.createElement(l.h5,{id:"지연-취소",style:{position:"relative"}},n.createElement(l.a,{href:"#%EC%A7%80%EC%97%B0-%EC%B7%A8%EC%86%8C","aria-label":"지연 취소 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"지연 취소"),"\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"쓰레드가 종료되기 전에 자원 상태를 점검한다."),"\n"),"\n",n.createElement(l.h4,{id:"464-thread-local-storage",style:{position:"relative"}},n.createElement(l.a,{href:"#464-thread-local-storage","aria-label":"464 thread local storage permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.6.4 Thread-Local Storage"),"\n",n.createElement(l.p,null,"한 process에 속한 thread들은 process의 Data section을 공유한다. 하지만 각 thread가 자신만의 Data section을 가져야 할 필요도 있다. 이들이 저장되는 공간을 TLS (Thread-Local Storage)라고 부른다."),"\n",n.createElement(l.h4,{id:"465-scheduler-activation",style:{position:"relative"}},n.createElement(l.a,{href:"#465-scheduler-activation","aria-label":"465 scheduler activation permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.6.5 Scheduler Activation"),"\n",n.createElement(l.p,null,"다대다 모델 및 두 수준 모델 (다대다에 일부는 일대일을 도입한 것)에는 user thread와 kernel thread간의 통신 문제가 있다. 이를 해결하기 위한 한 방법은 경량 프로세스 (LWP - Light Weight Process)를 사용하는 것이다."),"\n",n.createElement("img",{src:"/Users/leobang/Documents/pics/LWP.png",alt:"멀티쓰레드",style:"zoom:70%;"}),"\n",n.createElement(l.p,null,"LWP는 하나의 kernel thread에 부속되어있으며 user thread와도 연결되어있다. kernel은 application에게 특정 이벤트에 대해 알려줘야하는데, 이 procedure를 ",n.createElement(l.strong,null,"upcall"),"이라고 한다."),"\n",n.createElement(l.h2,{id:"47-운영체제-사례",style:{position:"relative"}},n.createElement(l.a,{href:"#47-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%82%AC%EB%A1%80","aria-label":"47 운영체제 사례 permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.7 운영체제 사례"),"\n",n.createElement(l.h4,{id:"471-windows-threads",style:{position:"relative"}},n.createElement(l.a,{href:"#471-windows-threads","aria-label":"471 windows threads permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"4.7.1 Windows Threads"),"\n",n.createElement(l.p,null,"Windows의 application은 process 형태로 실행되며, 이들 각 process는 한 개 이상의 thread를 가질 수있다. Windows는 일대일 모델을 사용하기에 user thread 하나마다 kernel thread 하나가 붙는다."),"\n",n.createElement(l.p,null,"thread의 일반적인 구성요소는 다음과 같다."),"\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"각 thread를 식별하는 thread ID"),"\n",n.createElement(l.li,null,"processor의 상태를 나타내는 register set"),"\n",n.createElement(l.li,null,"PC (프로그램 카운터)"),"\n",n.createElement(l.li,null,"Stack","\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"user mode에서 실행될 때 필요한 user stack"),"\n",n.createElement(l.li,null,"kernel mode에서 실행될 때 필요한 kernel stack"),"\n"),"\n"),"\n",n.createElement(l.li,null,"개별 데이터 저장 영역"),"\n"),"\n",n.createElement(l.p,null,"Register Set, Stack, 개별 데이터 저장 영역은 thread의 ",n.createElement(l.strong,null,"Context"),"라 불린다."),"\n",n.createElement(l.h2,{id:"q",style:{position:"relative"}},n.createElement(l.a,{href:"#q","aria-label":"q permalink",className:"header-links before"},n.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Q."),"\n",n.createElement(l.p,null,"쓰레드의 id는 어떻게 아는지? 보통 pid로 나오는데"),"\n",n.createElement(l.p,null,"쓰레드의 context switching은 어떻게 하는지"),"\n",n.createElement(l.ul,null,"\n",n.createElement(l.li,null,"TCB (Thread Control Block)이 존재한다 ㅋ"),"\n"),"\n",n.createElement(l.p,null,"task parallelism vs data parallelism"),"\n",n.createElement(l.p,null,"user thread, kernel thread"),"\n",n.createElement(l.p,null,"어쨌든 thread도 process의 단위인데, 그럼 thread가 가장 basic한 cpu 점유 단위라는 것은 ? ?"),"\n",n.createElement(l.p,null,"process = program in execution = 메인 메모리 RAM에 올라가 있는 프로그램."),"\n",n.createElement(l.p,null,"PCB로 프로그램 정보가 있다. 그 안에서 process가 원래는 single thread 였다가 해당 thread에서 계속 다른 자식 thread를 만드는 건가?"))}var i=function(e={}){const{wrapper:l}=Object.assign({},(0,t.ah)(),e.components);return l?n.createElement(l,e,n.createElement(r,e)):r(e)},c=a(5670),h=a(1326),s=a(4517),d=a(698),o=a(8627),m=a(662),v=a(1873);const E=({data:e,children:l,serverData:a})=>{const{prevPost:t,nextPost:r}=e,i={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return n.createElement(d.Z,{data:e},n.createElement(c.Z,null,n.createElement(s.Z,i),n.createElement(h.Z,null,l),n.createElement(m.Z,{prev:t,next:r}),n.createElement(o.Z)))};function u(e){return n.createElement(E,e,n.createElement(i,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-운영체제-운영체제-04-스레드와병행성-md-71541b974b48e95bdc3e.js.map