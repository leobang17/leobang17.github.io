"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[3513],{4742:function(e,n,t){t.r(n),t.d(n,{Head:function(){return d.py},default:function(){return E}});var l=t(1151),a=t(7294);function r(e){const n=Object.assign({h2:"h2",a:"a",div:"div",p:"p",code:"code",h4:"h4",ul:"ul",li:"li",pre:"pre"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h2,{id:"문제",style:{position:"relative"}},a.createElement(n.a,{href:"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"문제"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://leetcode.com/problems/3sum/description/?envType=study-plan-v2&envId=top-interview-150",target:"_self",rel:"nofollow"},"15. 3Sum")),"\n",a.createElement(n.p,null,"정수 배열 ",a.createElement(n.code,null,"nums"),"가 주어진다. ",a.createElement(n.code,null,"nums[i]")," + ",a.createElement(n.code,null,"nums[j]")," + ",a.createElement(n.code,null,"nums[k]")," = 0을 만족하는 ",a.createElement(n.code,null,"i"),", ",a.createElement(n.code,null,"j"),", ",a.createElement(n.code,null,"k"),"를 찾고자 한다. 단, ",a.createElement(n.code,null,"i")," != ",a.createElement(n.code,null,"j"),", ",a.createElement(n.code,null,"i")," != ",a.createElement(n.code,null,"k"),", and ",a.createElement(n.code,null,"j")," != ",a.createElement(n.code,null,"k"),"을 만족해야한다.\n",a.createElement(n.code,null,"nums"),"의 원소 3개를 합했을 때 0이 나오는 세 원소를 구하고자 한다. 중복된 index를 2번 이상 사용할 수는 없다."),"\n",a.createElement(n.h4,{id:"constraints",style:{position:"relative"}},a.createElement(n.a,{href:"#constraints","aria-label":"constraints permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Constraints"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.code,null,"3 <= nums.length <= 3000")),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"-10^5 <= nums[i] <= 10^5")),"\n"),"\n",a.createElement(n.h2,{id:"approach---two-pointer-심화",style:{position:"relative"}},a.createElement(n.a,{href:"#approach---two-pointer-%EC%8B%AC%ED%99%94","aria-label":"approach   two pointer 심화 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Two Pointer 심화.."),"\n",a.createElement(n.p,null,"결국 1시간 안에 못풀고 ",a.createElement(n.a,{href:"https://www.youtube.com/watch?v=jzZsG8n2R9A",target:"_self",rel:"nofollow"},"NeetCode의 해설"),"을 참고했다."),"\n",a.createElement(n.p,null,"아이디어가 너무 심플해서 현타왔다…\n첫번째 pointer만 for loop으로 돌면서, 나머지 2개의 숫자는 two pointer로 찾는 접근법이다.\n물론 배열은 정렬되어있어야 한다.\n첫번째 pointer를 순회하며 미리 고정시켜놓으므로 나머지 2개의 pointer의 합이 첫번째 pointer의 절대값 (첫번째 pointer가 가리키는 숫자가 음수일 경우)동일한지 체크하며 포인터를 옮겨가는 방식."),"\n",a.createElement(n.p,null,"중복을 허용하지 않기 때문에 중복을 생략하는 코드만 신경써주면 되는 문제였다."),"\n",a.createElement(n.h4,{id:"complexity",style:{position:"relative"}},a.createElement(n.a,{href:"#complexity","aria-label":"complexity permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"time complexity: ",a.createElement(n.code,null,"O(N^2)")),"\n",a.createElement(n.li,null,"space complexity: ",a.createElement(n.code,null,"O(1)")),"\n"),"\n",a.createElement(n.h4,{id:"code",style:{position:"relative"}},a.createElement(n.a,{href:"#code","aria-label":"code permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        # O(NlogN)\n        nums.sort()\n        answer = []\n\n        # O(N^2)\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:  # 같은 값을 loop 했을 경우 건너뛴다.\n                continue \n            left, right = i + 1, len(nums) - 1\n            \n            if nums[i] > 0: # 첫번째 pointer가 양의 정수일 경우 무슨 일이 있어도 3sum이 0이 될 수 없으므로 끝낸다.\n                break\n            \n            # N. Two Sum solution\n            while left < right:\n                if nums[left] + nums[right] > abs(nums[i]):\n                    right -= 1\n                elif nums[left] + nums[right] < abs(nums[i]):\n                    left += 1\n                else:\n                    answer.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    while 0 < left < right and nums[left - 1] == nums[left]:\n                        left += 1\n\n        return answer\n")))}var c=function(e={}){const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},i=t(5670),o=t(1326),s=t(4517),m=t(698),u=t(8627),h=t(662),d=t(1873);const p=({data:e,children:n,serverData:t})=>{const{prevPost:l,nextPost:r}=e,c={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return a.createElement(m.Z,{data:e},a.createElement(i.Z,null,a.createElement(s.Z,c),a.createElement(o.Z,null,n),a.createElement(h.Z,{prev:l,next:r}),a.createElement(u.Z)))};function E(e){return a.createElement(p,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-algorithm-15-3-sum-md-2eb9d818cca4e03d3845.js.map