{"componentChunkName":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-go-lang-go-memory-allocation-md","path":"/posts/go의-memory-allocation-escape-analysis/","result":{"data":{"mdx":{"id":"cbbdbb89-793d-567d-8933-e0e39cfe43d7","fields":{"slug":"/go의-memory-allocation-escape-analysis","timeToRead":8,"categoryDirectory":"/GoLang/"},"frontmatter":{"title":"Go의 Memory Allocation: Escape Analysis","createdAt":"April 05, 2024"},"tableOfContents":{"items":[{"url":"#stack과-heap","title":"Stack과 Heap"},{"url":"#what-is-escape-analysis","title":"What is Escape Analysis","items":[{"items":[{"url":"#pass-by-reference-혹은-pointer를-사용하면-모두-escape하는가","title":"Pass by Reference, 혹은 pointer를 사용하면 모두 escape하는가?"}]}]},{"url":"#직접-눈으로-확인해보자","title":"직접 눈으로 확인해보자"}]}},"prevPost":{"fields":{"slug":"/go-concurrency-mutex와-semaphore"},"frontmatter":{"title":"Go - Concurrency: Mutex와 Semaphore"}},"nextPost":{"fields":{"slug":"/go-init-fucntion"},"frontmatter":{"title":"Go - init fucntion"}}},"pageContext":{"id":"cbbdbb89-793d-567d-8933-e0e39cfe43d7","prevId":"3059b0c5-bfb6-5737-bc75-2b19477b7ebc","nextId":"e8069d20-5233-5ec0-80ff-6037568d5a5e","frontmatter":{"title":"Go의 Memory Allocation: Escape Analysis","createdAt":"2024-04-05T00:00:00.000Z"}}},"staticQueryHashes":["1659129543","1890943840","2045906531","3439177365"],"slicesMap":{}}