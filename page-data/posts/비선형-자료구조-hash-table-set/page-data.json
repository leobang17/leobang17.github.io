{"componentChunkName":"component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-자료구조-비선형-자료구조-md","path":"/posts/비선형-자료구조-hash-table-set/","result":{"data":{"mdx":{"id":"f4017a3e-c160-58a4-a6fe-97bc1dfb53f3","fields":{"slug":"/비선형-자료구조-hash-table-set","timeToRead":10,"categoryDirectory":"/자료구조/"},"frontmatter":{"title":"비선형 자료구조 - Hash Table, Set","createdAt":"December 28, 2023"},"tableOfContents":{"items":[{"url":"#map","title":"Map","items":[{"items":[{"url":"#hash-table--hash-map","title":"Hash Table (= Hash Map)","items":[{"items":[{"url":"#hash-function이란","title":"Hash function이란?"},{"url":"#hash-table에서-hash-function은","title":"Hash Table에서 Hash Function은?"},{"url":"#hash-collision이란-무엇인가","title":"hash collision이란 무엇인가?"},{"url":"#hash-collision은-필연적인가","title":"hash collision은 필연적인가?"},{"url":"#hash-collision이-없게-11-대응할-수-있도록-hash-function과-hash-table을-구성한다면","title":"hash collision이 없게 1:1 대응할 수 있도록 hash function과 hash table을 구성한다면?"},{"url":"#seperate-chaining의-동작-방식에-대해-설명하라","title":"seperate chaining의 동작 방식에 대해 설명하라."},{"url":"#open-addressing은-무엇인가요","title":"open addressing은 무엇인가요?"},{"url":"#probing-방식들에는-무엇이-있을까","title":"probing 방식들에는 무엇이 있을까?"},{"url":"#open-addressing의-삭제연산에서-tombstone의-역할","title":"open addressing의 삭제연산에서 tombstone의 역할"},{"url":"#open-address와-seperate-chaining의-차이점은","title":"Open Address와 Seperate Chaining의 차이점은?"},{"url":"#hash-버킷의-동적-확장-그리고-load-factor란","title":"Hash 버킷의 동적 확장, 그리고 load factor란?"}]}]}]}]},{"url":"#set","title":"Set","items":[{"items":[{"url":"#hash-set-구현체","title":"Hash Set (구현체)","items":[{"items":[{"url":"#java에서-hash-set의-구현체-hashset","title":"Java에서 Hash Set의 구현체: HashSet"},{"url":"#hash-table을-활용했으므로-삽입-삭제-탐색의-worst-시간복잡도도-동일하다","title":"Hash Table을 활용했으므로 삽입, 삭제, 탐색의 worst 시간복잡도도 동일하다."},{"url":"#가변-객체를-set의-key로-쓰고-싶다면","title":"가변 객체를 Set의 key로 쓰고 싶다면?"}]}]}]}]}]}},"prevPost":{"fields":{"slug":"/선형-자료구조"},"frontmatter":{"title":"선형 자료구조"}},"nextPost":{"fields":{"slug":"/컴퓨터가-실수를-표현하는-방법"},"frontmatter":{"title":"컴퓨터가 실수를 표현하는 방법"}}},"pageContext":{"id":"f4017a3e-c160-58a4-a6fe-97bc1dfb53f3","prevId":"9ee2878b-5b21-5402-b7e3-a03f674234de","nextId":"82d086bc-a0d6-5ff8-b797-71716e89b06b","frontmatter":{"title":"비선형 자료구조 - Hash Table, Set","createdAt":"2023-12-28T00:00:00.000Z"}}},"staticQueryHashes":["1659129543","1890943840","2045906531","3439177365"],"slicesMap":{}}