{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-gatsby-gatsby-rendering-옵션-md-420995ddc2c46f488517.js","mappings":"mOAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,WAAY,aACZC,EAAG,IACHC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,KAAM,SACLC,EAAAA,EAAAA,MAAsBb,EAAMc,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,WAAY,KAAM,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,8GAA+G,MAAO,KAAMU,EAAAA,cAAoBd,EAAYK,GAAI,CAChTU,GAAI,iBACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBd,EAAYM,EAAG,CACpCY,KAAM,kDACN,aAAc,2BACdC,UAAW,uBACVL,EAAAA,cAAoBd,EAAYO,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,mBAAoB,KAAMP,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,4CAA6C,KAAMU,EAAAA,cAAoBd,EAAYQ,GAAI,KAAM,KAAMM,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,yCAA0C,KAAMK,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,qDAAsD,KAAMK,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,yDAA0D,MAAO,KAAMK,EAAAA,cAAoBd,EAAYK,GAAI,CAC9fU,GAAI,6BACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBd,EAAYM,EAAG,CACpCY,KAAM,8BACN,aAAc,uCACdC,UAAW,uBACVL,EAAAA,cAAoBd,EAAYO,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,gCAAiC,KAAMP,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,6FAA8F,KAAMU,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,0BAA2B,KAAMU,EAAAA,cAAoBd,EAAYU,GAAI,KAAM,KAAMI,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,mFAAoF,KAAMK,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,+DAAgE,MAAO,KAAMK,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,8DAA+D,KAAMU,EAAAA,cAAoBd,EAAYK,GAAI,CAC9rBU,GAAI,iCACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBd,EAAYM,EAAG,CACpCY,KAAM,kCACN,aAAc,2CACdC,UAAW,uBACVL,EAAAA,cAAoBd,EAAYO,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,oCAAqC,KAAMP,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,+GAAgH,KAAMU,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,8IAA+I,KAAMU,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,4CAA6CU,EAAAA,cAAoBd,EAAYW,KAAM,KAAM,gBAAiB,gGAAiG,KAAMG,EAAAA,cAAoBd,EAAYK,GAAI,CACzqBU,GAAI,4BACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBd,EAAYM,EAAG,CACpCY,KAAM,6BACN,aAAc,sCACdC,UAAW,uBACVL,EAAAA,cAAoBd,EAAYO,IAAK,CACtCa,wBAAyB,CACvBC,OAAQ,meAEP,+BAAgC,KAAMP,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,kFAAmF,KAAMU,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,kHAAmHU,EAAAA,cAAoB,IAAK,KAAM,cAAe,qBAAsB,KAAMA,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,mNAAoNU,EAAAA,cAAoBd,EAAYW,KAAM,KAAM,iBAAkB,iDAAkDG,EAAAA,cAAoBd,EAAYW,KAAM,KAAM,cAAe,4CAC7zB,CAKA,MAJA,SAAoBZ,EAAQ,CAAC,GAC3B,MAAOuB,QAASC,GAAatB,OAAOC,OAAO,CAAC,GAAGU,EAAAA,EAAAA,MAAsBb,EAAMc,YAC3E,OAAOU,EAAYT,EAAAA,cAAoBS,EAAWxB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oEC/DA,MACMyB,EAAc,EAAEC,OAAMC,WAAUC,iBACpC,MAAM,SAACC,EAAQ,SAAEC,GAAYJ,EACvBK,EAAe,IAChBL,EAAKM,IAAIC,YACZC,WAAYR,EAAKM,IAAIG,OAAOD,YAE9B,OAAOnB,EAAAA,cAAoBqB,EAAAA,EAAoB,CAC7CV,KAAMA,GACLX,EAAAA,cAAoBsB,EAAAA,EAAe,KAAMtB,EAAAA,cAAoBuB,EAAAA,EAAoBP,GAAehB,EAAAA,cAAoBwB,EAAAA,EAAiB,KAAMZ,GAAWZ,EAAAA,cAAoByB,EAAAA,EAAa,CACxLC,KAAMZ,EACNa,KAAMZ,IACJf,EAAAA,cAAoB4B,EAAAA,IAAa,EAGxB,SAASC,EAAiB5C,GACvC,OAAOe,EAAAA,cAAoBU,EAAazB,EAAOe,EAAAA,cAAoB8B,EAAqB7C,GAC1F,C","sources":["webpack://gatsby-theme-simplex/./documents/Gatsby/Gatsby-Rendering-옵션.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"SSG (Static Site Generation)이나 DSG (Deferred Static Generation)이 더 권장되지만, 특정 use case를 위해서는 SSR을 활용하도록 한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"rendering-옵션이란\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#rendering-%EC%98%B5%EC%85%98%EC%9D%B4%EB%9E%80\",\n    \"aria-label\": \"rendering 옵션이란 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Rendering 옵션이란?\"), \"\\n\", React.createElement(_components.p, null, \"유저가 마주하게될 HTML이 조립되는 시점을 정의하는 것이 렌더링 옵션.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"빌드 타임에 HTML을 생성: SSG 혹은 pre-rendering\"), \"\\n\", React.createElement(_components.li, null, \"HTTP request가 오면 HTML을 생성:  server-side rendering\"), \"\\n\", React.createElement(_components.li, null, \"브라우저에서 javascript를 읽고 HTML을 생성: client-side rendering\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"static-site-generation-ssg\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#static-site-generation-ssg\",\n    \"aria-label\": \"static site generation ssg permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Static Site Generation (SSG)\"), \"\\n\", React.createElement(_components.p, null, \"빌드 시점에 페이지를 미리 HTML, CSS, Javascript로 렌더링 해놓는 방식을 말한다. 유저가 방문하기도 전에 이미 페이지는 빌드시점에 준비되어있다.\"), \"\\n\", React.createElement(_components.p, null, \"Gatsby에서 SSG가 동작하는 방식:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Gatsby가 SSG 페이지를 대상으로 모든 asset과 HTML을 빌드 시점에 빌드 서버 (주로 로컬 머신 혹은 빌드 서비스)에서 생성한다.\"), \"\\n\", React.createElement(_components.li, null, \"정적 파일들이 CDN에 업로드되어 엔드유저에게 전달된다. (Gatsby cloud를 이용하는 경우일 듯?)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"유저 입장에서는 가장 쾌적한 환경을 제공하지만, 페이지가 늘어날수록 빌드 시간이 길어진다는 단점이 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"deferred-static-generation-dsg\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#deferred-static-generation-dsg\",\n    \"aria-label\": \"deferred static generation dsg permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Deferred Static Generation (DSG)\"), \"\\n\", React.createElement(_components.p, null, \"SSG와 컨셉은 매우 유사하다. DSG의 다른 점은 개발자들이 특정 페이지에 대해서 유저가 처음 요청하기 전까지 빌드를 지연할 수 있다. 웹사이트의 빌드타임에 대해 보다 넓은 옵션을 제공한다.\"), \"\\n\", React.createElement(_components.p, null, \"예를들어, 생성한지 오래되어 거의 아카이브 용도로 작성된 페이지가 있다고 하자. 이 페이지를 매 빌드시점에 다시 렌더링 해놓기에는 비효율적일 수 있다. 이 페이지들을 DSG 옵션으로 스킵할 수 있고, 유저들은 CDN에 저장된 캐시를 바라보게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 빌드 시점을 뒤로 미루는 것이므로 빌드 서버를 빌드 이후에도 유지(\", React.createElement(_components.code, null, \"gatsby serve\"), \" 커맨드)시켜야한다는 단점이 있다. 따라서 기본적인 Gatsby 앱과는 다른 인프라 및 백엔드 구조가 필요할 수 있다. gatsby cloud를 쓰면 다 해결해준다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"server-side-rendering-ssr\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#server-side-rendering-ssr\",\n    \"aria-label\": \"server side rendering ssr permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Server-side Rendering (SSR)\"), \"\\n\", React.createElement(_components.p, null, \"SSG와 DSG로 거의 모든 상황을 커버할 수 있지만, 그래도 특정 유즈케이스에는 HTML을 on-the-fly로 생성해야하는 경우가 있다.\"), \"\\n\", React.createElement(_components.p, null, \"SSR은 유저가 방문하는 시점에 웹페이지 콘텐츠가 런타임에서 렌더링되어 제공되는 방식이다. 페이지의 빌드 프로세스는 각 request 마다 실행된다. 콘텐츠가 런타임에서 렌더링되므로 방문자들은 항상 \", React.createElement(\"u\", null, \"가장 최신의 페이지\"), \"를 서버로부터 응답 받게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"예를들어 유저의 리뷰를 보여주는 웹사이트를 만든다고 가정하자. 모든 리뷰들이 항상 최신의 상태로 검색 엔진에 의해 색인되길 바라므로, client-side rendering은 고려할 대상이 아니다. 이 경우에 유저 리뷰를 보여주는 페이지를 SSR 방식으로 렌더링할 수 있다. 유저가 해당 페이지를 request하는 시점에 Gatsby가 page component에 정의된 \", React.createElement(_components.code, null, \"getServerData\"), \" 함수를 실행한다. Gatsby는 해당 함수의 결과를 page component의 \", React.createElement(_components.code, null, \"serverData\"), \" 프로퍼티로 전달한 후 런타임에서 페이지를 렌더링해 방문자에게 제공한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/leobang/blog-starter/documents/Gatsby/Gatsby-Rendering-옵션.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","blockquote","p","h2","a","div","ul","li","ol","code","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}