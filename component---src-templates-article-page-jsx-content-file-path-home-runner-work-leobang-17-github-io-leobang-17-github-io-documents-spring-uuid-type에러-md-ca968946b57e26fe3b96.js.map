{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-spring-uuid-type에러-md-ca968946b57e26fe3b96.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/Spring/uuid-type에러.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\",\n    h4: \"h4\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    blockquote: \"blockquote\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"what\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#what\",\n    \"aria-label\": \"what permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"What\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"java.lang.AssertionError: \\nExpecting actual not to be null\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"when\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#when\",\n    \"aria-label\": \"when permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"When\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"@Getter\\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\\n@Entity\\n@Table(name = \\\"users\\\")\\npublic class User extends BaseEntity {\\n   @Id\\n   @GeneratedValue(strategy = GenerationType.AUTO)\\n   @Column(name = \\\"user_id\\\")\\n   private UUID id;\\n\")), \"\\n\", React.createElement(_components.p, null, \"에 대해 잘 생성되는지 테스트 하고있었다.\"), \"\\n\", React.createElement(_components.p, null, \"insert 쿼리도 날아가고, JPA persistence context에도 관리가 되는 상태였다. \", React.createElement(_components.code, null, \"user.getId()\"), \"를 호출하면 올바른 uuid가 나왔었다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 해당 id로 \", React.createElement(_components.code, null, \"EntityManager.find\"), \" 메서드를 호출하면 null 값이 반환된다…\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"why\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#why\",\n    \"aria-label\": \"why permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Why\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"postgres가-매핑을-못하나-postgres가-uuid를-매핑하는-방법을-알아보자\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#postgres%EA%B0%80-%EB%A7%A4%ED%95%91%EC%9D%84-%EB%AA%BB%ED%95%98%EB%82%98-postgres%EA%B0%80-uuid%EB%A5%BC-%EB%A7%A4%ED%95%91%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\",\n    \"aria-label\": \"postgres가 매핑을 못하나 postgres가 uuid를 매핑하는 방법을 알아보자 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Postgres가 매핑을 못하나? Postgres가 uuid를 매핑하는 방법을 알아보자.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#basic-provided\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#basic-provided\")), \"\\n\", React.createElement(_components.p, null, \"Hibernate는 JDBC 명세에서 권장하는 natural 매핑을 준수하는 몇가지 built-in basic type을 제공한다. 내부적으로 Hibernate는 특정 \", React.createElement(_components.code, null, \"org.hibernate.type.Type\"), \"을 resolve하기 위해 basic type의 registry를 이용한다.\"), \"\\n\", React.createElement(_components.p, null, \"Hibernate에서 제공하는 BasicType중 PostgreSQL의 UUID 타입은 다음과 같다.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Hibernate Type  (org.hibernate.type package)\"), React.createElement(_components.th, null, \"JDBC type\"), React.createElement(_components.th, null, \"Java Type\"), React.createElement(_components.th, null, \"BasicTypeRegistry Keys (s)\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"PostgresUUIDType\"), React.createElement(_components.td, null, \"PostgreSQL UUID -> PosgreSQL JDBC 드라이버 definition으로 컴파일됨\"), React.createElement(_components.td, null, \"java.util.UUID\"), React.createElement(_components.td, null, \"pg-uuid\")))), \"\\n\", React.createElement(_components.p, null, \"그런데 type을 \", React.createElement(_components.code, null, \"PostgreSQLUUIDType\"), \"으로 주면 datasource와 dialect가 PostgreSQL로 설정되어 있는 main 앱은 ddl이 잘 실행이 되지만, postgresql을 호환하는 h2로 되어 있는 test path에서는 dialect 때문에 에러가 생긴다. 해당 타입은 H2에서 지원을 안하는 듯 …\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#_uuid_as_binary\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#_uuid_as_binary\")), \"\\n\", React.createElement(_components.p, null, \"PostgreSQL Dialect를 사용하는 경우, PostgreSQL-specific UUID Hibernate type (\", React.createElement(_components.code, null, \"PostgresUUIDType\"), \")타입이 디폴트로 UUID에 매핑된다.  \", React.createElement(_components.strong, null, \"PostgreSQL JDBC driver\"), \"가 \", React.createElement(_components.code, null, \"OTHER\"), \" 코드를 선택해 UUID 타입을 매핑한다. 사실 애초에 \", React.createElement(_components.code, null, \"PostgresUUIDType\"), \"을 명시할 필요가 없었다! 알아서 JDBC 드라이버가 매핑해주니.\"), \"\\n\", React.createElement(_components.p, null, \"실제로, PostgreSQL이 main의 ddl에서는 user_id 컬럼에 대해서 자료형을 알아서 uuid로 매핑하게 된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Hibernate: \\n    create table word (\\n       word_id bigint not null,\\n        created_at timestamp,\\n        updated_at timestamp,\\n        word varchar(255),\\n        user_id uuid,\\n        primary key (word_id)\\n    )\\n\")), \"\\n\", React.createElement(_components.p, null, \"그런데, test path에서는 UUID를 binary(255)로 매핑한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Hibernate: \\n    create table word (\\n       word_id bigint not null,\\n        created_at timestamp,\\n        updated_at timestamp,\\n        word varchar(255),\\n        user_id varchar(255),\\n        primary key (word_id)\\n    )\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"postgresql-jdbc-드라이버가-매핑을-해주니-테스트-path에-driver-설정을-해줘야-하나\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#postgresql-jdbc-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84%EA%B0%80-%EB%A7%A4%ED%95%91%EC%9D%84-%ED%95%B4%EC%A3%BC%EB%8B%88-%ED%85%8C%EC%8A%A4%ED%8A%B8-path%EC%97%90-driver-%EC%84%A4%EC%A0%95%EC%9D%84-%ED%95%B4%EC%A4%98%EC%95%BC-%ED%95%98%EB%82%98\",\n    \"aria-label\": \"postgresql jdbc 드라이버가 매핑을 해주니 테스트 path에 driver 설정을 해줘야 하나 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"PostgreSQL JDBC 드라이버가 매핑을 해주니 테스트 path에 driver 설정을 해줘야 하나?\"), \"\\n\", React.createElement(_components.p, null, \"test의 application.yml에 \", React.createElement(_components.code, null, \"spring.datasource.driver-class-name\"), \"을 org.postgresql.Driver으로 설정해주었다.\"), \"\\n\", React.createElement(_components.p, null, \"안된다. 똑같이 binary(255)로 매핑한다.\"), \"\\n\", React.createElement(_components.p, null, \"근데 생각해보니 h2에서 PostgresUUIDType을 지원안하니 당연한 걸지도…\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"h2-데이터베이스의-타입을-uuid를-저장할-수-있는-타입으로-지정하자\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#h2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98-%ED%83%80%EC%9E%85%EC%9D%84-uuid%EB%A5%BC-%EC%A0%80%EC%9E%A5%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%A7%80%EC%A0%95%ED%95%98%EC%9E%90\",\n    \"aria-label\": \"h2 데이터베이스의 타입을 uuid를 저장할 수 있는 타입으로 지정하자 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"H2 데이터베이스의 타입을 uuid를 저장할 수 있는 타입으로 지정하자.\"), \"\\n\", React.createElement(_components.p, null, \"사실 테스트에만 필요한 코드를 prod에 반영하고 싶지는 않았지만, 레퍼런스도 너무 부족했기에 이 방법도 찾아봤다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.h2database.com/html/datatypes.html#uuid_type\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"https://www.h2database.com/html/datatypes.html#uuid_type\")), \"\\n\", React.createElement(_components.p, null, \"uuid로 저장된 값은 \", React.createElement(_components.code, null, \"java.util.UUID\"), \"를 반환한다는데, 어떻게 DDL을 uuid 타입으로 지정하는지는 안나와 있다..\"), \"\\n\", React.createElement(_components.p, null, \"그래서 JPA의 column 매핑을 설정할 수 있는 \", React.createElement(_components.code, null, \"@Column\"), \" 의 속성을 이용하기로 해보았다. \", React.createElement(_components.code, null, \"columnDefinition\"), \"을 이용하면 DDL 시 생성할 column의 정보를 직접 설정할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"위 H2 문서를 보면 UUID 타입의 이름은 UUID이다. h2는 기본적으로 case-sensitive하지 않기 때문에 uuid로 주어보기로 한다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"how\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#how\",\n    \"aria-label\": \"how permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"How\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"columndefition으로-uuid임을-명시\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#columndefition%EC%9C%BC%EB%A1%9C-uuid%EC%9E%84%EC%9D%84-%EB%AA%85%EC%8B%9C\",\n    \"aria-label\": \"columndefition으로 uuid임을 명시 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"columnDefition으로 uuid임을 명시\"), \"\\n\", React.createElement(_components.p, null, \"다음과 같이 \", React.createElement(_components.code, null, \"@Column\"), \" 어노테이션의 \", React.createElement(_components.code, null, \"columnDefinition\"), \" 속성을 ‘uuid’로 주었다. (h2는 기본적으로 case-sensitive하지 않으므로)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"@Id\\n@GeneratedValue(strategy = GenerationType.AUTO)\\n@Column(name = \\\"user_id\\\", columnDefinition = \\\"uuid\\\")\\nprivate UUID id;\\n\")), \"\\n\", React.createElement(_components.p, null, \"test path에서는 DDL이 잘 생성된다! H2도 이제 uuid 타입으로 생성하란 말을 드디어 알아먹은 것 같다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"Hibernate: \\n    create table word (\\n       word_id bigint not null,\\n        created_at timestamp,\\n        updated_at timestamp,\\n        word varchar(255),\\n        user_id uuid,\\n        primary key (word_id)\\n    )\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"EntityManager.find()\"), \" 메서드 역시 정상적으로 수행된다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"근데 이럼 main의 PostgreSQL은 어떡하지? 다행히 PostgreSQL 역시 UUID 타입을 \", React.createElement(_components.code, null, \"uuid\"), \"라는 이름의 데이터 타입으로 지원한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.postgresql.org/docs/current/datatype-uuid.html\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"https://www.postgresql.org/docs/current/datatype-uuid.html\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"PortgreSQL은 UUID (RFC 4122) 타입과 그와 관련된 표준을 저장하는 데이터 타입인 \", React.createElement(_components.code, null, \"uuid\"), \"를 제공한다. 해당 identifier는 128-bit의 용량을 요구한다. 총 32개의 digit이 128-bit을 구성한다. (8 - 4 - 4 - 4 - 12)\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11  \\n\")), \"\\n\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Test 만을 위한 코드가 prod에 반영되는 격이라 굉장히 찜찜하지만 지금 진행상황이 밀려있어 이 문제는 이쯤하고 해결로 하기로 했다… 다음에 다시 찾아봐야지.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"reference\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#reference\",\n    \"aria-label\": \"reference permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Reference\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#_uuid_as_binary\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#_uuid_as_binary\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.postgresql.org/docs/current/datatype-uuid.html\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"https://www.postgresql.org/docs/current/datatype-uuid.html\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://helloworld.kurly.com/blog/jpa-uuid-sapjil/#%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%9D%BC%EB%8B%A8-%ED%95%B4%EA%B2%B0%ED%95%9C-%EB%B0%A9%EB%B2%95-binary16\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"https://helloworld.kurly.com/blog/jpa-uuid-sapjil/#문제를-일단-해결한-방법-binary16\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/Spring/uuid-type에러.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","div","pre","code","p","h4","table","thead","tr","th","tbody","td","strong","blockquote","ul","li","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","target","rel","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}