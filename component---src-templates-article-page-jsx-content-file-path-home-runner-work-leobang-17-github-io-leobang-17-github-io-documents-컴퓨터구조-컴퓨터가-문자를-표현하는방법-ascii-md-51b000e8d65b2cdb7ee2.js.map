{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-컴퓨터구조-컴퓨터가-문자를-표현하는방법-ascii-md-51b000e8d65b2cdb7ee2.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/컴퓨터구조/컴퓨터가-문자를-표현하는방법-ascii.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    h5: \"h5\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    strong: \"strong\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"컴퓨터는 문자를 binary로 어떻게 표현할까?\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"ascii-code\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#ascii-code\",\n    \"aria-label\": \"ascii code permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"ASCII Code\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"초기의-ascii-code---7bit\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%B4%88%EA%B8%B0%EC%9D%98-ascii-code---7bit\",\n    \"aria-label\": \"초기의 ascii code   7bit permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"초기의 ASCII Code - 7bit\"), \"\\n\", React.createElement(_components.p, null, \"7bit의 코드로 \", React.createElement(\"u\", null, \"128 (2^7^)개의 다른 값을 표현\"), \"할 수 있다. 이를 통해 대문자와 소문자 알파벳, 0-9까지의 숫자와 구두점 같은 값들도 7bit 청크의 binary로 인코딩할 수 있게 되었다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"7bit로 표현할 수 있는 0 ~ 2^7^ - 1 까지의 경우의 수가 ASCII 테이블에 매핑되었다.\"), \"\\n\", React.createElement(_components.li, null, \"8bit 중 1bit를 남겨놓은 이유는 나머지 1bit를 에러 검출을 위한 용도로 비워두었기 때문이다. (pairity bit)\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"extended-ascii---8bit\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#extended-ascii---8bit\",\n    \"aria-label\": \"extended ascii   8bit permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Extended ASCII - 8bit\"), \"\\n\", React.createElement(_components.p, null, \"초기의 ASCII Code의 문제는 영어를 위해서만 설계되었다는 점이었다. 이후에 8bit의 binary로 표현할 수 있는 Extended ASCII를 표준화하면서 다양한 특수문자들과 로마자를 지원하게 된다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"인코딩-오류가-나는-이유\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%82%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\",\n    \"aria-label\": \"인코딩 오류가 나는 이유 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"인코딩 오류가 나는 이유\"), \"\\n\", React.createElement(_components.p, null, \"각자 인코딩/디코딩에 사용하는  \", React.createElement(_components.code, null, \"문자 <-> binary 데이터\"), \" 테이블이 다르기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"Extended ASCII가 영어 외의 라틴어 계열을 추가적으로 지원했지만, 라틴어 계열이 아닌 어족을 사용하는 언어 역시 존재한다.\"), \"\\n\", React.createElement(_components.p, null, \"이를 위해 Extended ASCII의 여분 공간에 라틴어 대신 자국의 언어를 테이블에 할당하게 되는데···\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이렇게 되면 동일한 8bit의 binary 정보도, 어떤 ASCII Table을 이용해서 해석하느냐에 따라 이상한 값이 나올 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"예를들어, \", React.createElement(_components.code, null, \"갈\"), \" 이라는 문자가 한국어로 인코딩하는 ASCII Table에서는 \", React.createElement(_components.code, null, \"101101111\"), \"에 매핑되어있다고 치자.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"갈\"), \"을 의도로 인코딩한 8bit의 문자를 라틴어로 이루어진 ASCII Table로 해석하면? \", React.createElement(_components.code, null, \"ㄱ\"), \"이 아닌 전혀 이상한 특수 문자가 튀어나올 수 있는 것이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"아시아 국가가 컴퓨터 분야에 진입하자 문제는 더 커졌다. 한자를 사용하는 일본과 중국의 경우는 도저히 8bit 만으로 테이블을 감당할 수 없었다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.h5, {\n    id: \"한글의-사정\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%ED%95%9C%EA%B8%80%EC%9D%98-%EC%82%AC%EC%A0%95\",\n    \"aria-label\": \"한글의 사정 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"한글의 사정\"), \"\\n\", React.createElement(_components.p, null, \"한글의 사정도 비슷했다. 한글을 표현할 수 있는 표준으로는 \", React.createElement(\"u\", null, \"조합형\"), \"과 \", React.createElement(\"u\", null, \"완성형\"), \"이 있다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"조합형: 테이블에 28개의 자모만을 매핑해두고, 이를 추후에 결합하는 방식\"), \"\\n\", React.createElement(_components.li, null, \"완성형: 결합된 글자를 테이블에 매핑하는 방식\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"완성형을 사용하려면 당시 8836가지의 한글 문자만 표현 가능했지만 자모로 이루어진 한 글자의 전체 경우의 수는 \", React.createElement(\"u\", null, \"160만\"), \"에 육박한다···\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"unicode의-등장-91년\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#unicode%EC%9D%98-%EB%93%B1%EC%9E%A5-91%EB%85%84\",\n    \"aria-label\": \"unicode의 등장 91년 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Unicode의 등장 (91년)\"), \"\\n\", React.createElement(_components.p, null, \"이러한 인코딩 문제 때문에 각각의 국가적인 제도를 없애고 \", React.createElement(_components.strong, null, \"하나의 보편적인 인코딩 표준\"), \"에 대한 요구가 등장한다. 이에 따라 4Byte의 넉넉한 공간에 세상의 모든 문자를 할당한 표준을 만들었는데, 이 것이 \", React.createElement(_components.strong, null, \"Unicode\"), \"이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"4Byte는 32bit로, 2^32^가지 경우의 수를 나타낼 수 있다. 약 42억자를 담을 수 있는 셈.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Unicode를 통해 하나의 표준으로 전세계의 모든 언어와 추가된 수학적인 기호, 그리고 심지어 이모지들까지 지원하게 된다. 이렇게 넣어도 아직 공실률이 60%가 넘는다고 하니, 더 큰 단위의 문자 표현 방식은 미뤄두어도 되겠다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"참고로 유니코드의 스페이스를 가장 많이 점령하고 있는 문자 1위는 한자이며, 2위가 한글이다. 조합형으로 활용하기 때문.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"가장 일반적인 버전은 \", React.createElement(\"u\", null, React.createElement(_components.strong, null, \"16bit\"), \"의 binary 청크\"), \"를 활용한다. \", React.createElement(_components.em, null, \"2^16^가지, 즉 65536가지의 경우의 수를 표현\"), \"할 수 있다\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"16진수 2개를 이어붙인 것으로 표현한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"한자의 총 자수 가 8만여자이니, 아쉽긴 하지만 안쓰는 한자를 빼자면 이 정도면 충분하다고 판단했나보다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"그냥 모든 문자를 다 표현하자!는 의미로 32bit만을 이용하는게 UTF-32.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"utf-unicode-transformation-format\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#utf-unicode-transformation-format\",\n    \"aria-label\": \"utf unicode transformation format permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"UTF (Unicode Transformation Format)\"), \"\\n\", React.createElement(_components.p, null, \"UTF는 유니코드를 실제로 저장하고 전송하기 위한 여러 인코딩 방식 중의 하나이다. UTF는 유니코드의 코드 포인트를 byte로 변환하는 규칙을 정의한다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.h5, {\n    id: \"unicode와-utf의-차이\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#unicode%EC%99%80-utf%EC%9D%98-%EC%B0%A8%EC%9D%B4\",\n    \"aria-label\": \"unicode와 utf의 차이 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Unicode와 UTF의 차이\"), \"\\n\", React.createElement(_components.p, null, \"Unicode는 문자 집합(Character Set)을 정의하는 \", React.createElement(\"u\", null, \"국제 표준\"), \"이다. 이는 전 세계의 모든 문자에 고유한 코드 포인트(숫자)를 할당하여 텍스트를 표현한다. UTF는 \", React.createElement(\"u\", null, \"unicode를 컴퓨터에서 어떻게 표현할지를 나타내는 인코딩 방식\"), \"이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"현재 웹은 거의 표준처럼 UTF-8으로 대동단결하게 되었다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"utf-8\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#utf-8\",\n    \"aria-label\": \"utf 8 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"UTF-8\"), \"\\n\", React.createElement(_components.p, null, \"가장 널리 이용되는 \", React.createElement(\"u\", null, \"가변길이\"), \" Unicode 인코딩 방식이다. 유니코드라고 하면 십중팔구 UTF-8이라고 생각해도 좋을 정도로 현재 웹에서 표준과 가까이 쓰이는 호환성이 좋은 인코딩 방식. 가변길이 인코딩 방식인 이유는, 문자에 따라 표현하는 byte 길이가 다르기 때문이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"ASCII 대역으로 표현할 수 있는 문자는 1byte로 표현한다. (영문자 + 숫자 + 기타 특수기호)\"), \"\\n\", React.createElement(_components.li, null, \"그 외 다양한 언어의 문자는 2byte 이상으로 표현한다. 가장 크게는 4byte를 모두 이용해 표현한다.\"), \"\\n\", React.createElement(_components.li, null, \"한글은 3 byte를 할애하는 구간이다. \", React.createElement(_components.code, null, \"감\"), \" 한글자를 위해 16진수 6개가 들어가는 것.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"그래서 \", React.createElement(\"u\", null, \"한글로 작성된 파일의 경우 파일 크기가 최대 1.5배\"), \"로 늘어나게 된다.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"utf-16\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#utf-16\",\n    \"aria-label\": \"utf 16 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"UTF-16\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"u\", null, \"고정길이\"), \" 인코딩 방식으로 유니코드의 대부분 종류의 문자를 2byte (16bit)로 표현한다. 일부는 4byte로 표현하기도 한다. 2 byte면 16진수가 4개이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"BMP(Basic Multilingual Plane)에 속하는 문자들은 2바이트로 표현되고, SMP(Supplementary Multilingual Plane)에 속하는 일부 문자들은 4바이트로 표현된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"1111 1111 1111 1111\"), \"\\n\", React.createElement(_components.p, null, \"Big-Endian: 사람이 읽는 순서와 유사하게 가장 큰 단위 (좌측에서 우측)부터 나열한다.\"), \"\\n\", React.createElement(_components.p, null, \"Litttle-Endian: 바이트를 역순으로 나열하는 방식. 우측에서부터 좌측으로 나열한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"utf-32\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#utf-32\",\n    \"aria-label\": \"utf 32 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"UTF-32\"), \"\\n\", React.createElement(_components.p, null, \"32bit (4byte)로 고정된 길이의 문자 인코딩 방식이다. 모든 문자를 4byte로 표현한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/컴퓨터구조/컴퓨터가-문자를-표현하는방법-ascii.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","blockquote","p","h2","a","div","h5","ul","li","code","strong","em","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}