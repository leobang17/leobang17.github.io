"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[654],{7225:function(e,t,l){l.r(t),l.d(t,{Head:function(){return u.py},default:function(){return E}});var n=l(1151),a=l(7294);function r(e){const t=Object.assign({h2:"h2",a:"a",div:"div",p:"p",code:"code",h4:"h4",ul:"ul",li:"li",pre:"pre"},(0,n.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h2,{id:"문제",style:{position:"relative"}},a.createElement(t.a,{href:"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"문제"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://leetcode.com/problems/container-with-most-water/description/?envType=study-plan-v2&envId=top-interview-150",target:"_self",rel:"nofollow"},"11. Container With Most Water")),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"n"),"인 정수 배열 ",a.createElement(t.code,null,"height"),"가 주어진다. ",a.createElement(t.code,null,"height")," 배열은 ",a.createElement(t.code,null,"n"),"개의 수직 직선의 길이 (높이) 값을 담고 있다. ",a.createElement(t.code,null,"i"),"번째 직선의 높이는 ",a.createElement(t.code,null,"height[i]"),"이다."),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"n"),"개의 직선 중 2개의 수직 직선을 선택해 물을 담으려고 한다. 담을 수 있는 물 양의 최대 값을 구하라."),"\n",a.createElement(t.h4,{id:"constraints",style:{position:"relative"}},a.createElement(t.a,{href:"#constraints","aria-label":"constraints permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Constraints"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.code,null,"n == height.length")),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"2 <= n <= 10^5")),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"0 <= height[i] <= 10^4")),"\n"),"\n",a.createElement(t.h2,{id:"approach---two-pointer",style:{position:"relative"}},a.createElement(t.a,{href:"#approach---two-pointer","aria-label":"approach   two pointer permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Two Pointer"),"\n",a.createElement(t.p,null,"N = 100,000이므로 많아도 ",a.createElement(t.code,null,"O(NlogN)")," 시간복잡도 안에 끝내야 한다."),"\n",a.createElement(t.p,null,"배열의 양 끝을 가리키는 포인터를 2개 할당한다. 해당 포인터를 좁혀가며 최대값을 찾는다."),"\n",a.createElement(t.p,null,"포인터를 좁히는 알고리즘은 다음과 같다."),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"왼쪽 직선과 오른쪽 직선 중 더 작은 값을 가지는 쪽을 안쪽으로 옮긴다.","\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"포인터를 양 끝에서 출발시켰으므로, 어차피 갈수록 넓이는 줄어든다."),"\n",a.createElement(t.li,null,"그러면 최대값을 갱신하기 위해서는 높이를 늘리는 방법 밖에 없는데, 어차피 물을 담을 수 있는 높이는 두 직선 중 작은 쪽의 높이에 의해 결정된다."),"\n",a.createElement(t.li,null,"따라서 어떻게든 높이를 늘리려면 더 짧은 쪽을 길게 만들어주는 직선을 찾아야하므로, 더 짧은 쪽의 포인터를 안쪽으로 옮긴다."),"\n"),"\n"),"\n"),"\n",a.createElement(t.h4,{id:"complexity",style:{position:"relative"}},a.createElement(t.a,{href:"#complexity","aria-label":"complexity permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"time complexity: ",a.createElement(t.code,null,"O(N)")),"\n",a.createElement(t.li,null,"space complexity: ",a.createElement(t.code,null,"O(1)")),"\n"),"\n",a.createElement(t.h4,{id:"code",style:{position:"relative"}},a.createElement(t.a,{href:"#code","aria-label":"code permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-python"},"class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        left, right = 0, len(height) - 1\n        maxArea = 0 \n\n        while left < right:\n            maxArea = max(min(height[left], height[right]) * (right - left) , maxArea)\n            \n            if height[left] <= height[right]: \n                left += 1\n            else:\n                right -= 1\n        \n        return maxArea\n")))}var c=function(e={}){const{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?a.createElement(t,e,a.createElement(r,e)):r(e)},i=l(5670),h=l(1326),o=l(4517),m=l(698),s=l(8627),d=l(662),u=l(1873);const p=({data:e,children:t,serverData:l})=>{const{prevPost:n,nextPost:r}=e,c={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return a.createElement(m.Z,{data:e},a.createElement(i.Z,null,a.createElement(o.Z,c),a.createElement(h.Z,null,t),a.createElement(d.Z,{prev:n,next:r}),a.createElement(s.Z)))};function E(e){return a.createElement(p,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-algorithm-11-container-with-most-water-md-e02c5b57e7384b4bd007.js.map