"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[9198],{2768:function(e,t,n){n.r(t),n.d(t,{Head:function(){return E.py},default:function(){return h}});var l=n(1151),r=n(7294);function a(e){const t=Object.assign({p:"p",em:"em",code:"code",h2:"h2",a:"a",div:"div",pre:"pre",ul:"ul",li:"li"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.p,null,"여러 goroutine을 통해 공유 자원에 접근하는 경우 동시성 프로그래밍의 고전적인 문제상황인 ",r.createElement(t.em,null,"race condition"),"이 발생할 수 있다. Go 역시 critical section을 정의하고 해당 section의 상호배제를 제공하는 동기화 솔루션을 built-in으로 제공한다."),"\n",r.createElement(t.p,null,"Go의 standard ",r.createElement(t.code,null,"sync")," package를 통해 ",r.createElement(t.em,null,"Mutex"),"와 ",r.createElement(t.em,null,"Semaphore"),"와 같은 동기화 솔루션을 손쉽게 이용할 수 있다."),"\n",r.createElement(t.h2,{id:"mutex",style:{position:"relative"}},r.createElement(t.a,{href:"#mutex","aria-label":"mutex permalink",className:"header-links before"},r.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Mutex"),"\n",r.createElement(t.p,null,"Go는 standard library인 ",r.createElement(t.code,null,"sync.Mutex"),"를 통해 built-in Mutex를 제공한다. ",r.createElement(t.code,null,"sync.Mutex"),"에는 Lock을 다루는 메서드인 ",r.createElement(t.code,null,".Lock()"),"과 ",r.createElement(t.code,null,".Unlock()"),"이 노출되어있다."),"\n",r.createElement(t.p,null,"이용하는 방법은 일반적인 Mutex의 동작원리와 동일하다. Lock을 획득한 goroutineA가 critical section에 들어가면, 다른 나머지 goroutine은 critical section에 접근할 경우 goroutineA가 Lock을 내려놓을 때까지 blocking 되는 것이다."),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"defer")," 키워드를 통해 Mutex의 Lock을 반환하는 것은 Go를 통해 sychronize를 구현할 수 있는 좋은 practice이다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-go"},"func criticalSection() {\n  mu.Lock()\n  defer mu.Unlock()\n  // do something that is NOT thread-safe\n  // right before this function returns, defered function call will be executed and Mutex Lock will be restoreds\n}\n")),"\n",r.createElement(t.h2,{id:"rw-mutex",style:{position:"relative"}},r.createElement(t.a,{href:"#rw-mutex","aria-label":"rw mutex permalink",className:"header-links before"},r.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"RW Mutex"),"\n",r.createElement(t.p,null,"read-write Mutex를 의미한다. built-in package인 ",r.createElement(t.code,null,"sync.RWMutex"),"를 import하여 사용할 수 있다. ",r.createElement(t.code,null,"RWMutex"),"는 기본적인 Read-Write Mutex의 ",r.createElement(t.em,null,"Read Lock")," operation을 지원한다."),"\n",r.createElement(t.p,null,"즉, 여러 goroutine이 동일 자원에 대해 접근하는 critical section을 ReadLock을 통해 정의할 경우 write operation에 대해서만 Mutex를 보장한다."),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"read를 시도하는 goroutine은 write goroutine이 Lock을 내려놓을 때까지 blocking된다. write goroutine이 Lock을 쥐고있지 않은 경우엔 모두 ReadLock을 획득하고 critical section으로 진입할 수 있다"),"\n",r.createElement(t.li,null,"write를 시도하는 goroutine은 모든 goroutine이 Lock을 내려놓을 때까지 blocking된다. (read던 write던)"),"\n"),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"RWMutex"),"는 기존 ",r.createElement(t.code,null,"Mutex"),"의 메서드에 추가적으로 ReadLock을 위한 메서드를 2개 더 지원한다."),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,r.createElement(t.code,null,"RLock()")),"\n",r.createElement(t.li,null,r.createElement(t.code,null,"RUnlock()")),"\n"),"\n",r.createElement(t.p,null,"간단한 코드를 통해 ReadLock의 용례를 확인해보자."),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-go"},"var (\n  myData = make(map[int]int)\n  rwMutex = sync.RWMutex{}\n)\n\nfunc readData(key int) {\n  rwMutex.RLock()\n  defer rwMutex.RUnlock()\n  fmt.Println(myData[key])\n}\n\nfunc writeData(key int, val int) {\n  rwMutex.Lock()\n  defer rwMutex.Unlock()\n  myData[key] = val\n}\n\nfunc main() {\n  go writeData(1, 100)\t// aquire write lock\n  \n  for i := 0; i < 5; i ++ {\n    go readData(1)\t// read operation is blocked until write lock is released\n  }\n  \n}\n")),"\n",r.createElement(t.p,null,"RW Mutex는 read/write의 비율이 read에 치중되어 있을 경우 유용하게 활용될 수 있다. 일반 Lock (write lock)이 더 자주 사용되는 경우에는 경우에 따라 오버헤드가 발생할 수도 있다."),"\n",r.createElement(t.h2,{id:"waitgroup",style:{position:"relative"}},r.createElement(t.a,{href:"#waitgroup","aria-label":"waitgroup permalink",className:"header-links before"},r.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"WaitGroup"),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"WaitGroup"),"은 Go가 제공하는 동기화 기법 중 하나로, Semaphore와 유사한 동기화 메커니즘을 제공한다."),"\n",r.createElement(t.p,null,"Semaphore와 동일하게 ",r.createElement(t.code,null,"WaitGroup"),"은 내부적으로 counter를 유지한다. 그리고 이 counter를 조작하는 메서드들을 외부로 노출하는데, 다음과 같다:"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.code,null,"Add")," 메서드는 ",r.createElement(t.code,null,"WaitGroup"),"의 counter를 늘리는데 이용된다."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.code,null,"Done")," 메서드는 ",r.createElement(t.code,null,"WaitGroup"),"의 counter를 줄이는데 이용된다. 특히 ",r.createElement(t.code,null,"defer")," statement와 함께 해당 실행 단위의 작업을 완료한 후 호출할 수 있도록 이용한다."),"\n"),"\n",r.createElement(t.li,null,"\n",r.createElement(t.p,null,r.createElement(t.code,null,"Wait")," 메서드는 모든 ",r.createElement(t.code,null,"WaitGroup"),"의 counter가 0이 될 때까지 호출자 goroutine을 block한다. 즉, 모든 ",r.createElement(t.code,null,"WaitGroup"),"에 등록한 모든 goroutine이 끝날 때까지 호출자를 block하는 것."),"\n"),"\n"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-go"},'func main() {\n  var wg sync.WaitGroup\n  var i int = -1\n  var file string\n  for i, file := range os.Args[1:] {\n    wg.Add(1)\t\t// add before async call\n    go func(){\t\t// goroutine created\n      compress(file)\n      wg.Done()\n    }()\n  }\n  \n  wg.Wait()\t// blocked until all semaphore counter set to 0\n  fmt.Printf("compressed %d files,", i + 1)\n}\n')),"\n",r.createElement(t.p,null,"WaitGroup은 주로 goroutine의 완료를 기다리는데 초점이 맞춰져 있다. Semaphore의 메커니즘을 활용해 gorountine을 기다리고, 동기적으로 수행하도록 하는 특정 상황에 특화되도록 설계한 셈."))}var c=function(e={}){const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?r.createElement(t,e,r.createElement(a,e)):a(e)},o=n(5670),i=n(1326),u=n(4517),m=n(698),d=n(8627),s=n(662),E=n(1873);const p=({data:e,children:t,serverData:n})=>{const{prevPost:l,nextPost:a}=e,c={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return r.createElement(m.Z,{data:e},r.createElement(o.Z,null,r.createElement(u.Z,c),r.createElement(i.Z,null,t),r.createElement(s.Z,{prev:l,next:a}),r.createElement(d.Z)))};function h(e){return r.createElement(p,e,r.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-go-lang-go-mutex-semaphore-md-f87747578f8567d3adaa.js.map