"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[1466],{6222:function(e,t,n){n.r(t),n.d(t,{Head:function(){return E.py},default:function(){return p}});var l=n(1151),r=n(7294);function a(e){const t=Object.assign({p:"p",h2:"h2",a:"a",div:"div",code:"code",pre:"pre",ol:"ol",li:"li",ul:"ul"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.p,null,"웹 호스팅을 관리해주는 서비스에는 종종 트래픽 분석 기능이 뒤따라오는데, 이 때 어느 source를 통해서 내 웹페이지에 도달했는지에 대한 통계도 알려주곤 한다. 물론 Origin만으로도 어느 도메인을 통해 내 웹페이지를 요청했는지 러프하게 확인할 수 있지만, 보다 자세한 통계를 위해 이러한 경우에는 HTTP Referer를 활용한다."),"\n",r.createElement(t.h2,{id:"http-referer",style:{position:"relative"}},r.createElement(t.a,{href:"#http-referer","aria-label":"http referer permalink",className:"header-links before"},r.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"HTTP Referer"),"\n",r.createElement(t.p,null,"HTTP Request 헤더 중 하나로 브라우저가 현재 request를 보내기 전에 방문했던 웹페이지의 주소를 포함한다. 음··· 현실적인 예를 들자면 추천인 (레퍼럴) 같은 느낌이다. 내 서버에 들어오게 된 경로가 어떻게 되는지, 내 서버에 대한 추천인이 누구인지."),"\n",r.createElement(t.p,null,"서버는 ",r.createElement(t.code,null,"Referer")," 헤더를 참고함으로서 해당 요청이 어느 웹페이지(URI)로부터 전달되었는지 알 수 있다."),"\n",r.createElement(t.h2,{id:"http-request-헤더인-origin과의-차이",style:{position:"relative"}},r.createElement(t.a,{href:"#http-request-%ED%97%A4%EB%8D%94%EC%9D%B8-origin%EA%B3%BC%EC%9D%98-%EC%B0%A8%EC%9D%B4","aria-label":"http request 헤더인 origin과의 차이 permalink",className:"header-links before"},r.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"HTTP request 헤더인 Origin과의 차이"),"\n",r.createElement(t.p,null,"뒤의 경로 정보를 포함하는가/안하는가의 차이를 가진다."),"\n",r.createElement(t.p,null,"예를들어 ",r.createElement(t.code,null,"https://www.naver.com/search?query=leobang"),"에 대응하는 웹페이지로부터 ",r.createElement(t.code,null,"https://leobang.me"),"에 들어왔다고 하자."),"\n",r.createElement(t.p,null,"그러면 브라우저는 다음과 같은 HTTP GET request를 보낼텐데, 거기서 ",r.createElement(t.code,null,"Referer"),"와 ",r.createElement(t.code,null,"Origin")," 헤더는 다음과 같다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-http"},'GET / HTTP/1.1\n...\nOrigin: "https://naver.com"\nReferer: "https://naver.com/search?query=leobang"\n...\n')),"\n",r.createElement(t.p,null,"Origin의 정의는 ",r.createElement(t.code,null,"scheme + domain + port"),"이다. HTTP 요청의 경우 scheme에 따라 ",r.createElement(t.code,null,"443")," 혹은 ",r.createElement(t.code,null,"80")," 포트를 이용하므로 포트 넘버는 생략하고, 해당 요청이 시작된 웹페이지의 도메인 정보만을 보여준다."),"\n",r.createElement(t.p,null,"Referer의 경우는 도메인 정보 뿐 아니라 URI의 모든 구성요소를 전달해준다."),"\n",r.createElement(t.h2,{id:"referer-헤더의-용례",style:{position:"relative"}},r.createElement(t.a,{href:"#referer-%ED%97%A4%EB%8D%94%EC%9D%98-%EC%9A%A9%EB%A1%80","aria-label":"referer 헤더의 용례 permalink",className:"header-links before"},r.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Referer 헤더의 용례"),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"통계 수집","\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"어느 웹사이트로부터 유입되었는지 트래픽을 분석/추적할 수 있다."),"\n",r.createElement(t.li,null,"블로그 유입 경로가 어떻게 되는지 알 수 있는 것도 Referer 헤더를 분석한 것이다."),"\n"),"\n"),"\n",r.createElement(t.li,null,"보안","\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"검증된 ",r.createElement(t.code,null,"Referer"),"로부터의 요청만을 허용하도록 보안을 강화할 수 있다. CSRF 방어에 효과적이다. 라고 하지만"),"\n",r.createElement(t.li,null,"사실 Origin 헤더를 체크하는 것만으로도 충분하고, 웹사이트 보안의 기본적인 대전제는 SOP이므로··· 이중 체크 외에 큰 의미가 있는지는 의문이다."),"\n"),"\n"),"\n",r.createElement(t.li,null,"캐싱","\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"프록시 서버 혹은 캐시 시스템에서 ",r.createElement(t.code,null,"Referer")," 헤더를 사용해 적절한 캐시 전략을 사용할 수 있다."),"\n"),"\n"),"\n"))}var c=function(e={}){const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?r.createElement(t,e,r.createElement(a,e)):a(e)},i=n(5670),m=n(1326),u=n(4517),s=n(698),o=n(8627),h=n(662),E=n(1873);const d=({data:e,children:t,serverData:n})=>{const{prevPost:l,nextPost:a}=e,c={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return r.createElement(s.Z,{data:e},r.createElement(i.Z,null,r.createElement(u.Z,c),r.createElement(m.Z,null,t),r.createElement(h.Z,{prev:l,next:a}),r.createElement(o.Z)))};function p(e){return r.createElement(d,e,r.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-web-http-이웹페이지는-어디서왔을까-md-380ea28892117dd5900f.js.map