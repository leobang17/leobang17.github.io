{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-web-http-이웹페이지는-어디서왔을까-md-380ea28892117dd5900f.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/Web/http-이웹페이지는-어디서왔을까.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"웹 호스팅을 관리해주는 서비스에는 종종 트래픽 분석 기능이 뒤따라오는데, 이 때 어느 source를 통해서 내 웹페이지에 도달했는지에 대한 통계도 알려주곤 한다. 물론 Origin만으로도 어느 도메인을 통해 내 웹페이지를 요청했는지 러프하게 확인할 수 있지만, 보다 자세한 통계를 위해 이러한 경우에는 HTTP Referer를 활용한다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"http-referer\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#http-referer\",\n    \"aria-label\": \"http referer permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"HTTP Referer\"), \"\\n\", React.createElement(_components.p, null, \"HTTP Request 헤더 중 하나로 브라우저가 현재 request를 보내기 전에 방문했던 웹페이지의 주소를 포함한다. 음··· 현실적인 예를 들자면 추천인 (레퍼럴) 같은 느낌이다. 내 서버에 들어오게 된 경로가 어떻게 되는지, 내 서버에 대한 추천인이 누구인지.\"), \"\\n\", React.createElement(_components.p, null, \"서버는 \", React.createElement(_components.code, null, \"Referer\"), \" 헤더를 참고함으로서 해당 요청이 어느 웹페이지(URI)로부터 전달되었는지 알 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"http-request-헤더인-origin과의-차이\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#http-request-%ED%97%A4%EB%8D%94%EC%9D%B8-origin%EA%B3%BC%EC%9D%98-%EC%B0%A8%EC%9D%B4\",\n    \"aria-label\": \"http request 헤더인 origin과의 차이 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"HTTP request 헤더인 Origin과의 차이\"), \"\\n\", React.createElement(_components.p, null, \"뒤의 경로 정보를 포함하는가/안하는가의 차이를 가진다.\"), \"\\n\", React.createElement(_components.p, null, \"예를들어 \", React.createElement(_components.code, null, \"https://www.naver.com/search?query=leobang\"), \"에 대응하는 웹페이지로부터 \", React.createElement(_components.code, null, \"https://leobang.me\"), \"에 들어왔다고 하자.\"), \"\\n\", React.createElement(_components.p, null, \"그러면 브라우저는 다음과 같은 HTTP GET request를 보낼텐데, 거기서 \", React.createElement(_components.code, null, \"Referer\"), \"와 \", React.createElement(_components.code, null, \"Origin\"), \" 헤더는 다음과 같다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-http\"\n  }, \"GET / HTTP/1.1\\n...\\nOrigin: \\\"https://naver.com\\\"\\nReferer: \\\"https://naver.com/search?query=leobang\\\"\\n...\\n\")), \"\\n\", React.createElement(_components.p, null, \"Origin의 정의는 \", React.createElement(_components.code, null, \"scheme + domain + port\"), \"이다. HTTP 요청의 경우 scheme에 따라 \", React.createElement(_components.code, null, \"443\"), \" 혹은 \", React.createElement(_components.code, null, \"80\"), \" 포트를 이용하므로 포트 넘버는 생략하고, 해당 요청이 시작된 웹페이지의 도메인 정보만을 보여준다.\"), \"\\n\", React.createElement(_components.p, null, \"Referer의 경우는 도메인 정보 뿐 아니라 URI의 모든 구성요소를 전달해준다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"referer-헤더의-용례\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#referer-%ED%97%A4%EB%8D%94%EC%9D%98-%EC%9A%A9%EB%A1%80\",\n    \"aria-label\": \"referer 헤더의 용례 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Referer 헤더의 용례\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"통계 수집\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"어느 웹사이트로부터 유입되었는지 트래픽을 분석/추적할 수 있다.\"), \"\\n\", React.createElement(_components.li, null, \"블로그 유입 경로가 어떻게 되는지 알 수 있는 것도 Referer 헤더를 분석한 것이다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"보안\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"검증된 \", React.createElement(_components.code, null, \"Referer\"), \"로부터의 요청만을 허용하도록 보안을 강화할 수 있다. CSRF 방어에 효과적이다. 라고 하지만\"), \"\\n\", React.createElement(_components.li, null, \"사실 Origin 헤더를 체크하는 것만으로도 충분하고, 웹사이트 보안의 기본적인 대전제는 SOP이므로··· 이중 체크 외에 큰 의미가 있는지는 의문이다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"캐싱\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"프록시 서버 혹은 캐시 시스템에서 \", React.createElement(_components.code, null, \"Referer\"), \" 헤더를 사용해 적절한 캐시 전략을 사용할 수 있다.\"), \"\\n\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/leobang/blog-starter/documents/Web/http-이웹페이지는-어디서왔을까.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","a","div","code","pre","ol","li","ul","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}