"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[9532],{1637:function(e,n,t){t.r(n),t.d(n,{Head:function(){return s.py},default:function(){return g}});var l=t(1151),a=t(7294);function r(e){const n=Object.assign({p:"p",code:"code",ul:"ul",li:"li",em:"em",h4:"h4",a:"a",div:"div",strong:"strong",pre:"pre",ol:"ol",h2:"h2"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"Go언어에서 ",a.createElement(n.code,null,"init")," 함수는 특별한 용도를 가진 함수이다. 이름 그대로 package에 대한 초기화 작업을 수행할 때 주로 이용된다.  ",a.createElement(n.code,null,"init"),"  함수의 특징은 다음과 같다."),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.code,null,"init")," 함수는 package에 대한 initializer로, 모든 일반 함수에 앞서 수행된다."),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"init")," 함수는 package 단위로 실행되며, 그 순서는 package의 dependency tree에 의해 결정된다."),"\n",a.createElement(n.li,null,"각 package에는 여러 개의 ",a.createElement(n.code,null,"init"),"함수가 중복해서 선언될 수 있다."),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"init")," 함수는 argument도 return 값도 가지지 않는다."),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"init")," 함수는 ",a.createElement(n.em,null,"개발자가 직접 호출할 수 없다"),". 오직 Go 런타임 시스템에 의해서만 호출된다."),"\n"),"\n",a.createElement(n.h4,{id:"init-함수의-실행-순서",style:{position:"relative"}},a.createElement(n.a,{href:"#init-%ED%95%A8%EC%88%98%EC%9D%98-%EC%8B%A4%ED%96%89-%EC%88%9C%EC%84%9C","aria-label":"init 함수의 실행 순서 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"init 함수의 실행 순서"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"init")," 함수는 package 별로, 그리고 동일한 namespace를 가진 package 내에서도 중복해서 선언할 수 있다. 그렇기에 ",a.createElement(n.code,null,"init")," 함수의 실행 순서를 알아두는 것은 중요하다."),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"1. 서로 다른 패키지의 경우, 패키지 의존성에 따라 실행 순서가 결정된다.")),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"init")," 함수는 package 단위로 실행된다. 한 package가 다른 package에 의존하고있다면, 의존되는 package의 ",a.createElement(n.code,null,"init")," 함수가 먼저 실행된다."),"\n",a.createElement(n.p,null,"정확히 말하면 ",a.createElement(n.em,null,"package dependency tree"),"에 의해 결정되지만, 패키지간 의존성이 복잡하지 않은 단순한 프로젝트에서는 ",a.createElement(n.code,null,"import")," 하고 있는 package의 ",a.createElement(n.code,null,"init"),"을 먼저 실행한다고 생각하는 편이 이해하기 쉽다."),"\n",a.createElement(n.p,null,"예를들어, main package가 redis package를 의존하고 있다고 가정하자:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-go"},'// main.go\nimport "redis"\n\nfunc init() {\n  // \n}\n\nfunc main() {\n  err := redis.Store("leo", "bang") \n}\n')),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-go"},"// redis.go \nfunc init() {\n  //\n}\n\nfunc Store(key, value string) error { /** */ }\n")),"\n",a.createElement(n.p,null,"프로그램의 entry point인 ",a.createElement(n.code,null,"main")," package에서 ",a.createElement(n.code,null,"redis"),"를 ",a.createElement(n.em,null,"import"),"하고 있다. 따라서 실행 순서는 다음과 같다:"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,a.createElement(n.code,null,"redis")," package의 ",a.createElement(n.code,null,"init")," 함수"),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"main")," package의 ",a.createElement(n.code,null,"init")," 함수"),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"main")," 함수 호출"),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"redis.Store")," 호출"),"\n"),"\n",a.createElement(n.p,null,"단순하게 생각하면 ",a.createElement(n.code,null,"main"),"의 ",a.createElement(n.code,null,"init"),"을 먼저 수행하고, ",a.createElement(n.code,null,"main"),"이 ",a.createElement(n.code,null,"redis.Store"),"를 호출한 시점에서 ",a.createElement(n.code,null,"redis")," package를 초기화하는 것 아닌가? 라고 생각할 수 있지만 아니다.  ",a.createElement("u",null,a.createElement(n.code,null,"init")," 함수는 어떠한 일반 함수보다 먼저 실행"),"된다. package의 의존성 순서에 따라, package의 초기화 작업을 완료한 후 일반 함수를 실행하게 되므로 위와 같은 lazy init의 케이스는 직접 구현하지 않는 이상 발생하지 않는다."),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"2. 동일한 패키지 and 동일한 파일의 경우 선언된 순서대로 실행된다.")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-go"},'func init() {\n  fmt.Println("init 1")\n}\n\nfunc init() {\n  fmt.Println("init 2")\n}\n\nfunc main() { /** */ }\n// init 1 > init 2 순서대로 실행\n')),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"3. 동일한 패키지 but 파일이 다를 경우 파일의 알파벳 순서대로 실행된다."),"\n예를들어, 어떤 패키지가 ",a.createElement(n.code,null,"a.go")," 파일과 ",a.createElement(n.code,null,"b.go")," 파일로 구성되어있고 둘 다 ",a.createElement(n.code,null,"init")," 함수가 정의되어 있을 경우 ",a.createElement(n.code,null,"a.go")," 파일에 있는 ",a.createElement(n.code,null,"init")," 함수(들)가 먼저 실행된다."),"\n",a.createElement(n.h4,{id:"init-함수의-한계--init-함수를-사용할-때-주의해야할-점",style:{position:"relative"}},a.createElement(n.a,{href:"#init-%ED%95%A8%EC%88%98%EC%9D%98-%ED%95%9C%EA%B3%84--init-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-%EC%A3%BC%EC%9D%98%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90","aria-label":"init 함수의 한계  init 함수를 사용할 때 주의해야할 점 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"init 함수의 한계 (= init 함수를 사용할 때 주의해야할 점)"),"\n",a.createElement(n.p,null,"먼저, 잘못된 예시를 확인하고 이를 통해 배워보자."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-go"},'var db *sql.DB\n\nfunc init() {\n\tdataSourceName := os.Getenv("MYSQL_DATA_SOURCE_NAME")\n\td, err := sql.Open("mysql", dataSourceName)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tif err = d.Ping; err != nil {\n\t\tlog.Panic(err)\t\n\t}\n\tdb = d\n}\n')),"\n",a.createElement(n.p,null,"위 코드를 통해 init 함수의 3가지 단점을 확인할 수 있다."),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.code,null,"init")," 함수는 에러 핸들링이 힘들다.\n",a.createElement(n.code,null,"init")," 함수는 어느 누구에게도 return 하지 않기 때문에 error를 상위에 전달하는 방법은 ",a.createElement(n.code,null,"panic")," 뿐이고, 그 ",a.createElement(n.code,null,"panic"),"을 restore할 주체도 존재하지 않기 때문에 사실상 ",a.createElement("u",null,"error 발생을 알리는 유일한 방법은 panic으로 프로세스가 비정상 종료")," 되는 것 뿐이다.\n위 코드와 같이 핵심적인 부분이라면 ",a.createElement(n.code,null,"panic")," 상태로 종료되어도 괜찮을 수 있지만, minor한 모듈 하나의 ",a.createElement(n.code,null,"init"),"과정에서 실패했다고 application 전체가 중단되는 것은 바람직하지 않다."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"전체 package를 테스트 하기 힘들어진다."),"\n",a.createElement(n.p,null,"참고로, ",a.createElement(n.code,null,"init")," 함수는 개발자가 호출할 수 없기 때문에 ",a.createElement(n.code,null,"init"),"에 대한 단위 테스트는 할 수 없다. 또한, 해당 package에 대한 test는 ",a.createElement(n.code,null,"init")," 함수가 호출된 후에야 test case들이 실행된다."),"\n",a.createElement(n.p,null,"만약 DB 연결을 생성할 필요가 없는 util 함수에 대한 단위테스트를 추가한다고해도, ",a.createElement(n.code,null,"init")," 과정이 실패한다면 해당 test case 역시 실패할 것이다 ."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"init"),"은 import하는 순간 dependency tree에 의해 결정된 순서대로 실행되므로, 어떠한 side effect가 발생할지도 예상하기 어렵다. 즉, 분리된 환경이라고 생각했지만 아닐 수도 있다는 것."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.code,null,"init")," 으로 인한 state의 변경사항을 ",a.createElement(n.em,null,"global variable"),"에 저장해야한다."),"\n",a.createElement(n.p,null,"global variable은 package 내의 함수라면 누구나 그 값에 접근하여 변경할 수 있다. 또한 global variable에 의존하는 함수를 격리할 수 없기 때문에 unit test를 작성하기 힘들다."),"\n",a.createElement(n.p,null,"따라서 global variable을 이용하기보다는 encapsulation을 진행하는게 바람직한다."),"\n"),"\n"),"\n",a.createElement(n.p,null,"위의 repository 초기화 부분의 코드를 일반 함수로 빼내어 변경하면 다음과 같다."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-go"},'func createClient(dsn string) (*sql.DB, error) {\n  db, err := sql.Open("mysql", dsn)\n  if err != nil {\n    return nil, err\n  }\n  if err = db.Ping(); err != nil {\n    return nil, err\n  }\n  return db, nil\n}\n')),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"error 처리를 상위 호출자에게 전달함으로서 app 전체가 crash하지 않을 수 있다."),"\n",a.createElement(n.li,null,"해당 초기화 함수가 올바르게 동작하는지 확인하는 통합 테스트를 작성할 수 있다."),"\n",a.createElement(n.li,null,"connection pool이 global variable로 노출되어있지 않고, 함수 안에 encapsulated 되어있다."),"\n"),"\n",a.createElement(n.h4,{id:"init을-사용해도-좋은-경우",style:{position:"relative"}},a.createElement(n.a,{href:"#init%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%8F%84-%EC%A2%8B%EC%9D%80-%EA%B2%BD%EC%9A%B0","aria-label":"init을 사용해도 좋은 경우 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"init을 사용해도 좋은 경우"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"init"),"은 남용해서는 안되지만 handy한 경우도 있다. ",a.createElement(n.code,null,"init"),"함수가 유용한 경우는 ",a.createElement(n.code,null,"init"),"의 단점을 역으로 생각해보면 된다."),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.em,null,"global variable"),"의 상태를 변경할 일이 없거나,"),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"init")," 과정에서 에러가 발생할 일이 (거의) 없는 초기화 작업의 경우."),"\n"),"\n",a.createElement(n.p,null,"공식 ",a.createElement(n.a,{href:"https://cs.opensource.google/go/x/website/+/e0d934b4:blog/blog.go;l=32",target:"_self",rel:"nofollow"},"Go blog"),"를 보면 static http 설정을 ",a.createElement(n.code,null,"init")," 함수를 이용해 처리한다."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-go"},'func init() {\n\t// Redirect "/blog/" to "/", because the menu bar link is to "/blog/"\n\t// but we\'re serving from the root.\n\tredirect := func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.Redirect(w, r, "/", http.StatusFound)\n\t}\n\thttp.HandleFunc("/blog", redirect)\n\thttp.HandleFunc("/blog/", redirect)\n\n\t// Keep these static file handlers in sync with app.yaml.\n\tstatic := http.FileServer(http.Dir("static"))\n\thttp.Handle("/favicon.ico", static)\n\thttp.Handle("/fonts.css", static)\n\thttp.Handle("/fonts/", static)\n\n\thttp.Handle("/lib/godoc/", http.StripPrefix("/lib/godoc/", http.HandlerFunc(staticHandler)))\n}\n')),"\n",a.createElement(n.p,null,"에러가 발생할 일이 없고, global variable에 접근하지 않는다. 따라서 unit test에도 영향을 주지 않는다."),"\n",a.createElement(n.p,null,"이렇게 handy하게 이용할 수 있는 경우도 있지만, ",a.createElement(n.strong,null,"대부분의 경우 initialize 작업은 별도의 함수로 만들어 처리"),"하는 것이 좋다."),"\n",a.createElement(n.h2,{id:"ref",style:{position:"relative"}},a.createElement(n.a,{href:"#ref","aria-label":"ref permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Ref"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"100 Go mistakes and How to Avoid Them"),"\n"))}var c=function(e={}){const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},i=t(5670),m=t(1326),o=t(4517),u=t(698),E=t(8627),d=t(662),s=t(1873);const p=({data:e,children:n,serverData:t})=>{const{prevPost:l,nextPost:r}=e,c={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return a.createElement(u.Z,{data:e},a.createElement(i.Z,null,a.createElement(o.Z,c),a.createElement(m.Z,null,n),a.createElement(d.Z,{prev:l,next:r}),a.createElement(E.Z)))};function g(e){return a.createElement(p,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-go-lang-go-init-function-md-c34fb23c092ecbdac5e7.js.map