{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-algorithm-127-word-ladder-md-1de5d3c1856d23700eb8.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/Algorithm/127.Word-Ladder.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    code: \"code\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"문제\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%AC%B8%EC%A0%9C\",\n    \"aria-label\": \"문제 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"문제\"), \"\\n\", React.createElement(_components.p, null, \"문자열 \", React.createElement(_components.code, null, \"beginWord\"), \"와 \", React.createElement(_components.code, null, \"endWord\"), \"가 주어진다. 문자열 배열 \", React.createElement(_components.code, null, \"wordList\"), \"를 이용해 \", React.createElement(_components.code, null, \"beginWord\"), \"에서 \", React.createElement(_components.code, null, \"endWord\"), \"까지 가고자 한다. 이동할 수 있는 조건은 두 문자열이 하나의 문자만 빼고 동일해야한다는 것이다.\\n\", React.createElement(_components.code, null, \"beginWord\"), \"는 \", React.createElement(_components.code, null, \"wordList\"), \"에 없을 수도 있다. \", React.createElement(_components.code, null, \"beginWord\"), \"에서 \", React.createElement(_components.code, null, \"endWord\"), \"로 가는 가장 짧은 transformation 횟수를 구하라. 만약 도달할 수 없다면 0을 반환한다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"constraints\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#constraints\",\n    \"aria-label\": \"constraints permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Constraints\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"1 <= beginWord.length <= 10\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"endWord.length == beginWord.length\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"1 <= wordList.length <= 5000\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"wordList[i].length == beginWord.length\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"beginWord, endWord, and wordList[i] consist of lowercase English letters.\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"beginWord != endWord\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"All the words in wordList are unique.\")), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"approach---graph-bfs-시간초과\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#approach---graph-bfs-%EC%8B%9C%EA%B0%84%EC%B4%88%EA%B3%BC\",\n    \"aria-label\": \"approach   graph bfs 시간초과 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Approach - Graph: BFS (시간초과…)\"), \"\\n\", React.createElement(_components.p, null, \"처음 풀어보는 LeetCode Hard 난이도 문제였다. 풀면서 ‘뭐야 생각보다 쉽잖아’ 생각했지만 난이도를 높인 주범은 그래프 탐색과는 무관한 문자열 처리에 있었다… 문자열의 길이가 \", React.createElement(_components.code, null, \"10\"), \"이고 \", React.createElement(_components.code, null, \"wordList\"), \"길이가 \", React.createElement(_components.code, null, \"5000\"), \"이므로 배열 안의 문자열들을 naive하게 비교해서 그래프를 만들면 \", React.createElement(_components.code, null, \"O(N^2 M)\"), \" = 250,000,000이 나오면서 터져버린다..\"), \"\\n\", React.createElement(_components.p, null, \"그 뒤 부분은 단순한 BFS여서 딱히 설명할 것이 없네.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"complexity\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#complexity\",\n    \"aria-label\": \"complexity permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Complexity\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"time complexity: \", React.createElement(_components.code, null, \"O(N^2 M)\"), \" = 250,000,000\"), \"\\n\", React.createElement(_components.li, null, \"space complexity: \", React.createElement(_components.code, null, \"O(N^2)\")), \"\\n\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"code\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#code\",\n    \"aria-label\": \"code permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from collections import deque\\n\\nclass Solution:\\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\\n        graph = defaultdict(list)\\n        wordList.append(beginWord)\\n        visited = set()\\n        \\n        # 5000 * 5000 * 10 = 250,000,000.\\n        for i in range(len(wordList) - 1):\\n            for j in range(i + 1, len(wordList)):\\n                count = 0\\n                # 10 \\n                for k in range(len(wordList[0])):\\n                    if wordList[i][k] != wordList[j][k]:\\n                        count += 1\\n                if count == 1:\\n                    graph[wordList[i]].append(wordList[j])\\n                    graph[wordList[j]].append(wordList[i])\\n\\n        q = deque([(beginWord, 1)])\\n        visited.add(beginWord)\\n\\n        while q:\\n            word, d = q.popleft()\\n            if word == endWord:\\n                return d\\n\\n            for adj in graph[word]:\\n                if adj not in visited:\\n                    q.append((adj, d + 1))\\n                    visited.add(adj)\\n        \\n        return 0\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"approach---graph-bfs-on-m2-솔루션\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#approach---graph-bfs-on-m2-%EC%86%94%EB%A3%A8%EC%85%98\",\n    \"aria-label\": \"approach   graph bfs on m2 솔루션 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Approach - Graph: BFS O(N M^2) 솔루션\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.youtube.com/watch?v=h9iTnkgv05E\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"NeetCode의 솔루션\"), \"을 참고했다.\"), \"\\n\", React.createElement(_components.p, null, \"그래프를 단어들로 만든게 아니라 각 단어들의 pattern으로 만들었다..! 아이디어는 이랬다.\\nhot과 hog는 뒷 부분 한 자리만 다르다. 따라서 이들을 \", React.createElement(_components.code, null, \"ho*\"), \"이라는 asterisk로 처리한 dictionary에서 한 번에 확인한다면 한 자리씩만 다른 (완전히 같은 녀석들도 나중에 순회할 때 비교해서 제외하면 됨.) 원소들만 해당 key에 들어가있지 않을까?\\n그래서 \", React.createElement(_components.code, null, \"wordList\"), \"를 순회하며 그 안에서는 단어의 첫번째 ~ 마지막까지 하나씩 asterisk로 변환한 뒤 원래 단어를 asterisk 키에 추가해준다.\"), \"\\n\", React.createElement(_components.p, null, \"그리고 나중에 BFS에서 이웃 노드를 순회할 때도 역시 word의 첫번째 ~ 마지막까지 asterisk로 바꾼 패턴화된 문자열을 dict에 대입해 나온 이웃들을 순회하는 것이다.\\n실전에서 이런 아이디어 어떻게 내지..\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"complexity-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#complexity-1\",\n    \"aria-label\": \"complexity 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Complexity\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"time complexity: \", React.createElement(_components.code, null, \"O(N M^2)\"), \" = 500,000\"), \"\\n\", React.createElement(_components.li, null, \"space complexity:\"), \"\\n\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"code-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#code-1\",\n    \"aria-label\": \"code 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"from collections import deque\\n\\nclass Solution:\\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\\n        graph = collections.defaultdict(list)\\n        visited = set(beginWord)\\n        wordList.append(beginWord)\\n\\n        # O(N M^2)\\n        for w in wordList:\\n            for i in range(len(w)):\\n                pattern = w[:i] + \\\"*\\\" + w[i + 1:]\\n                graph[pattern].append(w)\\n        \\n        q = deque([(beginWord, 1)])\\n        \\n        # O(N M^2)\\n        while q:\\n            word, d = q.popleft()\\n            if word == endWord:\\n                return d\\n            \\n            for i in range(len(word)):\\n                pattern = word[:i] + \\\"*\\\" + word[i + 1:]\\n                for adj in graph[pattern]:\\n                    if adj not in visited:\\n                        q.append((adj, d + 1))\\n                        visited.add(adj)\\n\\n        return 0\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/leobang/blog-starter/documents/Algorithm/127.Word-Ladder.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","div","p","code","h4","ul","li","pre","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","target","rel","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}