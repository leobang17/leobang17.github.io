{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-docker-mac-os가-linux-container를-실행하는-법-md-51632ddc06879d06a396.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/Docker/macOS가-linux-container를-실행하는-법.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    strong: \"strong\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"container는-host의-운영체제를-공유한다-그렇다면-어떻게-macos-host에서-linuxos-container를-띄울-수-있는걸까\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#container%EB%8A%94-host%EC%9D%98-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EB%A5%BC-%EA%B3%B5%EC%9C%A0%ED%95%9C%EB%8B%A4-%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-macos-host%EC%97%90%EC%84%9C-linuxos-container%EB%A5%BC-%EB%9D%84%EC%9A%B8-%EC%88%98-%EC%9E%88%EB%8A%94%EA%B1%B8%EA%B9%8C\",\n    \"aria-label\": \"container는 host의 운영체제를 공유한다 그렇다면 어떻게 macos host에서 linuxos container를 띄울 수 있는걸까 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Container는 Host의 운영체제를 공유한다. 그렇다면 어떻게 macOS Host에서 linuxOS Container를 띄울 수 있는걸까?\"), \"\\n\", React.createElement(_components.p, null, \"Docker를 비롯한 container runtime을 공부하다보니 궁금한 점이 생겼다. 컨테이너 환경은 Host 머신의 운영체제를 공유하기 때문에 경량화된 실행환경을 제공할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"VM을 활용해서 밀집과 격리를 달성한다면 각 VM runtime은 독자적인 운영체제를 가지고 실행되기 때문에 container runtime이 리소스 측면 활용 측면에서 효율적이라고 할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"그렇다면 \", React.createElement(_components.strong, null, \"어떻게 macOS Host에서 linux container를 실행\"), \"시킬 수 있는 걸까? 분명 linux와 macOS는 호환되지 않는 kernel을 사용하고 있다. linux container 역시 linux kernel이 필요하다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"linux의 경우 linux kernel을 이용하고 macOS의 경우 XNU kernel을 이용한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"가상화-hyperkit\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B0%80%EC%83%81%ED%99%94-hyperkit\",\n    \"aria-label\": \"가상화 hyperkit permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"가상화: HyperKit\"), \"\\n\", React.createElement(_components.p, null, \"이 문제를 해결하기 위해 Docker와 같은 containerize 플랫폼은 \", React.createElement(\"u\", null, \"virtualization\"), \"을 활용한다. macOS 호스트에서 경량화된 linux VM이 생성되고 백그라운드에서 실행된다. 이 VM은 linux container가 격리된 리소스와 커널로 실행될 수 있는 \", React.createElement(\"u\", null, \"샌드박스\"), \" 환경을 제공한다.\"), \"\\n\", React.createElement(_components.p, null, \"Docker for mac은 예전에는 가상화를 위해 VirtualBox를 활용했고, 최근 버전은 가상화를 위해 \", React.createElement(_components.strong, null, \"HyperKit\"), \"을 이용한다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Hyperkit은 macOS 요세미티 10.10 이후에 제공되는 경량 macOS 가상화 솔루션이다. macOS에서 VM을 만들고 관리하는데 사용된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Hyperkit이 관리하는 linux VM이 제공하는 linux 환경에서 docker engine이 linux container를 실행하게 된다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"결론\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B2%B0%EB%A1%A0\",\n    \"aria-label\": \"결론 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"결론\"), \"\\n\", React.createElement(_components.p, null, \"결론적으로, linux container는 macOS Host에서 직접 실행되지 않는다. linux container는 필요한 kernel과 환경을 제공하는 linux VM 위에서 실행된다.\"), \"\\n\", React.createElement(_components.p, null, \"물론 이 작업은 VM 추상화로 인해 약간의 오버헤드를 추가할 수 있다. 또한 일부 기능이 호환되지 않을 수도 있다..고 하지만 Docker의 경우 뛰어난 호환성/이식성을 제공하기 때문에 그럴 일은 없다고 한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/Docker/macOS가-linux-container를-실행하는-법.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","div","p","strong","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}