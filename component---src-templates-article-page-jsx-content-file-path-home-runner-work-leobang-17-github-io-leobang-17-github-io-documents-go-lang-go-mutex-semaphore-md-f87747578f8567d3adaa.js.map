{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-go-lang-go-mutex-semaphore-md-f87747578f8567d3adaa.js","mappings":"oOAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,KAAM,OACNC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,IAAK,MACLC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBb,EAAMc,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,yDAA0DW,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,kBAAmB,6FAA8F,KAAMU,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,gBAAiBW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,QAAS,gBAAiBS,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,SAAU,KAAMU,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,aAAc,+BAAgC,KAAMU,EAAAA,cAAoBd,EAAYM,GAAI,CAC/mBS,GAAI,QACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBd,EAAYO,EAAG,CACpCW,KAAM,SACN,aAAc,kBACdC,UAAW,uBACVL,EAAAA,cAAoBd,EAAYQ,IAAK,CACtCY,wBAAyB,CACvBC,OAAQ,meAEP,SAAU,KAAMP,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,yBAA0BW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,cAAe,8BAA+BS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,cAAe,qBAAsBS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,WAAY,KAAMS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,aAAc,aAAc,KAAMS,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,yKAA0K,KAAMW,EAAAA,cAAoBd,EAAYG,EAAG,KAAMW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,SAAU,4EAA6E,KAAMS,EAAAA,cAAoBd,EAAYS,IAAK,KAAMK,EAAAA,cAAoBd,EAAYK,KAAM,CACz2Bc,UAAW,eACV,iOAAkO,KAAML,EAAAA,cAAoBd,EAAYM,GAAI,CAC7QS,GAAI,WACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBd,EAAYO,EAAG,CACpCW,KAAM,YACN,aAAc,qBACdC,UAAW,uBACVL,EAAAA,cAAoBd,EAAYQ,IAAK,CACtCY,wBAAyB,CACvBC,OAAQ,meAEP,YAAa,KAAMP,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,6CAA8CW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,gBAAiB,wBAAyBS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,WAAY,4BAA6BS,EAAAA,cAAoBd,EAAYI,GAAI,KAAM,aAAc,qBAAsB,KAAMU,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,4GAA6G,KAAMW,EAAAA,cAAoBd,EAAYU,GAAI,KAAM,KAAMI,EAAAA,cAAoBd,EAAYW,GAAI,KAAM,sJAAuJ,KAAMG,EAAAA,cAAoBd,EAAYW,GAAI,KAAM,kFAAmF,MAAO,KAAMG,EAAAA,cAAoBd,EAAYG,EAAG,KAAMW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,WAAY,QAASS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,SAAU,6CAA8C,KAAMS,EAAAA,cAAoBd,EAAYU,GAAI,KAAM,KAAMI,EAAAA,cAAoBd,EAAYW,GAAI,KAAMG,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,YAAa,KAAMS,EAAAA,cAAoBd,EAAYW,GAAI,KAAMG,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,cAAe,MAAO,KAAMS,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,mCAAoC,KAAMW,EAAAA,cAAoBd,EAAYS,IAAK,KAAMK,EAAAA,cAAoBd,EAAYK,KAAM,CAC5gDc,UAAW,eACV,udAAwd,KAAML,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,0HAA2H,KAAMW,EAAAA,cAAoBd,EAAYM,GAAI,CAC7qBS,GAAI,YACJC,MAAO,CACLC,SAAU,aAEXH,EAAAA,cAAoBd,EAAYO,EAAG,CACpCW,KAAM,aACN,aAAc,sBACdC,UAAW,uBACVL,EAAAA,cAAoBd,EAAYQ,IAAK,CACtCY,wBAAyB,CACvBC,OAAQ,meAEP,aAAc,KAAMP,EAAAA,cAAoBd,EAAYG,EAAG,KAAMW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,aAAc,2DAA4D,KAAMS,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,mBAAoBW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,aAAc,uEAAwE,KAAMS,EAAAA,cAAoBd,EAAYU,GAAI,KAAM,KAAMI,EAAAA,cAAoBd,EAAYW,GAAI,KAAM,KAAMG,EAAAA,cAAoBd,EAAYG,EAAG,KAAMW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,OAAQ,SAAUS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,aAAc,yBAA0B,MAAO,KAAMS,EAAAA,cAAoBd,EAAYW,GAAI,KAAM,KAAMG,EAAAA,cAAoBd,EAAYG,EAAG,KAAMW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,QAAS,SAAUS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,aAAc,4BAA6BS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,SAAU,sDAAuD,MAAO,KAAMS,EAAAA,cAAoBd,EAAYW,GAAI,KAAM,KAAMG,EAAAA,cAAoBd,EAAYG,EAAG,KAAMW,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,QAAS,YAAaS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,aAAc,qDAAsDS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,aAAc,8CAA+C,MAAO,MAAO,KAAMS,EAAAA,cAAoBd,EAAYS,IAAK,KAAMK,EAAAA,cAAoBd,EAAYK,KAAM,CAC3+Cc,UAAW,eACV,kXAAqX,KAAML,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,4HACza,CAKA,MAJA,SAAoBJ,EAAQ,CAAC,GAC3B,MAAOuB,QAASC,GAAatB,OAAOC,OAAO,CAAC,GAAGU,EAAAA,EAAAA,MAAsBb,EAAMc,YAC3E,OAAOU,EAAYT,EAAAA,cAAoBS,EAAWxB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oECxDA,MACMyB,EAAc,EAAEC,OAAMC,WAAUC,iBACpC,MAAM,SAACC,EAAQ,SAAEC,GAAYJ,EACvBK,EAAe,IAChBL,EAAKM,IAAIC,YACZC,WAAYR,EAAKM,IAAIG,OAAOD,YAE9B,OAAOnB,EAAAA,cAAoBqB,EAAAA,EAAoB,CAC7CV,KAAMA,GACLX,EAAAA,cAAoBsB,EAAAA,EAAe,KAAMtB,EAAAA,cAAoBuB,EAAAA,EAAoBP,GAAehB,EAAAA,cAAoBwB,EAAAA,EAAiB,KAAMZ,GAAWZ,EAAAA,cAAoByB,EAAAA,EAAa,CACxLC,KAAMZ,EACNa,KAAMZ,IACJf,EAAAA,cAAoB4B,EAAAA,IAAa,EAGxB,SAASC,EAAiB5C,GACvC,OAAOe,EAAAA,cAAoBU,EAAazB,EAAOe,EAAAA,cAAoB8B,EAAqB7C,GAC1F,C","sources":["webpack://gatsby-theme-simplex/./documents/GoLang/Go-mutex-semaphore.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"여러 goroutine을 통해 공유 자원에 접근하는 경우 동시성 프로그래밍의 고전적인 문제상황인 \", React.createElement(_components.em, null, \"race condition\"), \"이 발생할 수 있다. Go 역시 critical section을 정의하고 해당 section의 상호배제를 제공하는 동기화 솔루션을 built-in으로 제공한다.\"), \"\\n\", React.createElement(_components.p, null, \"Go의 standard \", React.createElement(_components.code, null, \"sync\"), \" package를 통해 \", React.createElement(_components.em, null, \"Mutex\"), \"와 \", React.createElement(_components.em, null, \"Semaphore\"), \"와 같은 동기화 솔루션을 손쉽게 이용할 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"mutex\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#mutex\",\n    \"aria-label\": \"mutex permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Mutex\"), \"\\n\", React.createElement(_components.p, null, \"Go는 standard library인 \", React.createElement(_components.code, null, \"sync.Mutex\"), \"를 통해 built-in Mutex를 제공한다. \", React.createElement(_components.code, null, \"sync.Mutex\"), \"에는 Lock을 다루는 메서드인 \", React.createElement(_components.code, null, \".Lock()\"), \"과 \", React.createElement(_components.code, null, \".Unlock()\"), \"이 노출되어있다.\"), \"\\n\", React.createElement(_components.p, null, \"이용하는 방법은 일반적인 Mutex의 동작원리와 동일하다. Lock을 획득한 goroutineA가 critical section에 들어가면, 다른 나머지 goroutine은 critical section에 접근할 경우 goroutineA가 Lock을 내려놓을 때까지 blocking 되는 것이다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"defer\"), \" 키워드를 통해 Mutex의 Lock을 반환하는 것은 Go를 통해 sychronize를 구현할 수 있는 좋은 practice이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"func criticalSection() {\\n  mu.Lock()\\n  defer mu.Unlock()\\n  // do something that is NOT thread-safe\\n  // right before this function returns, defered function call will be executed and Mutex Lock will be restoreds\\n}\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"rw-mutex\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#rw-mutex\",\n    \"aria-label\": \"rw mutex permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"RW Mutex\"), \"\\n\", React.createElement(_components.p, null, \"read-write Mutex를 의미한다. built-in package인 \", React.createElement(_components.code, null, \"sync.RWMutex\"), \"를 import하여 사용할 수 있다. \", React.createElement(_components.code, null, \"RWMutex\"), \"는 기본적인 Read-Write Mutex의 \", React.createElement(_components.em, null, \"Read Lock\"), \" operation을 지원한다.\"), \"\\n\", React.createElement(_components.p, null, \"즉, 여러 goroutine이 동일 자원에 대해 접근하는 critical section을 ReadLock을 통해 정의할 경우 write operation에 대해서만 Mutex를 보장한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"read를 시도하는 goroutine은 write goroutine이 Lock을 내려놓을 때까지 blocking된다. write goroutine이 Lock을 쥐고있지 않은 경우엔 모두 ReadLock을 획득하고 critical section으로 진입할 수 있다\"), \"\\n\", React.createElement(_components.li, null, \"write를 시도하는 goroutine은 모든 goroutine이 Lock을 내려놓을 때까지 blocking된다. (read던 write던)\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"RWMutex\"), \"는 기존 \", React.createElement(_components.code, null, \"Mutex\"), \"의 메서드에 추가적으로 ReadLock을 위한 메서드를 2개 더 지원한다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"RLock()\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.code, null, \"RUnlock()\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"간단한 코드를 통해 ReadLock의 용례를 확인해보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"var (\\n  myData = make(map[int]int)\\n  rwMutex = sync.RWMutex{}\\n)\\n\\nfunc readData(key int) {\\n  rwMutex.RLock()\\n  defer rwMutex.RUnlock()\\n  fmt.Println(myData[key])\\n}\\n\\nfunc writeData(key int, val int) {\\n  rwMutex.Lock()\\n  defer rwMutex.Unlock()\\n  myData[key] = val\\n}\\n\\nfunc main() {\\n  go writeData(1, 100)\\t// aquire write lock\\n  \\n  for i := 0; i < 5; i ++ {\\n    go readData(1)\\t// read operation is blocked until write lock is released\\n  }\\n  \\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"RW Mutex는 read/write의 비율이 read에 치중되어 있을 경우 유용하게 활용될 수 있다. 일반 Lock (write lock)이 더 자주 사용되는 경우에는 경우에 따라 오버헤드가 발생할 수도 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"waitgroup\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#waitgroup\",\n    \"aria-label\": \"waitgroup permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"WaitGroup\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"WaitGroup\"), \"은 Go가 제공하는 동기화 기법 중 하나로, Semaphore와 유사한 동기화 메커니즘을 제공한다.\"), \"\\n\", React.createElement(_components.p, null, \"Semaphore와 동일하게 \", React.createElement(_components.code, null, \"WaitGroup\"), \"은 내부적으로 counter를 유지한다. 그리고 이 counter를 조작하는 메서드들을 외부로 노출하는데, 다음과 같다:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Add\"), \" 메서드는 \", React.createElement(_components.code, null, \"WaitGroup\"), \"의 counter를 늘리는데 이용된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Done\"), \" 메서드는 \", React.createElement(_components.code, null, \"WaitGroup\"), \"의 counter를 줄이는데 이용된다. 특히 \", React.createElement(_components.code, null, \"defer\"), \" statement와 함께 해당 실행 단위의 작업을 완료한 후 호출할 수 있도록 이용한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Wait\"), \" 메서드는 모든 \", React.createElement(_components.code, null, \"WaitGroup\"), \"의 counter가 0이 될 때까지 호출자 goroutine을 block한다. 즉, 모든 \", React.createElement(_components.code, null, \"WaitGroup\"), \"에 등록한 모든 goroutine이 끝날 때까지 호출자를 block하는 것.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"func main() {\\n  var wg sync.WaitGroup\\n  var i int = -1\\n  var file string\\n  for i, file := range os.Args[1:] {\\n    wg.Add(1)\\t\\t// add before async call\\n    go func(){\\t\\t// goroutine created\\n      compress(file)\\n      wg.Done()\\n    }()\\n  }\\n  \\n  wg.Wait()\\t// blocked until all semaphore counter set to 0\\n  fmt.Printf(\\\"compressed %d files,\\\", i + 1)\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"WaitGroup은 주로 goroutine의 완료를 기다리는데 초점이 맞춰져 있다. Semaphore의 메커니즘을 활용해 gorountine을 기다리고, 동기적으로 수행하도록 하는 특정 상황에 특화되도록 설계한 셈.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/GoLang/Go-mutex-semaphore.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","p","em","code","h2","a","div","pre","ul","li","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}