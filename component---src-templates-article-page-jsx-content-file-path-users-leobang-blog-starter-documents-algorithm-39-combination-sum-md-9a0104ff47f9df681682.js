"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[3855],{4872:function(e,t,n){n.r(t),n.d(t,{Head:function(){return h.py},default:function(){return E}});var l=n(1151),a=n(7294);function r(e){const t=Object.assign({h2:"h2",a:"a",div:"div",p:"p",code:"code",h4:"h4",ul:"ul",li:"li",ol:"ol",pre:"pre"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.h2,{id:"문제",style:{position:"relative"}},a.createElement(t.a,{href:"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"문제"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://leetcode.com/problems/combination-sum/description/?envType=study-plan-v2&envId=top-interview-150",target:"_self",rel:"nofollow"},"[LeetCode] 39. Combination Sum")),"\n",a.createElement(t.p,null,"서로 다른 정수로 이루어진 배열 ",a.createElement(t.code,null,"candidates"),"와 정수 ",a.createElement(t.code,null,"target"),"이 주어진다. ",a.createElement(t.code,null,"candidates"),"의 원소들로 만들 수 있는 조합(combinations)들 중, 조합 내 원소의 합이 ",a.createElement(t.code,null,"target"),"인 조합을 반환하라."),"\n",a.createElement(t.p,null,"이 때 조합은 중복된 값을 허용한다. 예를들어, ",a.createElement(t.code,null,"target"),"이 ",a.createElement(t.code,null,"7"),"이고 ",a.createElement(t.code,null,"candidates"),"가 ",a.createElement(t.code,null,"[2, 3, 4, 5]"),"라면 ",a.createElement(t.code,null,"[2, 2, 3]"),"의 조합을 허용한다.\n대신 조합 내 원소의 순서는 무시한다. ",a.createElement(t.code,null,"[2, 2, 3]"),"과 ",a.createElement(t.code,null,"[3, 2, 2]"),"는 동일한 조합으로 판단한다."),"\n",a.createElement(t.h4,{id:"constraints",style:{position:"relative"}},a.createElement(t.a,{href:"#constraints","aria-label":"constraints permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Constraints"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,a.createElement(t.code,null,"1 <= candidates.length <= 30")),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"2 <= candidates[i] <= 40")),"\n",a.createElement(t.li,null,"All elements of candidates are distinct."),"\n",a.createElement(t.li,null,a.createElement(t.code,null,"1 <= target <= 40")),"\n"),"\n",a.createElement(t.h2,{id:"approach",style:{position:"relative"}},a.createElement(t.a,{href:"#approach","aria-label":"approach permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach"),"\n",a.createElement(t.p,null,"combinations를 만드는 알고리즘을 이해한다면 순탄한 문제였다. 그냥 combinations가 아니라 중복조합이라는게 변수였지만, 큰 로직은 다를 것이 없었당."),"\n",a.createElement(t.p,null,"재귀 함수로 중복조합을 구현하는데, 인자로는 현재 조합의 array, 현재 조합의 합계, 순회를 시작할 index를 받는다."),"\n",a.createElement(t.ol,null,"\n",a.createElement(t.li,null,"종료조건: sum이 target과 동일하다면 종료"),"\n",a.createElement(t.li,null,"탐색"),"\n"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"순회를 시작할 index ~ candidates의 끝까지 순회한다."),"\n",a.createElement(t.li,null,"만약 순회하는 원소 + 주어진 sum이 target 보다 크다면 무시하고 (backtrack)","\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"아닐 경우, array에 현재 원소를 넣고"),"\n",a.createElement(t.li,null,"재귀함수를 실행한다."),"\n",a.createElement(t.li,null,"재귀함수 뒤에서는 다시 array에서 pop 해준다."),"\n"),"\n"),"\n"),"\n",a.createElement(t.p,null,"공간복잡도는 효율적이었지만 시간복잡도가 20% 수준이었다.. 중복조합의 횟수만큼 도는게 왜 불리한거지?? ㅜㅜ"),"\n",a.createElement(t.h4,{id:"complexity",style:{position:"relative"}},a.createElement(t.a,{href:"#complexity","aria-label":"complexity permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",a.createElement(t.ul,null,"\n",a.createElement(t.li,null,"time complexity:"),"\n",a.createElement(t.li,null,"space complexity:"),"\n"),"\n",a.createElement(t.h4,{id:"code",style:{position:"relative"}},a.createElement(t.a,{href:"#code","aria-label":"code permalink",className:"header-links before"},a.createElement(t.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",a.createElement(t.pre,null,a.createElement(t.code,{className:"language-python"},"class Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        answer = []\n        \n        def recur(arr, sum, start):\n            if sum == target:\n                answer.append(arr[:])\n                return\n            \n            for i in range(start, len(candidates)):\n                if sum < target:\n                    arr.append(candidates[i])\n                    recur(arr, sum + candidates[i], i)\n                    arr.pop()\n        \n        recur([], 0, 0)\n            \n        return answer\n")))}var c=function(e={}){const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?a.createElement(t,e,a.createElement(r,e)):r(e)},i=n(5670),s=n(1326),m=n(4517),o=n(698),d=n(8627),u=n(662),h=n(1873);const p=({data:e,children:t,serverData:n})=>{const{prevPost:l,nextPost:r}=e,c={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return a.createElement(o.Z,{data:e},a.createElement(i.Z,null,a.createElement(m.Z,c),a.createElement(s.Z,null,t),a.createElement(u.Z,{prev:l,next:r}),a.createElement(d.Z)))};function E(e){return a.createElement(p,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-algorithm-39-combination-sum-md-9a0104ff47f9df681682.js.map