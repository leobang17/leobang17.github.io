{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-node-js-javascript-array-md-bcfdc5267f9c7d77d7ed.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/NodeJS/javascript-array.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    code: \"code\",\n    em: \"em\",\n    strong: \"strong\",\n    h4: \"h4\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, {\n    id: \"javascript의-배열은-object다\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#javascript%EC%9D%98-%EB%B0%B0%EC%97%B4%EC%9D%80-object%EB%8B%A4\",\n    \"aria-label\": \"javascript의 배열은 object다 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Javascript의 배열은 Object다\"), \"\\n\", React.createElement(_components.p, null, \"Javascript에는 엄밀한 수준의 ‘static array’를 지원하지 않는다. \", React.createElement(_components.code, null, \"Array\"), \"라는 배열을 흉내낸 type을 지원하지만 사실 이마저도 내부적으로 보면 \", React.createElement(_components.em, null, \"배열이 아닌 객체에 가깝다\"), \". ArrayList도 아니고 LinkedList도 아닌 것이, 그냥 \", React.createElement(_components.strong, null, \"배열의 형태를 흉내낸 객체\"), \"이다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"javascript-array는-index를-문자열로-접근한다\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#javascript-array%EB%8A%94-index%EB%A5%BC-%EB%AC%B8%EC%9E%90%EC%97%B4%EB%A1%9C-%EC%A0%91%EA%B7%BC%ED%95%9C%EB%8B%A4\",\n    \"aria-label\": \"javascript array는 index를 문자열로 접근한다 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Javascript Array는 index를 문자열로 접근한다?\"), \"\\n\", React.createElement(_components.p, null, \"Javascript의 배열은 Object와 같이, \", React.createElement(_components.strong, null, \"key-value 쌍으로 데이터를 저장\"), \"한다.이 때의 key 값은 \", React.createElement(_components.em, null, \"주로 \", React.createElement(_components.code, null, \"number\"), \" 타입의 index를 사용\"), \"한다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 Javascript의 Array는 객체인 것을 잊지말자. Object의 key는 \", React.createElement(_components.code, null, \"string\"), \" 혹은 \", React.createElement(_components.code, null, \"symbol\"), \" type을 허용한다. 만약 Object type의 key로 \", React.createElement(_components.code, null, \"number\"), \" type을 제공할 경우 자동으로 \", React.createElement(_components.code, null, \"string\"), \" type으로 변환된다. \", React.createElement(_components.code, null, \"1\"), \" 이라는 index는 사실 내부적으로 \", React.createElement(_components.code, null, \"\\\"1\\\"\"), \"로 변환되어 key로 들어가게 된다. 따라서, Array의 key 값으로 \", React.createElement(_components.code, null, \"number\"), \" 형식의 \", React.createElement(_components.code, null, \"string\"), \"을 던져주어도 ‘당연히’ 동작한다. Javascript는 참 요상하다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"const name = [\\\"leo\\\", \\\"bang\\\", \\\"seok\\\", \\\"jin\\\"];\\nconsole.log(name[\\\"2\\\"]); // seok \\n\")), \"\\n\", React.createElement(_components.p, null, \"다음으로는 Array의 property를 직접 확인해보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"Object.getOwnPropertyDescriptors([1, 2, 3]));\\n/*\\n{\\n  '0': { value: 1, writable: true, enumerable: true, configurable: true },\\n  '1': { value: 2, writable: true, enumerable: true, configurable: true },\\n  '2': { value: 3, writable: true, enumerable: true, configurable: true },\\n  length: { value: 3, writable: true, enumerable: false, configurable: false }\\n}\\n*/\\n\")), \"\\n\", React.createElement(_components.p, null, \"key는 역시 number 형식의  \", React.createElement(_components.code, null, \"string\"), \" type으로 저장되어있다. 또한, Javascript의 배열은 index를 property key로 갖는 객체에 불과하다는 것을 눈으로 확인할 수 있다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"그럼-javascript의-배열은-연속된-공간에-저장되지-않는가\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B7%B8%EB%9F%BC-javascript%EC%9D%98-%EB%B0%B0%EC%97%B4%EC%9D%80-%EC%97%B0%EC%86%8D%EB%90%9C-%EA%B3%B5%EA%B0%84%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94%EA%B0%80\",\n    \"aria-label\": \"그럼 javascript의 배열은 연속된 공간에 저장되지 않는가 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"그럼 Javascript의 배열은 연속된 공간에 저장되지 않는가?\"), \"\\n\", React.createElement(_components.p, null, \"Javascript의 배열은 Object이다. 그렇기에 사실 내부적으로 \", React.createElement(_components.code, null, \"Array\"), \" 내부의 \", React.createElement(_components.em, null, \"data type이 동일할 것을 강요 받지 않는다\"), \". 그런데 data type이 동일하지 않다면, 어떠한 크기를 갖는 자료가 연속적으로 위치할지 예측할 수 없기 때문에 연속적인 메모리 영역을 할당하기 어렵다···\"), \"\\n\", React.createElement(_components.p, null, \"그렇기에 Javascript는 일반적으로는 \", React.createElement(_components.em, null, \"sparse array\"), \"라고 할 수 있다. Array 내부에 다양한 type의 data가 혼재해있는 경우 \", React.createElement(_components.code, null, \"Array\"), \"는 일반적인 ‘array’ 보다는 \", React.createElement(\"u\", null, \"Hash Table과 유사한 방식\"), \"으로 관리된다. 그렇기에 연속적인 공간을 할당받지 않는다. 유연성을 얻고 속도를 희생한 셈이다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 \", React.createElement(_components.code, null, \"Array\"), \"는 이름부터 ‘배열’임을 선포한 자료형인만큼, Javascript 엔진은 이에 대한 최적화를 내부에서 수행한다. Javascript 엔진은 \", React.createElement(_components.code, null, \"Array\"), \"에 저장된 자료형이 모두 동일하고, 자료형의 메모리 공간이 동적으로 확장/축소되지 않는 primitive type일 경우엔 내부적으로 C++과 유사하게 관리하며 data들을 연속된 메모리에 저장한다. 예를들어, 모두 \", React.createElement(_components.code, null, \"number\"), \" type으로 저장된 \", React.createElement(_components.code, null, \"Array\"), \"에 대해서는 일반적인 ‘array’에게 기대할 수 있는 cache hit과 같은 성능 이점을 기대할 수 있는 것이다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/NodeJS/javascript-array.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","a","div","p","code","em","strong","h4","pre","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}