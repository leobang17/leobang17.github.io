"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[172],{7774:function(e,n,t){t.r(n),t.d(n,{Head:function(){return u.py},default:function(){return v}});var l=t(1151),a=t(7294);function r(e){const n=Object.assign({h2:"h2",a:"a",div:"div",p:"p",code:"code",h4:"h4",ul:"ul",li:"li",pre:"pre"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h2,{id:"문제",style:{position:"relative"}},a.createElement(n.a,{href:"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"문제"),"\n",a.createElement(n.p,null,a.createElement(n.a,{href:"https://leetcode.com/problems/number-of-islands/description/?envType=study-plan-v2&envId=top-interview-150",target:"_self",rel:"nofollow"},"200. Number of Islands")),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"m")," * ",a.createElement(n.code,null,"n"),"의 2차원 배열 ",a.createElement(n.code,null,"grid"),"가 주어진다. ",a.createElement(n.code,null,"grid"),"는 ",a.createElement(n.code,null,'"1"')," 혹은 ",a.createElement(n.code,null,'"0"')," 이루어져있으며 ",a.createElement(n.code,null,'"1"'),"은 땅을, ",a.createElement(n.code,null,'"0"'),"은 물을 나타낸다. 사방이 물에 둘러싸인 땅을 섬이라고 한다.\n주어진 ",a.createElement(n.code,null,"grid")," 속의 섬의 개수를 구하라."),"\n",a.createElement(n.h4,{id:"constraints",style:{position:"relative"}},a.createElement(n.a,{href:"#constraints","aria-label":"constraints permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Constraints"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.code,null,"m == grid.length")),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"n == grid[i].length")),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"1 <= m, n <= 300")),"\n",a.createElement(n.li,null,a.createElement(n.code,null,"grid[i][j] is '0' or '1'.")),"\n"),"\n",a.createElement(n.h2,{id:"approach---graph-bfs",style:{position:"relative"}},a.createElement(n.a,{href:"#approach---graph-bfs","aria-label":"approach   graph bfs permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Graph: BFS"),"\n",a.createElement(n.p,null,"땅인 부분에서 BFS로 이동가능한 노드를 모두 방문시키는 단순한 BFS."),"\n",a.createElement(n.h4,{id:"complexity",style:{position:"relative"}},a.createElement(n.a,{href:"#complexity","aria-label":"complexity permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"time complexity: ",a.createElement(n.code,null,"O(N * M)")),"\n",a.createElement(n.li,null,"space complexity: ",a.createElement(n.code,null,"O(N * M)")),"\n"),"\n",a.createElement(n.h4,{id:"code",style:{position:"relative"}},a.createElement(n.a,{href:"#code","aria-label":"code permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},'from collections import deque \n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        N, M = len(grid), len(grid[0])\n        visited = [[False for _ in range(M)] for _ in range(N)]\n        count = 0\n        dx, dy = [-1, 0, 1, 0], [0, 1, 0, -1]\n        \n        for i in range(N):\n            for j in range(M):\n                if visited[i][j] or grid[i][j] == "0":\n                    continue\n\n                # BFS \n                q = deque([(i, j)])\n\n                while q:\n                    x, y = q.popleft()\n                    for k in range(4):\n                        nx, ny = x + dx[k], y + dy[k]\n                        if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == "1" and not visited[nx][ny]:\n                            q.append((nx, ny))\n                            visited[nx][ny] = True\n\n                count += 1          \n                \n        return count\n')),"\n",a.createElement(n.h2,{id:"approach---graph-dfs-recusrive",style:{position:"relative"}},a.createElement(n.a,{href:"#approach---graph-dfs-recusrive","aria-label":"approach   graph dfs recusrive permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Graph: DFS (Recusrive)"),"\n",a.createElement(n.p,null,"재귀함수 호출을 이용한 DFS 방식."),"\n",a.createElement(n.h4,{id:"complexity-1",style:{position:"relative"}},a.createElement(n.a,{href:"#complexity-1","aria-label":"complexity 1 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"time complexity: ",a.createElement(n.code,null,"O(N * M)")),"\n",a.createElement(n.li,null,"space complexity: ",a.createElement(n.code,null,"O(N * M)")),"\n"),"\n",a.createElement(n.h4,{id:"code-1",style:{position:"relative"}},a.createElement(n.a,{href:"#code-1","aria-label":"code 1 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},'class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        N, M = len(grid), len(grid[0])\n        visited = [[False for _ in range(M)] for _ in range(N)]\n        count = 0\n        \n        for i in range(N):\n            for j in range(M):\n                if visited[i][j] or grid[i][j] == "0":\n                    continue\n                self.dfs((i, j), visited, grid, N, M)\n                count += 1          \n                \n        return count\n    \n    def dfs(self, node, visited, grid, N, M):\n        x, y = node\n        dx, dy = [-1, 0, 1, 0], [0, 1, 0, -1]\n        if visited[x][y]:\n            return\n        visited[x][y] = True\n        for i in range(4):\n            nx, ny = x + dx[i], y + dy[i]\n            if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == "1":\n                self.dfs((nx, ny), visited, grid, N, M)\n')),"\n",a.createElement(n.h2,{id:"approach---graph-dfs-iterative",style:{position:"relative"}},a.createElement(n.a,{href:"#approach---graph-dfs-iterative","aria-label":"approach   graph dfs iterative permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Graph: DFS (Iterative)"),"\n",a.createElement(n.p,null,"stack을 이용한 DFS 방식."),"\n",a.createElement(n.h4,{id:"complexity-2",style:{position:"relative"}},a.createElement(n.a,{href:"#complexity-2","aria-label":"complexity 2 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"time complexity: ",a.createElement(n.code,null,"O(N * M)")),"\n",a.createElement(n.li,null,"space complexity: `O(N * M)"),"\n"),"\n",a.createElement(n.h4,{id:"code-2",style:{position:"relative"}},a.createElement(n.a,{href:"#code-2","aria-label":"code 2 permalink",className:"header-links before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},'from collections import deque \n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        N, M = len(grid), len(grid[0])\n        dx, dy = [-1, 0, 1, 0], [0, 1, 0, -1]\n        visited = [[False for _ in range(M)] for _ in range(N)]\n        count = 0\n\n        for i in range(N):\n            for j in range(M):\n                if visited[i][j] or grid[i][j] == "0":\n                    continue\n\n                stack = [(i, j)]\n                while stack:\n                    x, y = stack.pop()\n                    \n                    for k in range(4):\n                        nx, ny = x + dx[k], y + dy[k]\n                        if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == "1" and not visited[nx][ny]:\n                            visited[nx][ny] = True\n                            stack.append((nx, ny))\n                \n                count += 1          \n                \n        return count\n    \n')))}var i=function(e={}){const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},c=t(5670),d=t(1326),o=t(4517),s=t(698),h=t(8627),m=t(662),u=t(1873);const p=({data:e,children:n,serverData:t})=>{const{prevPost:l,nextPost:r}=e,i={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return a.createElement(s.Z,{data:e},a.createElement(c.Z,null,a.createElement(o.Z,i),a.createElement(d.Z,null,n),a.createElement(m.Z,{prev:l,next:r}),a.createElement(h.Z)))};function v(e){return a.createElement(p,e,a.createElement(i,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-algorithm-200-number-of-islands-md-5c829565fef2c03a4f05.js.map