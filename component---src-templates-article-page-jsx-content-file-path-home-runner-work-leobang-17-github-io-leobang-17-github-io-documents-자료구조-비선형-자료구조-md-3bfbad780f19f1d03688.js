"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[8653],{9778:function(e,l,n){n.r(l),n.d(l,{Head:function(){return d.py},default:function(){return p}});var t=n(1151),a=n(7294);function r(e){const l=Object.assign({h1:"h1",a:"a",div:"div",blockquote:"blockquote",p:"p",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",h3:"h3",h5:"h5",ul:"ul",li:"li",em:"em",strong:"strong",pre:"pre"},(0,t.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(l.h1,{id:"map",style:{position:"relative"}},a.createElement(l.a,{href:"#map","aria-label":"map permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Map"),"\n",a.createElement(l.blockquote,null,"\n",a.createElement(l.p,null,"key-value pair를 저장하는 ADT."),"\n"),"\n",a.createElement(l.p,null,"key-value pair로 자료를 저장하면서 삽입, 삭제, 탐색 연산이 평균적으로 상수 시간복잡도를 갖는 자료구조를 말한다."),"\n",a.createElement(l.p,null,"Map을 구현한 것으로는 Hash Table과 Tree-based가 있다."),"\n",a.createElement(l.table,null,a.createElement(l.thead,null,a.createElement(l.tr,null,a.createElement(l.th,null,"Operation"),a.createElement(l.th,null,"Average"),a.createElement(l.th,null,"Worst"))),a.createElement(l.tbody,null,a.createElement(l.tr,null,a.createElement(l.td,null,"삽입"),a.createElement(l.td,null,"O(1)"),a.createElement(l.td,null,"O(n)")),a.createElement(l.tr,null,a.createElement(l.td,null,"삭제"),a.createElement(l.td,null,"O(1)"),a.createElement(l.td,null,"O(n)")),a.createElement(l.tr,null,a.createElement(l.td,null,"탐색"),a.createElement(l.td,null,"O(1)"),a.createElement(l.td,null,"O(n)")))),"\n",a.createElement(l.p,null,"최악의 시간복잡도가 ",a.createElement(l.code,null,"O(N)"),"인 이유는 hash collision 때문이다. 연산하는 모든 element의 hash 값이 동일할 경우 ",a.createElement(l.code,null,"O(N)"),"의 시간복잡도를 갖게 된다."),"\n",a.createElement(l.h3,{id:"hash-table--hash-map",style:{position:"relative"}},a.createElement(l.a,{href:"#hash-table--hash-map","aria-label":"hash table  hash map permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Hash Table (= Hash Map)"),"\n",a.createElement(l.p,null,a.createElement("u",null,"배열"),"과 ",a.createElement("u",null,"hash function"),"을 사용하여 Map을 구현한 자료구조."),"\n",a.createElement(l.h5,{id:"hash-function이란",style:{position:"relative"}},a.createElement(l.a,{href:"#hash-function%EC%9D%B4%EB%9E%80","aria-label":"hash function이란 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Hash function이란?"),"\n",a.createElement(l.p,null,"임의의 크기를 가지는 type의 데이터를 고정된 크기를 가지는 type의 데이터로 변환하는 함수 H(x)이다. 이 때 배출하는 output을 hash라고 한다"),"\n",a.createElement(l.p,null,"hash function의 특징은 다음과 같다:"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"만약 H(x) = H(y)라면 x와 y는 동일할 수도 있다.","\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"이 때, ",a.createElement(l.em,null,"H(x) == H(y)이지만 x != y인 경우를 hash collision")," 이라고 한다."),"\n"),"\n"),"\n",a.createElement(l.li,null,"H(x)는 deterministic 해야한다.","\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"동일한 input값에 대해서는 항상 동일한 hash 값을 배출해야한다."),"\n"),"\n"),"\n",a.createElement(l.li,null,"H(x) != H(y)라면 절대 x와 y는 같은 값일 수 없다."),"\n"),"\n",a.createElement(l.h5,{id:"hash-table에서-hash-function은",style:{position:"relative"}},a.createElement(l.a,{href:"#hash-table%EC%97%90%EC%84%9C-hash-function%EC%9D%80","aria-label":"hash table에서 hash function은 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Hash Table에서 Hash Function은?"),"\n",a.createElement(l.p,null,"Hash Table 구현체에서 hash function이 의미하는 바는, ",a.createElement("u",null,"임의의 데이터를 정수로 변환하는 함수 H(x)"),"를 말한다."),"\n",a.createElement(l.p,null,"예를들어, ",a.createElement(l.code,null,"H(x) = (x^2 - 6x + 9) mod 10"),"의 hash function은 range ",a.createElement(l.code,null,"[0, 9]"),"의 hash를 배출하게 된다."),"\n",a.createElement(l.h5,{id:"hash-collision이란-무엇인가",style:{position:"relative"}},a.createElement(l.a,{href:"#hash-collision%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80","aria-label":"hash collision이란 무엇인가 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"hash collision이란 무엇인가?"),"\n",a.createElement(l.p,null,"Key는 다른데 hash가 동일한 경우."),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"H(x) == H(y)이지만 x != y인 경우"),"\n"),"\n",a.createElement(l.p,null,"단순하게 말하자면, 넣어야 할 곳에 이미 뭔가 들어있는 상황이 생긴 것이다."),"\n",a.createElement(l.h5,{id:"hash-collision은-필연적인가",style:{position:"relative"}},a.createElement(l.a,{href:"#hash-collision%EC%9D%80-%ED%95%84%EC%97%B0%EC%A0%81%EC%9D%B8%EA%B0%80","aria-label":"hash collision은 필연적인가 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"hash collision은 필연적인가?"),"\n",a.createElement(l.p,null,"hash function의 입력값은 무한한데 반해 hash function이 배출하는 값은 특정 range의 정수로 유한하다. 따라서 hash collision은 반드시 일어난다. (비둘기집 원리)"),"\n",a.createElement(l.p,null,"hash function이 균등한 hash 값을 배출할 수 있도록 조정하는 것이 hash collision을 완화할 수 있으며,"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"\n",a.createElement(l.p,null,"seperate chaining"),"\n"),"\n",a.createElement(l.li,null,"\n",a.createElement(l.p,null,"open addressing (개방주소법)"),"\n"),"\n"),"\n",a.createElement(l.p,null,"과 같은 전략으로 hash collision에 대처할 수 있다."),"\n",a.createElement(l.h5,{id:"hash-collision이-없게-11-대응할-수-있도록-hash-function과-hash-table을-구성한다면",style:{position:"relative"}},a.createElement(l.a,{href:"#hash-collision%EC%9D%B4-%EC%97%86%EA%B2%8C-11-%EB%8C%80%EC%9D%91%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-hash-function%EA%B3%BC-hash-table%EC%9D%84-%EA%B5%AC%EC%84%B1%ED%95%9C%EB%8B%A4%EB%A9%B4","aria-label":"hash collision이 없게 11 대응할 수 있도록 hash function과 hash table을 구성한다면 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"hash collision이 없게 1:1 대응할 수 있도록 hash function과 hash table을 구성한다면?"),"\n",a.createElement(l.p,null,"무조건 1:1로 만드는 것 보다 hash collision을 최소화하는 방향으로 설계하고 발생하는 collision에 대해 어떻게 대응할 것인가가 더 중요하다. 1:1 대응이 되도록 만드는 것은 거의 불가능하기도 하고, 그러한 hash table을 만들어봤자 이를 위한 array 할당에 메모리를 너무 차지하게 된다."),"\n",a.createElement(l.h5,{id:"seperate-chaining의-동작-방식에-대해-설명하라",style:{position:"relative"}},a.createElement(l.a,{href:"#seperate-chaining%EC%9D%98-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC","aria-label":"seperate chaining의 동작 방식에 대해 설명하라 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"seperate chaining의 동작 방식에 대해 설명하라."),"\n",a.createElement(l.p,null,"bucket에 저장되는 자료구조를 다음 refernce를 가리키는, 즉, pointing하는 chain이 가능한 자료구조로 구성하는 것이다. Linked List를 사용하거나, red-black tree를 활용한다."),"\n",a.createElement(l.p,null,"그래서 이미 채워져 있는 bucket을 가리키도록 hash collision이 발생하더라도, 다음 node로 삽입할 수 있게되는 것."),"\n",a.createElement(l.h5,{id:"open-addressing은-무엇인가요",style:{position:"relative"}},a.createElement(l.a,{href:"#open-addressing%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94","aria-label":"open addressing은 무엇인가요 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"open addressing은 무엇인가요?"),"\n",a.createElement(l.p,null,"hash collision이 발생할 때, (즉 삽입하려는 버킷이 이미 사용 중인 경우) 다른 빈 해시 버킷에 자료를 삽입하는 방식."),"\n",a.createElement(l.p,null,"그럼 다음에 데이터를 저장할 open된 bucket은 어떻게 결정할까? 해당 결정 알고리즘을 probing이라고 한다. 이 때 다음 sequence를 찾는 probing 함수를 P(x)라고 하는데, P(x)는 절대 순환해서는 안된다!"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"순환한다는 것은 P(x)를 계속 재귀적으로 돌렸을 때 1 > 3 > 7 > 1 이렇게 되면 안된다는 것"),"\n"),"\n",a.createElement(l.p,null,"순환하지 않는 P(x)를 통해 unoccupied된 bucket을 계속 찾는다."),"\n",a.createElement(l.h5,{id:"probing-방식들에는-무엇이-있을까",style:{position:"relative"}},a.createElement(l.a,{href:"#probing-%EB%B0%A9%EC%8B%9D%EB%93%A4%EC%97%90%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C","aria-label":"probing 방식들에는 무엇이 있을까 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"probing 방식들에는 무엇이 있을까?"),"\n",a.createElement(l.p,null,"linear probing"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"순차적으로 탐색하며 비어있는 버킷을 찾는 것. P(x)를 1차 함수로 구성하는 것이긴한데, 그냥 순차 탐색하는 듯 하다."),"\n"),"\n",a.createElement(l.p,null,"Quadratic probing"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"P(x)를 2차 함수로 구성해서 다음 위치를 탐색하는 것."),"\n"),"\n",a.createElement(l.p,null,"Double hashing probing"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"P(x)에 다른 hash 함수를 이용해서 새로운 주소를 할당하는 것. 위 두 방법에 비해 많은 연산량을 요구한다."),"\n"),"\n",a.createElement(l.p,null,"난수 probing"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"난수 함수를 이용해서 다음 address를 찾는다."),"\n"),"\n",a.createElement(l.h5,{id:"open-addressing의-삭제연산에서-tombstone의-역할",style:{position:"relative"}},a.createElement(l.a,{href:"#open-addressing%EC%9D%98-%EC%82%AD%EC%A0%9C%EC%97%B0%EC%82%B0%EC%97%90%EC%84%9C-tombstone%EC%9D%98-%EC%97%AD%ED%95%A0","aria-label":"open addressing의 삭제연산에서 tombstone의 역할 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"open addressing의 삭제연산에서 tombstone의 역할"),"\n",a.createElement(l.p,null,"삭제 연산을 할 때, 징검다리 중간의 하나가 삭제된다면? 그 address를 비우는 것이 아니라, tombstone이라는 특수한 표시를 해둔다. 다음 징검다리로 건너갈 수 있도록."),"\n",a.createElement(l.p,null,"비어있는 자리가 아니므로 load factor의 자리를 차지한다."),"\n",a.createElement(l.h5,{id:"open-address와-seperate-chaining의-차이점은",style:{position:"relative"}},a.createElement(l.a,{href:"#open-address%EC%99%80-seperate-chaining%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80","aria-label":"open address와 seperate chaining의 차이점은 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Open Address와 Seperate Chaining의 차이점은?"),"\n",a.createElement(l.p,null,"open address의 경우 그래도 배열에 데이터를 저장하기 연속된 공간을 탐색한다는 점에서 cache hit의 효율이 높다."),"\n",a.createElement(l.p,null,"따라서 데이터의 개수가 충분히 적다면 array를 꾸준히 활용하는 open address 방식이 seperate chaining보다 성능이 좋다."),"\n",a.createElement(l.h5,{id:"hash-버킷의-동적-확장-그리고-load-factor란",style:{position:"relative"}},a.createElement(l.a,{href:"#hash-%EB%B2%84%ED%82%B7%EC%9D%98-%EB%8F%99%EC%A0%81-%ED%99%95%EC%9E%A5-%EA%B7%B8%EB%A6%AC%EA%B3%A0-load-factor%EB%9E%80","aria-label":"hash 버킷의 동적 확장 그리고 load factor란 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Hash 버킷의 동적 확장, 그리고 load factor란?"),"\n",a.createElement(l.p,null,"버킷 array의 크기(capacity)가 작다면 메모리 사용을 아낄 수 있지만, hash collision으로 인한 성능상 손실이 발생할 확률이 높아진다. 따라서 hash 버킷이 어느정도 채워진다면 버킷의 크기를 조정하는 작업이 필요하다."),"\n",a.createElement(l.p,null,"이 때 조정하는 threshold의 역할을 하는 것이 load factor. 0.75의 load factor는 버킷의 75%를 사용하고 있다는 뜻이다."),"\n",a.createElement(l.p,null,"resizing은 단순하다. n배 더 큰 배열을 할당하고, 그리고 hash function의 mod 값을 커진 capacity만큼 조정해준다. 그리고 기존 배열의 값을 새로 변경된 hash function을 이용해 올바른 자리에 채워넣는다."),"\n",a.createElement(l.h1,{id:"set",style:{position:"relative"}},a.createElement(l.a,{href:"#set","aria-label":"set permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Set"),"\n",a.createElement(l.p,null,"데이터를 저장하는 ADT로"),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"데이터의 ",a.createElement(l.strong,null,"순서를 보장하지 않"),"으며"),"\n",a.createElement(l.li,null,"데이터의 ",a.createElement(l.strong,null,"중복을 허용하지 않"),"는다."),"\n"),"\n",a.createElement(l.table,null,a.createElement(l.thead,null,a.createElement(l.tr,null,a.createElement(l.th,null,"Operation"),a.createElement(l.th,null,"Average"),a.createElement(l.th,null,"Worst"))),a.createElement(l.tbody,null,a.createElement(l.tr,null,a.createElement(l.td,null,"삽입"),a.createElement(l.td,null,"O(1)"),a.createElement(l.td)),a.createElement(l.tr,null,a.createElement(l.td,null,"삭제"),a.createElement(l.td,null,"O(1)"),a.createElement(l.td)),a.createElement(l.tr,null,a.createElement(l.td,null,"탐색"),a.createElement(l.td,null,"O(1)"),a.createElement(l.td)))),"\n",a.createElement(l.p,null,"위의 시간복잡도를 보장하는 동작들을 지원한다."),"\n",a.createElement(l.h3,{id:"hash-set-구현체",style:{position:"relative"}},a.createElement(l.a,{href:"#hash-set-%EA%B5%AC%ED%98%84%EC%B2%B4","aria-label":"hash set 구현체 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Hash Set (구현체)"),"\n",a.createElement(l.p,null,"hash table을 활용해서 Set을 구현한 구현체이다. 위에서 설명했듯이 hash table은 array와 hash function을 이용해 구성한 자료구조이다."),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"테이블의 크기에 상관없이 key를 이용해서 데이터에 상수시간으로 접근할 수 있다."),"\n"),"\n",a.createElement(l.h5,{id:"java에서-hash-set의-구현체-hashset",style:{position:"relative"}},a.createElement(l.a,{href:"#java%EC%97%90%EC%84%9C-hash-set%EC%9D%98-%EA%B5%AC%ED%98%84%EC%B2%B4-hashset","aria-label":"java에서 hash set의 구현체 hashset permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Java에서 Hash Set의 구현체: HashSet"),"\n",a.createElement(l.p,null,"생성자를 보면 내부적으로 ",a.createElement(l.code,null,"HashMap"),"을 활용하고 있다. ",a.createElement("u",null,"key는 그대로 이용하고 value는 그냥 더미데이터를 활용"),"하게 된다."),"\n",a.createElement(l.h5,{id:"hash-table을-활용했으므로-삽입-삭제-탐색의-worst-시간복잡도도-동일하다",style:{position:"relative"}},a.createElement(l.a,{href:"#hash-table%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%96%88%EC%9C%BC%EB%AF%80%EB%A1%9C-%EC%82%BD%EC%9E%85-%EC%82%AD%EC%A0%9C-%ED%83%90%EC%83%89%EC%9D%98-worst-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%8F%84-%EB%8F%99%EC%9D%BC%ED%95%98%EB%8B%A4","aria-label":"hash table을 활용했으므로 삽입 삭제 탐색의 worst 시간복잡도도 동일하다 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Hash Table을 활용했으므로 삽입, 삭제, 탐색의 worst 시간복잡도도 동일하다."),"\n",a.createElement(l.p,null,"hash collision이 계속 반복되는 상황을 상정한다면 ",a.createElement(l.code,null,"O(N)"),"의 시간복잡도를 가진다."),"\n",a.createElement(l.p,null,"하지만 주기적으로 hash table의 array capacity를 조절하므로 최악의 경우까지 갈 일은 거의 없다."),"\n",a.createElement(l.h5,{id:"가변-객체를-set의-key로-쓰고-싶다면",style:{position:"relative"}},a.createElement(l.a,{href:"#%EA%B0%80%EB%B3%80-%EA%B0%9D%EC%B2%B4%EB%A5%BC-set%EC%9D%98-key%EB%A1%9C-%EC%93%B0%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EB%A9%B4","aria-label":"가변 객체를 set의 key로 쓰고 싶다면 permalink",className:"header-links before"},a.createElement(l.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"가변 객체를 Set의 key로 쓰고 싶다면?"),"\n",a.createElement(l.p,null,"사실 hash function는 input으로 값 자체를 활용하지 않고 ",a.createElement("u",null,"메모리 주소를 활용"),"한다. 따라서 두 객체가 가지고 있는 값이 같더라도, 둘에게 할당된 메모리의 주소가 다르기 때문에 다른 hash 값을 산출하는 것이다."),"\n",a.createElement(l.pre,null,a.createElement(l.code,{className:"language-python"},"class Location:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n    \n \tdef __hash__(self):\n    # (self.x, self.y)는 Tuple 타입으로 불변 객체이다.\n    return hash((self.x, self.y))\n  \n \tdef __eq__(self, o):\n    return self.x == o.x and self.y == o.y\n")),"\n",a.createElement(l.ul,null,"\n",a.createElement(l.li,null,"가변 객체의 중복을 검사할 key를 산출할 hash function을 구현해주고"),"\n",a.createElement(l.li,null,"다른 가변 객체의 값과 비교할 비교연산 function을 구현해주어야 한다."),"\n"),"\n",a.createElement(l.p,null,"Java 역시 유사한 방식으로 hash function과 비교연산 메서드를 override해서 구현할 수 있다."))}var h=function(e={}){const{wrapper:l}=Object.assign({},(0,t.ah)(),e.components);return l?a.createElement(l,e,a.createElement(r,e)):r(e)},c=n(5670),i=n(1326),s=n(4517),E=n(698),o=n(8627),m=n(662),d=n(1873);const u=({data:e,children:l,serverData:n})=>{const{prevPost:t,nextPost:r}=e,h={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return a.createElement(E.Z,{data:e},a.createElement(c.Z,null,a.createElement(s.Z,h),a.createElement(i.Z,null,l),a.createElement(m.Z,{prev:t,next:r}),a.createElement(o.Z)))};function p(e){return a.createElement(u,e,a.createElement(h,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-자료구조-비선형-자료구조-md-3bfbad780f19f1d03688.js.map