{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-node-js-javascript-data-type-md-a7f45966f2a5fe49ac4e.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/NodeJS/Javascript-data-type.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    strong: \"strong\",\n    em: \"em\",\n    ol: \"ol\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\",\n    h4: \"h4\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Node가 아니라 Javascript에 대한 내용이지만 어쨌든…\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Javascript에는 다양한 data type이 있는데, 이를 크게 Primitive Type과 Reference Type으로 구분 지을 수 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"primitive-type--immutable\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#primitive-type--immutable\",\n    \"aria-label\": \"primitive type  immutable permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Primitive Type (= Immutable)\"), \"\\n\", React.createElement(_components.p, null, \"가장 기본적인 data type으로 \", React.createElement(_components.strong, null, \"immutable\"), \"한 값을 나타낸다. immutable이라는 것은 선언 및 할당하는 시점에 메모리의 크기가 결정되고, 이후에는 해당 값에 변동을 줄 수 없는 것을 뜻한다. (= 해당 변수의 메모리 크기가 변할 일이 없다.) primitive type의 데이터에 \", React.createElement(_components.em, null, \"무언가 변화를 주는 연산\"), \"을 수행하는 것은 사실 under the hood에서는:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"기존의 값을 삭제하고\"), \"\\n\", React.createElement(_components.li, null, \"새로운 메모리에 연산의 결과 값을 새로이 저장하는 행위의 일련이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Primitive type의 하나인 Number의 \", React.createElement(_components.code, null, \"+=\"), \" 연산을 address의 예시를 확인해보자. Javascript에는 변수의 메모리 address를 반환하는 \", React.createElement(_components.code, null, \"&\"), \" 연산자가 없어 직접 확인할 수는 없지만, 다음과 같을 것이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"// Javascript에서도 메모리 refernce 연산자가 가능하다고 가정해보자.\\nlet a = 1;\\nconsole.log(&a); // 0X7FFF\\na += 1;\\nconsole.log(&a); // 0X3A32 >> 메모리 주소가 변경되었다! 아예 기존 메모리를 해제하고 새로운 값을 재할당해버리는 것.\\n\")), \"\\n\", React.createElement(_components.p, null, \"Primitive Type이 값 그자체로서 immutable하기 때문에 가지는 특성 중 하나는 \", React.createElement(_components.strong, null, \"Stack Memory 영역에 저장\"), \"된다는 점이다. 생각해보면 너무나 당연한게, primitive type은 값 그 자체로서 동작하기 때문에 \", React.createElement(_components.em, null, \"다른 scope에게 건네질 때 pass by value에 의해 값 자체를 복사해서 전달\"), \"하게 된다. 값의 참조를 공유할 일이 전혀 없고 모든 값은 해당 함수의 block안에서만 참조되며 해당 stack frame이 해제될 경우 더 이상 쓰일 일이 없다.\"), \"\\n\", React.createElement(_components.p, null, \"Primitive Type의 종류에는 다음과 같은 기본적인 자료형이 해당된다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"number\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#number\",\n    \"aria-label\": \"number permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"number\"), \"\\n\", React.createElement(_components.p, null, \"Javascript의 Number 타입은 특이하게, \", React.createElement(_components.strong, null, \"모든 종류의 숫자를 포함하는 타입\"), \"이다. Javascipt에는 다른 언어처럼 \", React.createElement(_components.code, null, \"int\"), \" 타입과 \", React.createElement(_components.code, null, \"float\"), \" 혹은 \", React.createElement(_components.code, null, \"double\"), \" 타입을 구분하지 않는다. 대신 모든 숫자 종류의 자료를 \", React.createElement(_components.em, null, \"IEEE 754 표준의 Double Precision\"), \" 방식으로 표현하는 \", React.createElement(_components.code, null, \"number\"), \" 타입으로 포괄한다.\"), \"\\n\", React.createElement(_components.p, null, \"Double Precision이 64bit를 이용해 부동소수점 방식으로 실수를 표현하므로, Javascript에서 기본 number type으로는 다음과 같은 범위 및 정밀도를 가진다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"console.log(Number.MAX_VALUE);\\t// 1.7976931348623157 * 10^308\\nconsole.log(Number.MIN_VALUE);\\t// 5 * 10^-324\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"최대 크기를 넘어서는 값에 대해서는 \", React.createElement(_components.code, null, \"Infinity\"), \"로\"), \"\\n\", React.createElement(_components.li, null, \"최소 크기보다 작은 값에 대해서는 \", React.createElement(_components.code, null, \"0\"), \"으로 처리된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"아무래도 모든 숫자 타입을 부동소수점으로 표현하다보니 \", React.createElement(_components.em, null, \"부동소수점의 단점\"), \" 역시 그대로 가져온다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"부동소수점 방식은 소수점을 binary로 평가하므로 소수점 아래 연산에서 예상치 못한 결과를 초래할 수 있다. 대표적으로 \", React.createElement(_components.code, null, \"0.1 + 0.2 != 0.3\"), \" 이라던가···\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"정밀도에 한계가 존재한다. Javascript의 경우엔 실제 표현 가능한 정수 범위외에도, \", React.createElement(_components.em, null, \"안전한 정수 범위\"), \"가 존재한다. \", React.createElement(_components.code, null, \"Number.Max_Safe_INTEGER\"), \"와 \", React.createElement(_components.code, null, \"Number.MIN_SAFE_INTEGER\"), \"의 범위를 벗어나는 경우 정밀도 손실이 일어날 수 있다. 대규모 정수를 정확하게 다뤄야할 경우엔 적합하지 않을 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"정수에도 부동소수점을 반영하다보니, 기타 언어의 정수타입 연산에 비해 비교적 느릴 수 있다. HW 수준에서 최적화된 정수 연산에 비해 부동소수점 방식은 추가적인 처리 시간이 필요하기 때문이다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"물론 이러한 단점 대신, 모든 숫자 타입을 하나의 \", React.createElement(_components.code, null, \"number\"), \"로 퉁쳐서 개발할 수 있다는 점에서 개발자에게 굉장한 편의성을 가져오기도 한다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"bigint\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#bigint\",\n    \"aria-label\": \"bigint permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"bigInt\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"string\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#string\",\n    \"aria-label\": \"string permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"string\"), \"\\n\", React.createElement(_components.p, null, \"텍스트 데이터를 저장하는 자료형. Primitive 자료형으로서 역시 immutable하기 때문에 내부의 개별 문자를 직접 변경할 수 없다. 개발자 입장에서 조작한다고 생각이 들 때에도, 사실은 내부에서 기존 문자열을 삭제하고 새 문자열을 생성하고 할당하는 일이 일어난다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"string\"), \" 타입은 Unicode 문자들의 sequence로 구성된다. Unicode의 버전중에서는 \", React.createElement(_components.strong, null, \"UTF-16 인코딩\"), \"을 따른다. UTF-16은 변동길이 인코딩 방식으로서 대부분의 문자(char)를 16bit (= 2byte)로 표현하고, 특수한 경우에만 2byte의 두 쌍으로 4byte로 표현한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"UTF-8에서는 한글은 3byte\"), \"를 할애하지만, *UTF-16에서는 \", React.createElement(\"u\", null, \"2byte\"), \"*로 표현할 수 있다. 따라서 다음의 \", React.createElement(_components.code, null, \"string\"), \" 변수에는 선언/할당 시점에 10byte의 메모리가 할당된다:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"const greetings = \\\"안녕하세요\\\"; // 2byte * 5 = 10byte\\n\")), \"\\n\", React.createElement(_components.h4, {\n    id: \"undefined\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#undefined\",\n    \"aria-label\": \"undefined permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"undefined\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"null\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#null\",\n    \"aria-label\": \"null permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"null\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"symbol\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#symbol\",\n    \"aria-label\": \"symbol permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"symbol\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"primitive-type은-불변값인데-어떻게-메서드를-가질까---wrapper-type\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#primitive-type%EC%9D%80-%EB%B6%88%EB%B3%80%EA%B0%92%EC%9D%B8%EB%8D%B0-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EA%B0%80%EC%A7%88%EA%B9%8C---wrapper-type\",\n    \"aria-label\": \"primitive type은 불변값인데 어떻게 메서드를 가질까   wrapper type permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Primitive Type은 불변값인데 어떻게 메서드를 가질까? - Wrapper Type\"), \"\\n\", React.createElement(_components.p, null, \"생각해보면 이상하다! Primitive Type은 값 그 자체로서 저장되며 불변하다. 그런데 우리는 \", React.createElement(_components.code, null, \"string\"), \" 이나 \", React.createElement(_components.code, null, \"number\"), \" 타입을 이용하며 \", React.createElement(_components.code, null, \".trim()\"), \" 혹은 \", React.createElement(_components.code, null, \".toStirng()\"), \"과 같은 메서드를 호출한 적이있을 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"primitive type에 메서드가 있다는 건 뭔가 이상하다. 내부에 Key가 존재하는 Object 같잖아? 그런데 Object는 Reference Type이다···\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"javascript-엔진이-일시적으로-wrapper-type으로-wrapping-해준다\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#javascript-%EC%97%94%EC%A7%84%EC%9D%B4-%EC%9D%BC%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-wrapper-type%EC%9C%BC%EB%A1%9C-wrapping-%ED%95%B4%EC%A4%80%EB%8B%A4\",\n    \"aria-label\": \"javascript 엔진이 일시적으로 wrapper type으로 wrapping 해준다 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Javascript 엔진이 일시적으로 Wrapper Type으로 wrapping 해준다\"), \"\\n\", React.createElement(_components.p, null, \"Primitive Type은 데이터를 효율적으로 저장하고 처리할 수 있게 해주지만, 복잡한 기능이나 메서드를 가지고 있지는 않다. 이에 대한 생산성을 보완하기 위해 Javascript 엔진은 필요에 따라 \", React.createElement(\"u\", null, \"Primitive Type에 해당하는 Wrapper Object로 일시적으로 Wrapping\"), \"하게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"Wrapper Type은 모든 Primitive type에 대응할 수 있도록 존재한다. \", React.createElement(_components.code, null, \"number\"), \" type의 wrapper는 \", React.createElement(_components.code, null, \"Number\"), \"이고, \", React.createElement(_components.code, null, \"string\"), \" type의 wrapper는 \", React.createElement(_components.code, null, \"String\"), \" 인 식이다.\"), \"\\n\", React.createElement(_components.p, null, \"Wrapper Object는 \", React.createElement(_components.strong, null, \"primitive type을 \", React.createElement(_components.em, null, \"일시적\"), \"으로 감싸는 객체\"), \"로 primitive type에 대한 추가적인 기능과 메서드를 제공한다. \", React.createElement(_components.em, null, \"일시적\"), \"이라는 말에 주목해서 Javascript가 어떠한 시점에 어떻게 wrapping을 수행하는지 다음의 예시를 통해 확인해보자:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"let str = \\\"hello\\\";\\t\\nlet upperStr = str.toUpperCase();\\nconsole.log(upperStr); // HELLO\\n\")), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"str\"), \" 변수에 \", React.createElement(_components.code, null, \"hello\"), \" 라는 string 값이 할당되었다. 이는 불변값으로서 stack 메모리 영역에 저장된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"str.toUppercase()\"), \" 를 호출했다!\"), \"\\n\", React.createElement(_components.p, null, \"이 시점에 Javascript Engine은 \", React.createElement(_components.code, null, \"str\"), \" 변수를 \", React.createElement(_components.code, null, \"String\"), \"이라는 \", React.createElement(_components.em, null, \"wrapper object로 wrapping을 수행\"), \"한다. \", React.createElement(_components.code, null, \"String\"), \" 객체의 instance가 생성된 셈이다. 해당 \", React.createElement(_components.code, null, \"String\"), \" object는 reference type으로서 heap 영역에 ‘잠시’ 존재할 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"그리고 해당 \", React.createElement(_components.code, null, \".toUppercase()\"), \" 메서드는 불변값인 \", React.createElement(_components.code, null, \"string\"), \" type을 반환한다. 당연히 기존의 \", React.createElement(_components.code, null, \"str\"), \"과는 관련이 없는 값 그 자체이므로, \", React.createElement(_components.code, null, \"upperStr\"), \"라는 변수에 담긴 \", React.createElement(_components.code, null, \"HELLO\"), \"는 stack 메모레 영역에 위치하게된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"wrapper object가 GC에 의해 heap 영역에서 해제된다.\"), \"\\n\", React.createElement(_components.p, null, \"해당 \", React.createElement(_components.code, null, \"Stirng\"), \" 인스턴스는 js 엔진에 의해 일시적으로 생성된 후, 메서드 반환 후에는 더 이상 참조되지 않으므로 빠른 시일 내에 GC에 의해 수거된다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"reference-type--mutable\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#reference-type--mutable\",\n    \"aria-label\": \"reference type  mutable permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Reference Type (= Mutable)\"), \"\\n\", React.createElement(_components.p, null, \"Reference Type이란 이름 그대로 data가 \", React.createElement(_components.em, null, \"메모리에 저장된 위치를 reference\"), \"하는 type을 말한다. 변수가 값을 직접 저장하지 않고, 값이 저장된 메모리의 위치를 가리키는 ‘참조’를 저장한다.\"), \"\\n\", React.createElement(_components.p, null, \"다시 풀어 말해보자. Reference Type의 자료를 할당한 변수는, 값이 아닌 ‘참조’ 혹은 ‘주소값’을 저장한다. 이 값은 메모리의 stack 영역에 존재한다. 그리고 이 ‘참조’가 가리키는 곳을 dereference하면, heap 영역에 저장된 진짜 값이 등장하는 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"Primitive Type이 Stack 영역에 저장되는 것과 반대로, \", React.createElement(_components.strong, null, \"Reference Type의 값은 일반적으로 Heap 영역에 위치\"), \"한다. Reference Type은 Primitive Typer과는 달리 크기가 mutable하므로, \", React.createElement(_components.em, null, \"선언 및 할당 이후에도 런타임 도중 해당 변수가 차지하는 메모리의 크기가 가변적\"), \"이기 때문에 동적 메모리 할당에 사용되는 영역일 heap에 위치하는 것이 자연스럽다.\"), \"\\n\", React.createElement(_components.p, null, \"Javascript의 Reference Type은 다음과 같이 나열할 수 있다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"일반 객체 ‘Object’\"), \"\\n\", React.createElement(_components.li, null, \"Array (사실 Array도 엄밀한 array는 아니다. Object임)\"), \"\\n\", React.createElement(_components.li, null, \"Function: Javascript에서는 함수 역시 first clas citizen으로, 어디에든 건네질 수 있는 객체 취급을 받는다.\"), \"\\n\", React.createElement(_components.li, null, \"Date type\"), \"\\n\", React.createElement(_components.li, null, \"RegExp 등등···\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"reference type을 다룰 때 주의해야할 점은 너무 당연해서 쓰지 않으겠삼 …\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/NodeJS/Javascript-data-type.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","blockquote","p","h2","a","div","strong","em","ol","li","code","pre","h4","ul","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}