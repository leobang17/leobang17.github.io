{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-자료구조-비선형-자료구조-md-3bfbad780f19f1d03688.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/자료구조/비선형-자료구조.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    code: \"code\",\n    h3: \"h3\",\n    h5: \"h5\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\",\n    strong: \"strong\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"map\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#map\",\n    \"aria-label\": \"map permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Map\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"key-value pair를 저장하는 ADT.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"key-value pair로 자료를 저장하면서 삽입, 삭제, 탐색 연산이 평균적으로 상수 시간복잡도를 갖는 자료구조를 말한다.\"), \"\\n\", React.createElement(_components.p, null, \"Map을 구현한 것으로는 Hash Table과 Tree-based가 있다.\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Operation\"), React.createElement(_components.th, null, \"Average\"), React.createElement(_components.th, null, \"Worst\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"삽입\"), React.createElement(_components.td, null, \"O(1)\"), React.createElement(_components.td, null, \"O(n)\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"삭제\"), React.createElement(_components.td, null, \"O(1)\"), React.createElement(_components.td, null, \"O(n)\")), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"탐색\"), React.createElement(_components.td, null, \"O(1)\"), React.createElement(_components.td, null, \"O(n)\")))), \"\\n\", React.createElement(_components.p, null, \"최악의 시간복잡도가 \", React.createElement(_components.code, null, \"O(N)\"), \"인 이유는 hash collision 때문이다. 연산하는 모든 element의 hash 값이 동일할 경우 \", React.createElement(_components.code, null, \"O(N)\"), \"의 시간복잡도를 갖게 된다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"hash-table--hash-map\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hash-table--hash-map\",\n    \"aria-label\": \"hash table  hash map permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Hash Table (= Hash Map)\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"u\", null, \"배열\"), \"과 \", React.createElement(\"u\", null, \"hash function\"), \"을 사용하여 Map을 구현한 자료구조.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"hash-function이란\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hash-function%EC%9D%B4%EB%9E%80\",\n    \"aria-label\": \"hash function이란 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Hash function이란?\"), \"\\n\", React.createElement(_components.p, null, \"임의의 크기를 가지는 type의 데이터를 고정된 크기를 가지는 type의 데이터로 변환하는 함수 H(x)이다. 이 때 배출하는 output을 hash라고 한다\"), \"\\n\", React.createElement(_components.p, null, \"hash function의 특징은 다음과 같다:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"만약 H(x) = H(y)라면 x와 y는 동일할 수도 있다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이 때, \", React.createElement(_components.em, null, \"H(x) == H(y)이지만 x != y인 경우를 hash collision\"), \" 이라고 한다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"H(x)는 deterministic 해야한다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"동일한 input값에 대해서는 항상 동일한 hash 값을 배출해야한다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"H(x) != H(y)라면 절대 x와 y는 같은 값일 수 없다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"hash-table에서-hash-function은\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hash-table%EC%97%90%EC%84%9C-hash-function%EC%9D%80\",\n    \"aria-label\": \"hash table에서 hash function은 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Hash Table에서 Hash Function은?\"), \"\\n\", React.createElement(_components.p, null, \"Hash Table 구현체에서 hash function이 의미하는 바는, \", React.createElement(\"u\", null, \"임의의 데이터를 정수로 변환하는 함수 H(x)\"), \"를 말한다.\"), \"\\n\", React.createElement(_components.p, null, \"예를들어, \", React.createElement(_components.code, null, \"H(x) = (x^2 - 6x + 9) mod 10\"), \"의 hash function은 range \", React.createElement(_components.code, null, \"[0, 9]\"), \"의 hash를 배출하게 된다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"hash-collision이란-무엇인가\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hash-collision%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\",\n    \"aria-label\": \"hash collision이란 무엇인가 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"hash collision이란 무엇인가?\"), \"\\n\", React.createElement(_components.p, null, \"Key는 다른데 hash가 동일한 경우.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"H(x) == H(y)이지만 x != y인 경우\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"단순하게 말하자면, 넣어야 할 곳에 이미 뭔가 들어있는 상황이 생긴 것이다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"hash-collision은-필연적인가\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hash-collision%EC%9D%80-%ED%95%84%EC%97%B0%EC%A0%81%EC%9D%B8%EA%B0%80\",\n    \"aria-label\": \"hash collision은 필연적인가 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"hash collision은 필연적인가?\"), \"\\n\", React.createElement(_components.p, null, \"hash function의 입력값은 무한한데 반해 hash function이 배출하는 값은 특정 range의 정수로 유한하다. 따라서 hash collision은 반드시 일어난다. (비둘기집 원리)\"), \"\\n\", React.createElement(_components.p, null, \"hash function이 균등한 hash 값을 배출할 수 있도록 조정하는 것이 hash collision을 완화할 수 있으며,\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"seperate chaining\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"open addressing (개방주소법)\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"과 같은 전략으로 hash collision에 대처할 수 있다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"hash-collision이-없게-11-대응할-수-있도록-hash-function과-hash-table을-구성한다면\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hash-collision%EC%9D%B4-%EC%97%86%EA%B2%8C-11-%EB%8C%80%EC%9D%91%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-hash-function%EA%B3%BC-hash-table%EC%9D%84-%EA%B5%AC%EC%84%B1%ED%95%9C%EB%8B%A4%EB%A9%B4\",\n    \"aria-label\": \"hash collision이 없게 11 대응할 수 있도록 hash function과 hash table을 구성한다면 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"hash collision이 없게 1:1 대응할 수 있도록 hash function과 hash table을 구성한다면?\"), \"\\n\", React.createElement(_components.p, null, \"무조건 1:1로 만드는 것 보다 hash collision을 최소화하는 방향으로 설계하고 발생하는 collision에 대해 어떻게 대응할 것인가가 더 중요하다. 1:1 대응이 되도록 만드는 것은 거의 불가능하기도 하고, 그러한 hash table을 만들어봤자 이를 위한 array 할당에 메모리를 너무 차지하게 된다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"seperate-chaining의-동작-방식에-대해-설명하라\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#seperate-chaining%EC%9D%98-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D%EC%97%90-%EB%8C%80%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%98%EB%9D%BC\",\n    \"aria-label\": \"seperate chaining의 동작 방식에 대해 설명하라 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"seperate chaining의 동작 방식에 대해 설명하라.\"), \"\\n\", React.createElement(_components.p, null, \"bucket에 저장되는 자료구조를 다음 refernce를 가리키는, 즉, pointing하는 chain이 가능한 자료구조로 구성하는 것이다. Linked List를 사용하거나, red-black tree를 활용한다.\"), \"\\n\", React.createElement(_components.p, null, \"그래서 이미 채워져 있는 bucket을 가리키도록 hash collision이 발생하더라도, 다음 node로 삽입할 수 있게되는 것.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"open-addressing은-무엇인가요\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#open-addressing%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\",\n    \"aria-label\": \"open addressing은 무엇인가요 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"open addressing은 무엇인가요?\"), \"\\n\", React.createElement(_components.p, null, \"hash collision이 발생할 때, (즉 삽입하려는 버킷이 이미 사용 중인 경우) 다른 빈 해시 버킷에 자료를 삽입하는 방식.\"), \"\\n\", React.createElement(_components.p, null, \"그럼 다음에 데이터를 저장할 open된 bucket은 어떻게 결정할까? 해당 결정 알고리즘을 probing이라고 한다. 이 때 다음 sequence를 찾는 probing 함수를 P(x)라고 하는데, P(x)는 절대 순환해서는 안된다!\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"순환한다는 것은 P(x)를 계속 재귀적으로 돌렸을 때 1 > 3 > 7 > 1 이렇게 되면 안된다는 것\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"순환하지 않는 P(x)를 통해 unoccupied된 bucket을 계속 찾는다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"probing-방식들에는-무엇이-있을까\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#probing-%EB%B0%A9%EC%8B%9D%EB%93%A4%EC%97%90%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C\",\n    \"aria-label\": \"probing 방식들에는 무엇이 있을까 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"probing 방식들에는 무엇이 있을까?\"), \"\\n\", React.createElement(_components.p, null, \"linear probing\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"순차적으로 탐색하며 비어있는 버킷을 찾는 것. P(x)를 1차 함수로 구성하는 것이긴한데, 그냥 순차 탐색하는 듯 하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Quadratic probing\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"P(x)를 2차 함수로 구성해서 다음 위치를 탐색하는 것.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Double hashing probing\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"P(x)에 다른 hash 함수를 이용해서 새로운 주소를 할당하는 것. 위 두 방법에 비해 많은 연산량을 요구한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"난수 probing\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"난수 함수를 이용해서 다음 address를 찾는다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"open-addressing의-삭제연산에서-tombstone의-역할\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#open-addressing%EC%9D%98-%EC%82%AD%EC%A0%9C%EC%97%B0%EC%82%B0%EC%97%90%EC%84%9C-tombstone%EC%9D%98-%EC%97%AD%ED%95%A0\",\n    \"aria-label\": \"open addressing의 삭제연산에서 tombstone의 역할 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"open addressing의 삭제연산에서 tombstone의 역할\"), \"\\n\", React.createElement(_components.p, null, \"삭제 연산을 할 때, 징검다리 중간의 하나가 삭제된다면? 그 address를 비우는 것이 아니라, tombstone이라는 특수한 표시를 해둔다. 다음 징검다리로 건너갈 수 있도록.\"), \"\\n\", React.createElement(_components.p, null, \"비어있는 자리가 아니므로 load factor의 자리를 차지한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"open-address와-seperate-chaining의-차이점은\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#open-address%EC%99%80-seperate-chaining%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80\",\n    \"aria-label\": \"open address와 seperate chaining의 차이점은 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Open Address와 Seperate Chaining의 차이점은?\"), \"\\n\", React.createElement(_components.p, null, \"open address의 경우 그래도 배열에 데이터를 저장하기 연속된 공간을 탐색한다는 점에서 cache hit의 효율이 높다.\"), \"\\n\", React.createElement(_components.p, null, \"따라서 데이터의 개수가 충분히 적다면 array를 꾸준히 활용하는 open address 방식이 seperate chaining보다 성능이 좋다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"hash-버킷의-동적-확장-그리고-load-factor란\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hash-%EB%B2%84%ED%82%B7%EC%9D%98-%EB%8F%99%EC%A0%81-%ED%99%95%EC%9E%A5-%EA%B7%B8%EB%A6%AC%EA%B3%A0-load-factor%EB%9E%80\",\n    \"aria-label\": \"hash 버킷의 동적 확장 그리고 load factor란 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Hash 버킷의 동적 확장, 그리고 load factor란?\"), \"\\n\", React.createElement(_components.p, null, \"버킷 array의 크기(capacity)가 작다면 메모리 사용을 아낄 수 있지만, hash collision으로 인한 성능상 손실이 발생할 확률이 높아진다. 따라서 hash 버킷이 어느정도 채워진다면 버킷의 크기를 조정하는 작업이 필요하다.\"), \"\\n\", React.createElement(_components.p, null, \"이 때 조정하는 threshold의 역할을 하는 것이 load factor. 0.75의 load factor는 버킷의 75%를 사용하고 있다는 뜻이다.\"), \"\\n\", React.createElement(_components.p, null, \"resizing은 단순하다. n배 더 큰 배열을 할당하고, 그리고 hash function의 mod 값을 커진 capacity만큼 조정해준다. 그리고 기존 배열의 값을 새로 변경된 hash function을 이용해 올바른 자리에 채워넣는다.\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"set\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#set\",\n    \"aria-label\": \"set permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Set\"), \"\\n\", React.createElement(_components.p, null, \"데이터를 저장하는 ADT로\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"데이터의 \", React.createElement(_components.strong, null, \"순서를 보장하지 않\"), \"으며\"), \"\\n\", React.createElement(_components.li, null, \"데이터의 \", React.createElement(_components.strong, null, \"중복을 허용하지 않\"), \"는다.\"), \"\\n\"), \"\\n\", React.createElement(_components.table, null, React.createElement(_components.thead, null, React.createElement(_components.tr, null, React.createElement(_components.th, null, \"Operation\"), React.createElement(_components.th, null, \"Average\"), React.createElement(_components.th, null, \"Worst\"))), React.createElement(_components.tbody, null, React.createElement(_components.tr, null, React.createElement(_components.td, null, \"삽입\"), React.createElement(_components.td, null, \"O(1)\"), React.createElement(_components.td)), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"삭제\"), React.createElement(_components.td, null, \"O(1)\"), React.createElement(_components.td)), React.createElement(_components.tr, null, React.createElement(_components.td, null, \"탐색\"), React.createElement(_components.td, null, \"O(1)\"), React.createElement(_components.td)))), \"\\n\", React.createElement(_components.p, null, \"위의 시간복잡도를 보장하는 동작들을 지원한다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"hash-set-구현체\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hash-set-%EA%B5%AC%ED%98%84%EC%B2%B4\",\n    \"aria-label\": \"hash set 구현체 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Hash Set (구현체)\"), \"\\n\", React.createElement(_components.p, null, \"hash table을 활용해서 Set을 구현한 구현체이다. 위에서 설명했듯이 hash table은 array와 hash function을 이용해 구성한 자료구조이다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"테이블의 크기에 상관없이 key를 이용해서 데이터에 상수시간으로 접근할 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"java에서-hash-set의-구현체-hashset\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#java%EC%97%90%EC%84%9C-hash-set%EC%9D%98-%EA%B5%AC%ED%98%84%EC%B2%B4-hashset\",\n    \"aria-label\": \"java에서 hash set의 구현체 hashset permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Java에서 Hash Set의 구현체: HashSet\"), \"\\n\", React.createElement(_components.p, null, \"생성자를 보면 내부적으로 \", React.createElement(_components.code, null, \"HashMap\"), \"을 활용하고 있다. \", React.createElement(\"u\", null, \"key는 그대로 이용하고 value는 그냥 더미데이터를 활용\"), \"하게 된다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"hash-table을-활용했으므로-삽입-삭제-탐색의-worst-시간복잡도도-동일하다\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#hash-table%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%96%88%EC%9C%BC%EB%AF%80%EB%A1%9C-%EC%82%BD%EC%9E%85-%EC%82%AD%EC%A0%9C-%ED%83%90%EC%83%89%EC%9D%98-worst-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%8F%84-%EB%8F%99%EC%9D%BC%ED%95%98%EB%8B%A4\",\n    \"aria-label\": \"hash table을 활용했으므로 삽입 삭제 탐색의 worst 시간복잡도도 동일하다 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Hash Table을 활용했으므로 삽입, 삭제, 탐색의 worst 시간복잡도도 동일하다.\"), \"\\n\", React.createElement(_components.p, null, \"hash collision이 계속 반복되는 상황을 상정한다면 \", React.createElement(_components.code, null, \"O(N)\"), \"의 시간복잡도를 가진다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 주기적으로 hash table의 array capacity를 조절하므로 최악의 경우까지 갈 일은 거의 없다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"가변-객체를-set의-key로-쓰고-싶다면\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EA%B0%80%EB%B3%80-%EA%B0%9D%EC%B2%B4%EB%A5%BC-set%EC%9D%98-key%EB%A1%9C-%EC%93%B0%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EB%A9%B4\",\n    \"aria-label\": \"가변 객체를 set의 key로 쓰고 싶다면 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"가변 객체를 Set의 key로 쓰고 싶다면?\"), \"\\n\", React.createElement(_components.p, null, \"사실 hash function는 input으로 값 자체를 활용하지 않고 \", React.createElement(\"u\", null, \"메모리 주소를 활용\"), \"한다. 따라서 두 객체가 가지고 있는 값이 같더라도, 둘에게 할당된 메모리의 주소가 다르기 때문에 다른 hash 값을 산출하는 것이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"class Location:\\n  def __init__(self, x, y):\\n    self.x = x\\n    self.y = y\\n    \\n \\tdef __hash__(self):\\n    # (self.x, self.y)는 Tuple 타입으로 불변 객체이다.\\n    return hash((self.x, self.y))\\n  \\n \\tdef __eq__(self, o):\\n    return self.x == o.x and self.y == o.y\\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"가변 객체의 중복을 검사할 key를 산출할 hash function을 구현해주고\"), \"\\n\", React.createElement(_components.li, null, \"다른 가변 객체의 값과 비교할 비교연산 function을 구현해주어야 한다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Java 역시 유사한 방식으로 hash function과 비교연산 메서드를 override해서 구현할 수 있다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/자료구조/비선형-자료구조.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","blockquote","p","table","thead","tr","th","tbody","td","code","h3","h5","ul","li","em","strong","pre","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}