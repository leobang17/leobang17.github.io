"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[645],{1818:function(e,n,t){t.r(n),t.d(n,{Head:function(){return u.py},default:function(){return v}});var l=t(1151),r=t(7294);function a(e){const n=Object.assign({h2:"h2",a:"a",div:"div",p:"p",code:"code",h4:"h4",ul:"ul",li:"li",pre:"pre"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.h2,{id:"문제",style:{position:"relative"}},r.createElement(n.a,{href:"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink",className:"header-links before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"문제"),"\n",r.createElement(n.p,null,r.createElement(n.a,{href:"https://leetcode.com/problems/course-schedule-ii/?envType=study-plan-v2&envId=top-interview-150",target:"_self",rel:"nofollow"},"210. Course Schedule II")),"\n",r.createElement(n.p,null,"수강해야하는 과목들을 나타내는 정수 ",r.createElement(n.code,null,"numCourses"),"가 주어진다. ",r.createElement(n.code,null,"0")," ~ ",r.createElement(n.code,null,"numCourses - 1"),"까지가 수강해아햐는 과목이다. ",r.createElement(n.code,null,"[Ai, Bi]"),"로 이루어진 배열 ",r.createElement(n.code,null,"prerequisites"),"은 선수강과목에 대한 정보를 나타낸다.\n",r.createElement(n.code,null,"[Ai, Bi]"),"는 ",r.createElement(n.code,null,"Ai")," 과목을 수강하기 위해서는 ",r.createElement(n.code,null,"Bi"),"를 먼저 수강해야한다는 뜻이다."),"\n",r.createElement(n.p,null,"모든 강의를 수강할 수 있는 순서를 배열로 반환하라. 만약 모든 강의를 수강할 수 없는 상황이라면 빈 배열을 반환한다."),"\n",r.createElement(n.h4,{id:"constraints",style:{position:"relative"}},r.createElement(n.a,{href:"#constraints","aria-label":"constraints permalink",className:"header-links before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Constraints"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,r.createElement(n.code,null,"1 <= numCourses <= 2000")),"\n",r.createElement(n.li,null,r.createElement(n.code,null,"0 <= prerequisites.length <= numCourses * (numCourses - 1)")),"\n",r.createElement(n.li,null,r.createElement(n.code,null,"prerequisites[i].length == 2")),"\n",r.createElement(n.li,null,r.createElement(n.code,null,"0 <= ai, bi < numCourses")),"\n",r.createElement(n.li,null,r.createElement(n.code,null,"ai != bi")),"\n",r.createElement(n.li,null,r.createElement(n.code,null,"All the pairs [ai, bi] are distinct.")),"\n"),"\n",r.createElement(n.h2,{id:"approach---graph-bfs",style:{position:"relative"}},r.createElement(n.a,{href:"#approach---graph-bfs","aria-label":"approach   graph bfs permalink",className:"header-links before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Graph: BFS"),"\n",r.createElement(n.p,null,"Course-Schedule 1 문제와 동일한 풀이법으로 접근했다."),"\n",r.createElement(n.p,null,"다음에 수강할 수 있는 강의와 해당 강의를 수강하기 위해서 선수강해야하는 강의들을 저장하고, BFS로 노드를 탐색하며 선수강과목을 모두 듣지 않은 과목을 만났을 때마다 선수강 과목이 필요없는 강의를 큐에 집어넣는다.\n어찌저찌 구현은 했지만 위상정렬을 이용하는게 훨씬 깔끔하다."),"\n",r.createElement(n.h4,{id:"complexity",style:{position:"relative"}},r.createElement(n.a,{href:"#complexity","aria-label":"complexity permalink",className:"header-links before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"time complexity:"),"\n",r.createElement(n.li,null,"space complexity:"),"\n"),"\n",r.createElement(n.h4,{id:"code",style:{position:"relative"}},r.createElement(n.a,{href:"#code","aria-label":"code permalink",className:"header-links before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"from collections import deque\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        visited = [False for _ in range(numCourses)]        \n        graph = [[[], []] for _ in range(numCourses)]\n        root = []\n        answer = []\n\n        for c, r in prerequisites:\n            graph[r][0].append(c)\n            graph[c][1].append(r)\n        \n        for i, v in enumerate(graph):\n            if len(v[1]) == 0:\n                root.append(i)\n\n        while root:\n            r = root.pop()\n            q = deque([r])\n            visited[r] = True\n            answer.append(r)\n\n            while q:\n                node = q.popleft()\n                \n                for adj in graph[node][0]:\n                    next = adj\n                    if not visited[adj]:\n                        can_course = True\n                        for k in graph[adj][1]:\n                            if not visited[k]:\n                                can_course = False\n                        if not can_course:\n                            if root:\n                                next = root.pop()\n                            else:\n                                continue\n                        q.append(next)\n                        visited[next] = True\n                        answer.append(next)\n        \n        for v in visited:\n            if not v:\n                return []\n        return answer\n")),"\n",r.createElement(n.h2,{id:"approach---graph-topological-sort-위상-정렬",style:{position:"relative"}},r.createElement(n.a,{href:"#approach---graph-topological-sort-%EC%9C%84%EC%83%81-%EC%A0%95%EB%A0%AC","aria-label":"approach   graph topological sort 위상 정렬 permalink",className:"header-links before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Graph: Topological Sort (위상 정렬)"),"\n",r.createElement(n.p,null,"역시 Course-Schedule 1 문제와 동일하게 위상 정렬을 이용해 풀이했고 거기에 수강하는 순서만 배열에 담아주었다."),"\n",r.createElement(n.h4,{id:"complexity-1",style:{position:"relative"}},r.createElement(n.a,{href:"#complexity-1","aria-label":"complexity 1 permalink",className:"header-links before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"time complexity:"),"\n",r.createElement(n.li,null,"space complexity:"),"\n"),"\n",r.createElement(n.h4,{id:"code-1",style:{position:"relative"}},r.createElement(n.a,{href:"#code-1","aria-label":"code 1 permalink",className:"header-links before"},r.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-python"},"from collections import deque\n\nclass Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = [[] for _ in range(numCourses)]\n        visited = [False for _ in range(numCourses)]\n        topology = [0 for _ in range(numCourses)]\n        answer = []\n\n        for a, b in prerequisites:\n            graph[b].append(a)\n            topology[a] += 1\n\n        root = deque([])\n        for i, v in enumerate(topology):\n            if v == 0:\n                root.append(i)\n                visited[i] = True\n\n        while root:\n            node = root.popleft()\n            answer.append(node)\n            \n            for adj in graph[node]:\n                topology[adj] -= 1\n                if topology[adj] == 0 and not visited[adj]:\n                    root.append(adj)\n                    visited[adj] = True\n        \n        for v in visited:\n            if not v:\n                return []\n\n        return answer\n")))}var i=function(e={}){const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)},o=t(5670),c=t(1326),s=t(4517),d=t(698),h=t(8627),p=t(662),u=t(1873);const m=({data:e,children:n,serverData:t})=>{const{prevPost:l,nextPost:a}=e,i={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return r.createElement(d.Z,{data:e},r.createElement(o.Z,null,r.createElement(s.Z,i),r.createElement(c.Z,null,n),r.createElement(p.Z,{prev:l,next:a}),r.createElement(h.Z)))};function v(e){return r.createElement(m,e,r.createElement(i,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-algorithm-210-course-schedule-ii-md-50b5e6d22cf14e6518cf.js.map