{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-운영체제-운영체제-06-동기화도구들-md-737d39b598811b6ec2a7.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/운영체제/운영체제06-동기화도구들.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    h5: \"h5\",\n    code: \"code\",\n    pre: \"pre\",\n    em: \"em\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"6-동기화-도구들\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#6-%EB%8F%99%EA%B8%B0%ED%99%94-%EB%8F%84%EA%B5%AC%EB%93%A4\",\n    \"aria-label\": \"6 동기화 도구들 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6. 동기화 도구들\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"이 장의 목표\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"critical section (임계영역) 문제를 정의하고 Race Condition (경쟁 조건)을 설명한다.\"), \"\\n\", React.createElement(_components.li, null, \"메모리 장벽, compare-and-swap 연산 및 Atomic 변수를 사용하여 critical section 문제에 대한 하드웨어적 해결책을\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"61-배경\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#61-%EB%B0%B0%EA%B2%BD\",\n    \"aria-label\": \"61 배경 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.1 배경\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"-연산의-예시\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#-%EC%97%B0%EC%82%B0%EC%9D%98-%EC%98%88%EC%8B%9C\",\n    \"aria-label\": \" 연산의 예시 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"++ 연산의 예시\"), \"\\n\", React.createElement(_components.p, null, \"다음과 같은 instruction \", React.createElement(_components.code, null, \"count++\"), \" 은 겉보기엔 나눌 수 없는 단위의 연산같아 보인다. 하지만 이를 기계어로 interprete한다면 다음과 같이 구현된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"register1 = count\\nregister1 = register1 + 1\\ncount = register\\n\")), \"\\n\", React.createElement(_components.p, null, \"쪼갤 수 없는 연산 같았던 \", React.createElement(_components.code, null, \"++\"), \" 도 기계어로 따지자면 3단위로 나눌 수 있다. 따라서 서로 다른 두 프로세스가 공유 변수에 대해 concurrent하게 (병렬적으로) \", React.createElement(_components.code, null, \"++\"), \" 연산을 시행한다면, \", React.createElement(_components.code, null, \"++\"), \" 도중에 Context Switching이 일어날 수 있으므로 데이터의 inconsistency가 발생하게 된다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"fork의-예시\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#fork%EC%9D%98-%EC%98%88%EC%8B%9C\",\n    \"aria-label\": \"fork의 예시 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"fork()의 예시\"), \"\\n\", React.createElement(_components.p, null, \"서로 다른 두 프로세스가 concurrency한 상황에서, \", React.createElement(_components.code, null, \"fork()\"), \"을 호출한다고 가정하자.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"fork()\"), \" 시스템 콜은 자식프로세스를 생성하고, 생성된 프로세스의 프로세스 식별자 (pid)를 부모 프로세스로 반환한다. 프로세스 식별자를 생성된 프로세스에 할당할 때 이용되는 공유 변수인 \", React.createElement(_components.em, null, \"next_available_pid\"), \"가 존재하며, 이 때 이 변수에 대해 race condition이 발생한다.\"), \"\\n\", React.createElement(_components.p, null, \"상호 배제 (Mutex; Mutual Exclusion)이 보장되지 않는다면 \", React.createElement(_components.em, null, \"next_available_pid\"), \"를 확인하는 순간 context switching이 일어나 동일한 프로세스 식별자가 서로 다른 두 프로세스에 할당될 수도 있다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"611-race-condition-경쟁상황\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#611-race-condition-%EA%B2%BD%EC%9F%81%EC%83%81%ED%99%A9\",\n    \"aria-label\": \"611 race condition 경쟁상황 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.1.1 Race Condition (경쟁상황)\"), \"\\n\", React.createElement(_components.p, null, \"위와 같이, 동시에 여러 개의 프로세스가 동일한 자료를 접근하여 조작하고, 그 실행의 결과가 논리적으로 동일하지 않고 접근이 발생한 특정 순서에 의존하여 달라지는 상황을 \", React.createElement(_components.strong, null, \"Race Condition\"), \"이라고 한다. (= 접근 순서에 따라 inconsistency가 일어나는 상황)\"), \"\\n\", React.createElement(_components.p, null, \"Race Condition을 회피하기 위해, 우리는 어떤 형태로든 프로세스들이 synchronized (동기화) 되도록 할 필요가 있다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"62-critical-section-problem-임계구역-문제\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#62-critical-section-problem-%EC%9E%84%EA%B3%84%EA%B5%AC%EC%97%AD-%EB%AC%B8%EC%A0%9C\",\n    \"aria-label\": \"62 critical section problem 임계구역 문제 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.2 Critical Section Problem (임계구역 문제)\"), \"\\n\", React.createElement(_components.p, null, \"6.1.1에서 정의한 Race Condition을 피하기 위해 프로세스들을 Sychronize 시킬 필요가 있다고 했다. 모든 프로세스 동기화에 대한 논의는 Critical-Section Problem이라 불리는 문제로부터 시작한다. Critical-Section Problem은 코드영역을 4가지로 나눈다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"entry-section-진입-구역\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#entry-section-%EC%A7%84%EC%9E%85-%EA%B5%AC%EC%97%AD\",\n    \"aria-label\": \"entry section 진입 구역 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Entry-Section (진입 구역)\"), \"\\n\", React.createElement(_components.p, null, \"각 프로세스는 Critical-Section으로 진입하기 위해 진입 허가를 먼저 요청해야한다. 이러한 요청을 구현하는 부분이다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"critical-section-임계-영역\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#critical-section-%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD\",\n    \"aria-label\": \"critical section 임계 영역 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Critical-Section (임계 영역)\"), \"\\n\", React.createElement(_components.p, null, \"Cooperative process들이 공유변수를 다루는 영역이다. 임계영역에 진입했을 경우, 다른 프로세스들은 그들의 Critical-Section에 진입해서는 안된다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"exit-section-퇴출-구역\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#exit-section-%ED%87%B4%EC%B6%9C-%EA%B5%AC%EC%97%AD\",\n    \"aria-label\": \"exit section 퇴출 구역 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Exit-Section (퇴출 구역)\"), \"\\n\", React.createElement(_components.p, null, \"Critical-Section을 탈출했기에 이제 다른 프로세스가 코어를 선점해도 괜찮다는 신호를 보내야한다. Entry-Section에서 획득한 permission을 반납하는 요청을 구현한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"remainder-section-나머지-구역\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#remainder-section-%EB%82%98%EB%A8%B8%EC%A7%80-%EA%B5%AC%EC%97%AD\",\n    \"aria-label\": \"remainder section 나머지 구역 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Remainder-Section (나머지 구역)\"), \"\\n\", React.createElement(_components.p, null, \"위 세 구역을 제외한, context switch 당해도 괜찮은 = 공유 변수에 접근/조작하지 않는 구역을 의미한다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"621-critical-section-problem을-해결하기-위한-3가지-요구사항\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#621-critical-section-problem%EC%9D%84-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-3%EA%B0%80%EC%A7%80-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD\",\n    \"aria-label\": \"621 critical section problem을 해결하기 위한 3가지 요구사항 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.2.1 Critical-Section Problem을 해결하기 위한 3가지 요구사항\"), \"\\n\", React.createElement(_components.p, null, \"임계영역 문제를 완벽히 해결하기 위해서는 다음 3가지 조건이 요구된다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"6211-mutex-mutual-exclusion-상호-배제---서로-동시에-임계영역에-진입하지-말-것\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#6211-mutex-mutual-exclusion-%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C---%EC%84%9C%EB%A1%9C-%EB%8F%99%EC%8B%9C%EC%97%90-%EC%9E%84%EA%B3%84%EC%98%81%EC%97%AD%EC%97%90-%EC%A7%84%EC%9E%85%ED%95%98%EC%A7%80-%EB%A7%90-%EA%B2%83\",\n    \"aria-label\": \"6211 mutex mutual exclusion 상호 배제   서로 동시에 임계영역에 진입하지 말 것 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.2.1.1 Mutex; Mutual-Exclusion (상호 배제) - 서로 동시에 임계영역에 진입하지 말 것\"), \"\\n\", React.createElement(_components.p, null, \"어떠한 프로세스 Pi가 자신의 Critical-Section에서 CPU를 점유했다면, \", React.createElement(_components.em, null, \"다른 프로세스들은 그들 자신의 Critical-Section에 진입할 수 없다!\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Critical-Section에 진입했다고 해서 context switching이 아예 막힌 것은 아니다! 다른 프로세스의 Remainder-Section으로의 진입은 가능하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"임계영역 문제를 해결하기 위한 가장 기본적인 조건이다. 그런데, Mutex를 구현하고 나면 항상 다음 두 문제인 Deadlock과 Starvation이 따라온다..!\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"6212-progress-진행---deadlock을-회피하자\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#6212-progress-%EC%A7%84%ED%96%89---deadlock%EC%9D%84-%ED%9A%8C%ED%94%BC%ED%95%98%EC%9E%90\",\n    \"aria-label\": \"6212 progress 진행   deadlock을 회피하자 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.2.1.2 Progress (진행) - Deadlock을 회피하자\"), \"\\n\", React.createElement(_components.p, null, \"현재 Critical-Section에 진입한 프로세스가 없고 Entry-Section에 있는 프로세스만 있다고 가정하자. 다음으로 누가 Critical Section에 진입할 것인지 결정하는데 참여할 수 있는 프로세스는 Remainder-Section에서 실행중이지 않은 프로세스들 (= Entry 혹은 Critical 혹은 Exit-Section에 있는 프로세스들만)뿐이다. 이 선택은 무한정 연기되어선 (Deadlock) 안되며, progressive 해야한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"6213-bounded-waiting-한정-대기---starvation을-회피하자\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#6213-bounded-waiting-%ED%95%9C%EC%A0%95-%EB%8C%80%EA%B8%B0---starvation%EC%9D%84-%ED%9A%8C%ED%94%BC%ED%95%98%EC%9E%90\",\n    \"aria-label\": \"6213 bounded waiting 한정 대기   starvation을 회피하자 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.2.1.3 Bounded waiting (한정 대기) - Starvation을 회피하자\"), \"\\n\", React.createElement(_components.p, null, \"프로세스가 Entry-Section에서 permission을 요청한 후로부터 그 요청이 획득될 때까지 다른 프로세스들이 자신의 Critical-Section에 진입하는 횟수에는 제한이 있어야 한다. 즉, 우선순위의 문제 때문에 영원히 임계영역으로 진입을 요청만 하고 매번 다른 프로세스에게 기회를 뺏기는 일은 없어야 한다. (기다리는 시간이 길어질 수록 우선순위를 높여준다.)\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"622-multi-core-환경에서의-어려움\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#622-multi-core-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-%EC%96%B4%EB%A0%A4%EC%9B%80\",\n    \"aria-label\": \"622 multi core 환경에서의 어려움 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.2.2 Multi-Core 환경에서의 어려움\"), \"\\n\", React.createElement(_components.p, null, \"Single-Core 환경을 가정한다면 Critical-Section 문제 해결을 가볍게 해결할 수 있다. Shared Variable을 수정하는 동안 (= 임계영역에 있는 동안) interrupt가 발생하는 것을 막으면 된다.\"), \"\\n\", React.createElement(_components.p, null, \"Multi-processor 환경에서는 실행하기 굉장히 어려워진다. 코어 별로 임계영역에 진입했을 시 interrupt를 죄다 막아버려야 하는데, 이렇게 되면 시스템의 성능이 굉장히 떨어진다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"63-peterson의-해결안\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#63-peterson%EC%9D%98-%ED%95%B4%EA%B2%B0%EC%95%88\",\n    \"aria-label\": \"63 peterson의 해결안 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.3 Peterson의 해결안\"), \"\\n\", React.createElement(_components.p, null, \"Peterson의 알고리즘은 고전적인 소프트웨어 기반 해결책 중 Critical-Section 문제를 가장 올바르게 다뤘다.\"), \"\\n\", React.createElement(_components.p, null, \"다만, classic한 소프트웨어와 현대 컴퓨터 구조가 \", React.createElement(_components.code, null, \"load\"), \"와 \", React.createElement(_components.code, null, \"store\"), \"와 같은 기본적인 기계어를 수행하는 방식이 다르기 때문에, 현대 컴퓨터구조에서도 올바르게 실행된다고 보장할 수는 없다.\"), \"\\n\", React.createElement(_components.p, null, \"Peterson의 해결안은 Critical-Section과 Remainder-Section을 번갈아가며 실행하는 두 개의 프로세스를 가정한다. 프로세스는 P0과 P1로 번호를 매긴다. Peterson 해결안의 두 프로세스는 다음 두 변수를 공유하게 된다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"631-petersons-solution이-공유하는-두-변수\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#631-petersons-solution%EC%9D%B4-%EA%B3%B5%EC%9C%A0%ED%95%98%EB%8A%94-%EB%91%90-%EB%B3%80%EC%88%98\",\n    \"aria-label\": \"631 petersons solution이 공유하는 두 변수 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.3.1 Peterson’s Solution이 공유하는 두 변수\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"int turn;\\nboolean flag[2];\\n\")), \"\\n\", React.createElement(_components.h5, {\n    id: \"turn\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#turn\",\n    \"aria-label\": \"turn permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"turn\"), \"\\n\", React.createElement(_components.p, null, \"Critical-Section으로 진입할 차례를 나타낸다. \", React.createElement(_components.code, null, \"turn == 0\"), \"일 경우 P0이 Critical-Section을 실행할 수 있다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"flag\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#flag\",\n    \"aria-label\": \"flag permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"flag\"), \"\\n\", React.createElement(_components.p, null, \"프로세스가 Critical-Section으로 진입할 준비가 되었다는 것을 나타낸다. \", React.createElement(_components.code, null, \"flag[0]\"), \"이 \", React.createElement(_components.code, null, \"true\"), \"라면 P0이 임계구역으로 진입할 준비가 되었다는 뜻이다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"632-petersons-solution\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#632-petersons-solution\",\n    \"aria-label\": \"632 petersons solution permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.3.2 Peterson’s Solution\"), \"\\n\", React.createElement(_components.p, null, \"Pi의 코드 구현이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"while (true) {\\n  flag[i] = true;\\n  turn = ;\\n  while (flag[j] && turn == j) {};\\n  /* \\n    임계영역의 코드들 \\n  */\\n  flag[i] = false;\\n  \\n  /* \\n  \\tRemainder-Section\\n  */\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Pi은 \", React.createElement(_components.code, null, \"flag[j] == false\"), \" 이거나 \", React.createElement(_components.code, null, \"turn == i\"), \"일 때 임계영역에 진입할 수 있다. P0과 P1은 동시에 while 문을 지나칠 수 없으며, 어느 하나가 while문을 지나 Critical-Section에 진입했다면 다른 하나는 while 문의 공회전에 걸린 채, Critical-Section에 진입한 프로세스가 자신의 flag를 false로 설정해줄 때까지 기다려야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"이와 같이 Peterson의 해결책은 Critical-Section 문제의 요구사항 3가지인 Mutex, Progress, Bounded-waiting을 모두 만족한다. 또한, 가정은 2개의 프로세스이지만 n개의 프로세스로도 확장할 수 있다. 하지만 한계가 있었으니…\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"633-petersons-solution의-한계\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#633-petersons-solution%EC%9D%98-%ED%95%9C%EA%B3%84\",\n    \"aria-label\": \"633 petersons solution의 한계 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.3.3 Peterson’s Solution의 한계\"), \"\\n\", React.createElement(_components.p, null, \"위에서 언급했듯이 현대 컴퓨터 구조에서는 항상 동기화가 이루어질 것이라고 보장할 수 없다. \", React.createElement(_components.code, null, \"load\"), \"와 \", React.createElement(_components.code, null, \"store\"), \"의 기계어 레벨로 쪼개게 된다면 임계영역에 진입하기 위한 조건문인 \", React.createElement(_components.code, null, \"while\"), \" 구문 역시 하나의 Atomic한 (원자적인) instruction이 아니기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"Entry Section에서 while문의 조건인 \", React.createElement(_components.code, null, \"while(flag[j] && turn == j)\"), \"을 실행하는데, 앞 부분까지만 실행하고 중간에 context switching이 일어난다면? 피터슨의 해결안도 동기화에 실패하게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"그럼에도 Peterson의 해결안을 공부하는 이유는 개념적으로 완벽하며, CSP의 세가지 요구사항을 모두 증명가능하게 구현해내기 때문이다. 실제 상황에서 기계어로 실행되다보니 보장이 안될 뿐, 고수준 언어에서 ‘개념적으로’ 생각할 경우 보장되는 일이다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"64-동기화를-위한-hardware-support\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#64-%EB%8F%99%EA%B8%B0%ED%99%94%EB%A5%BC-%EC%9C%84%ED%95%9C-hardware-support\",\n    \"aria-label\": \"64 동기화를 위한 hardware support permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.4 동기화를 위한 Hardware Support\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.h5, {\n    id: \"software-기반-해결책과-hardware-기반-해결책\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#software-%EA%B8%B0%EB%B0%98-%ED%95%B4%EA%B2%B0%EC%B1%85%EA%B3%BC-hardware-%EA%B8%B0%EB%B0%98-%ED%95%B4%EA%B2%B0%EC%B1%85\",\n    \"aria-label\": \"software 기반 해결책과 hardware 기반 해결책 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Software 기반 해결책과 Hardware 기반 해결책\"), \"\\n\", React.createElement(_components.p, null, \"위의 피터슨 해결책과 같이 \", React.createElement(_components.em, null, \"알고리즘만으로 해결하고자 하는 접근법\"), \"을 Software 기반 해결책이라 한다. 피터슨 알고리즘은 OS 혹은 하드웨어 명령어의 지원을 받지 않고 순수히 알고리즘만으로 Mutex를 구현했다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 6.3.3과 같이 소프트웨어 기반 해결책은 최신 컴퓨터 구조에서 100% 보장되지 않을 수 있다. 따라서 이를 위한 Hardware 레벨의 명령어를 지원한다. 이러한 명령어를 통해 더 추상적인 동기화가 가능하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"641-memory-barrier-메모리-장벽\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#641-memory-barrier-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%9E%A5%EB%B2%BD\",\n    \"aria-label\": \"641 memory barrier 메모리 장벽 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.4.1 Memory Barrier (메모리 장벽)\"), \"\\n\", React.createElement(_components.p, null, \"6.3절에서 시스템은 명령어의 순서를 재정렬할 수 있다는 것과 이러한 정책이 신뢰할 수 없는 데이터 상태로 이어질 수 있다는 것을 보았다. (책 참고) 이러한 순서를 보장하기 위해 \", React.createElement(_components.code, null, \"memory_barrier()\"), \" 명령어를 지원한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"while (!flag)\\n  memory_barrier();\\nprint(x);\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"flag\"), \" 값이 \", React.createElement(_components.code, null, \"x\"), \" 값보다 먼저 적재될 것을 보장한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"x = 100;\\nmemory_barrier();\\nflag = true;\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"x\"), \" 값이 \", React.createElement(_components.code, null, \"flag\"), \" 값보다 먼저 배정될 것을 보장한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Memory Barrier는 매우 저수준의 연산이며, 일반적으로 Mutex를 보장하는 코드를 개발하는 커널 개발자만 사용하므로 넘어가자..!\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"642-hardware-instructions-하드웨어-명령어들\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#642-hardware-instructions-%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%93%A4\",\n    \"aria-label\": \"642 hardware instructions 하드웨어 명령어들 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.4.2 Hardware Instructions (하드웨어 명령어들)\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"++\"), \"나 두 변수를 swap하는 연산들은 고수준 언어 구현만 보면 Atomic한 명령어 같지만 기계어 수준으로 내려가면 이들은 1개 이상의 연산이 합쳐진 복합적인 명령어로, 중간에 context switching이 일어난다면 데이터의 일관성을 보장할 수 없게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"따라서 많은 현대 기계들은 이러한 연산들을 하나로 묶어 Atomic한 실행을 보장하는 하드웨어 명령어들을 제공한다. \", React.createElement(_components.code, null, \"test_and_set()\"), \", \", React.createElement(_components.code, null, \"compare_and_swap()\"), \"과 같은 명령어들은 interrupt되지 않은 하나의 단위로서 제공된다. 이들을 조건으로 Critical-Section에 진입하면 보다 간단하게 임계영역 문제를 해결할 수 있다. (적어도 Mutex는 보장하므로)\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"하지만 일반적으로 하드웨어 명령어들도 응용 레벨에서는 직접 사용되지는 않는다.\"), \" 그럼 왜 배우냐? 응용 레벨에서 이용할 수 있는 Critical-Section 문제를 다루는 도구인 Atomic Variable을 구현하는데 이용되는 기본적인 요소이기 때문이다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"643-atomic-variable\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#643-atomic-variable\",\n    \"aria-label\": \"643 atomic variable permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.4.3 Atomic Variable\"), \"\\n\", React.createElement(_components.p, null, \"Atomic Variable은 단일 변수에 대한 race condition이 발생할 수 있는 상황에서 Mutex를 보장하는데 이용되는 특수한 변수이다. Atomic Variable의 내부 구현은 \", React.createElement(_components.code, null, \"compare_and_swap()\"), \"이나 \", React.createElement(_components.code, null, \"test_and_set()\"), \" 등의 hardware instruction을 이용해 구현되어있다.\"), \"\\n\", React.createElement(_components.p, null, \"Atomic Variable은 ‘원자적 갱신’은 제공하지만 모든 상황에서 Race Condition을 완벽히 해결하지는 않는다. 응용레벨에서도 일반적으로 사용되지만 공유 데이터 한 개의 ‘갱신’에만 제한되는 경우가 많다. 따라서 보다 일반적인 상황에서 Race Condition을 해결하는 더 강력한 도구가 필요하다…\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"65-mutex-locks\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#65-mutex-locks\",\n    \"aria-label\": \"65 mutex locks permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.5 Mutex Locks\"), \"\\n\", React.createElement(_components.p, null, \"6.4의 Hardware Instruction이 Atomic한 명령어를 제공해줬다. 그래도 매번 Critical-Section에 진입하는 코드 (Entry-Section)는 해당 명령어들을 기반으로 \", React.createElement(_components.strong, null, \"직접 구현\"), \"해야했다. (특정 조건 하에서 진입할 수 있도록)\"), \"\\n\", React.createElement(_components.p, null, \"Mutex Lock은 Critical-Section으로의 진입 / 탈출을 추상화한 명령어를 제공한다. Entry-Section과 Exit-Section을 직접 구현할 필요 없이 \", React.createElement(_components.code, null, \"acquire()\"), \", \", React.createElement(_components.code, null, \"release()\"), \" 메서드를 이용해 진입/탈출 구간을 정의하면 된다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"651-mutex-lock이-제공하는-메서드들\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#651-mutex-lock%EC%9D%B4-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C%EB%93%A4\",\n    \"aria-label\": \"651 mutex lock이 제공하는 메서드들 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.5.1 Mutex Lock이 제공하는 메서드들\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"acquire()\"), \"와 \", React.createElement(_components.code, null, \"release()\"), \" 함수 호출은 원자적으로 수행되어야 한다. 따라서 mutex 락은 6.4절의 CAS를 사용하여 구현된다. Mutex 락은 \", React.createElement(_components.code, null, \"available\"), \"이라는 boolean  변수를 이용해 ‘락’의 가용 여부를 표시한다. \", React.createElement(_components.code, null, \"available\"), \"이 true일 경우 락을 획득할 수 있고, 그 반대일 경우는 락을 획득하기 위해 기다려야 한다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"6511-acquire\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#6511-acquire\",\n    \"aria-label\": \"6511 acquire permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.5.1.1 acquire()\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"acquire() {\\n  while (!available) {};\\n  /* busy waiting */ \\n  available = false;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"락을 획득하는 메서드이다. 임계영역에 진입했음을 알리며, 어떤 프로세스가 \", React.createElement(_components.code, null, \"acquire()\"), \"를 호출하여 락을 획득할 경우 다른 프로세스는 락을 획득할 수 없다, 즉 그 자신의 임계영역에 진입할 수 없다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"6512-release\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#6512-release\",\n    \"aria-label\": \"6512 release permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.5.1.2 release()\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"release() {\\n  available = true;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"락을 반납하는 메서드이다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"652-busy-waiting은-꼭-나쁜가\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#652-busy-waiting%EC%9D%80-%EA%BC%AD-%EB%82%98%EC%81%9C%EA%B0%80\",\n    \"aria-label\": \"652 busy waiting은 꼭 나쁜가 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.5.2 Busy Waiting은 꼭 나쁜가?\"), \"\\n\", React.createElement(_components.p, null, \"Mutex 락의 구현을 보면 \", React.createElement(_components.code, null, \"acquire()\"), \"를 이용해 락을 획득하기 위해 while loop을 계속해서 호출하게 된다. 이를 \", React.createElement(_components.strong, null, \"busy waiting\"), \" 상태라 부르며, 락을 획득할 수 있을때까지 프로세스가 \", React.createElement(_components.em, null, \"공회전하며\"), \" 기다리기 때문에 Mutex 락을 \", React.createElement(_components.strong, null, \"스핀락\"), \"이라 부르기도 한다.\"), \"\\n\", React.createElement(_components.p, null, \"busy waiting은 확실히 여러 프로세스가 하나의 CPU 코어를 time sharing하며 concurrent하게 실행되는 상태에서는 낭비이다. 다른 프로세스가 생산적으로 사용할 수 있는 CPU 주기를 낭비하고 의미 없는 while loop을 도는데 이용하기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"그러나 멀티 프로세서 환경에서 놀고 있는 CPU가 여러 대 있다면? 아무거나 선점해서 busy waiting하고 있다가 lock이 풀리면 바로 진입할 수 있다. 특히 락이 짧은 시간 동안 유지될 경우 멀티 코어 시스템에서는 스핀락을 선호한다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"얼마나 짧아야 하는가?\")), \"\\n\", React.createElement(_components.p, null, \"스핀락을 사용하지 않을 경우 ready queue에 대기하고 있다가 락을 획득할 수 있는 시점에 CPU를 점유하게 된다. 이 경우 context switching이 2번 일어나게 된다. 첫 번째는 쓰레드를 waiting queue로 옮기기 위한 context switching이고, 두번째는 락을 획득할 수 있을 때 ready queue에서 CPU로 올리기 위한 context switching이다. 락이 지속되는 시간이 이 dispatch latency 시간보다 짧을 경우 스핀락을 사용하게 된다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"66-semaphore\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#66-semaphore\",\n    \"aria-label\": \"66 semaphore permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.6 Semaphore\"), \"\\n\", React.createElement(_components.p, null, \"세마포어는 기찻길에 있는 신호기를 뜻한다. 진입해도 되는지 알려주는 신호기, 세마포어를 통해 CSP를 해결해보자.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"661-고전적인-semaphore\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#661-%EA%B3%A0%EC%A0%84%EC%A0%81%EC%9D%B8-semaphore\",\n    \"aria-label\": \"661 고전적인 semaphore permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.6.1 고전적인 Semaphore\"), \"\\n\", React.createElement(_components.p, null, \"세마포어를 뜻하는 변수 S는 정수 변수이다. 세마포어 S는 초기화한 이후에는 두 개의 Atomic한 연산 메서드인 \", React.createElement(_components.code, null, \"wait()\"), \"과 \", React.createElement(_components.code, null, \"signal()\"), \"을 통해서만 접근할 수 있다. 두 메서드는 반드시 원자적으로 수행되어야 한다. S가 0이 되었을 경우 모든 쓰레드는 대기하게 되고, signal을 통해 세마포어를 반납하며 1씩 증가시킨다.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"wait\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#wait\",\n    \"aria-label\": \"wait permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"wait()\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"wait(S) {\\n  while (S <= 0) \\n    ; // busy waiting\\n  S--; \\n}\\n\")), \"\\n\", React.createElement(_components.h5, {\n    id: \"signal\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#signal\",\n    \"aria-label\": \"signal permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"signal()\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-java\"\n  }, \"signal(S) {\\n  S++;\\n}\\n\")), \"\\n\", React.createElement(_components.h4, {\n    id: \"6612-binary-semaphore-이진-세마포어\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#6612-binary-semaphore-%EC%9D%B4%EC%A7%84-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\",\n    \"aria-label\": \"6612 binary semaphore 이진 세마포어 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.6.1.2 Binary Semaphore (이진 세마포어)\"), \"\\n\", React.createElement(_components.p, null, \"정수 변수인 세마포어 S가 0 혹은 1의 값을 가지는 세마포어를 뜻한다. 하나의 쓰레드만 Critial Section으로 진입을 할 수 있으며, 진입을 대기하는 쓰레드의 경우 busy waiting을 수행하기 때문에 \", React.createElement(_components.strong, null, \"사실상 Mutex 락과 동일하다.\"), \" 실제로 몇몇 시스템에서는 Mutex를 제공하기 위해 Mutex락 대신 이진 세마포어를 이용한다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"6613-counting-semaphore\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#6613-counting-semaphore\",\n    \"aria-label\": \"6613 counting semaphore permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.6.1.3 Counting Semaphore\"), \"\\n\", React.createElement(_components.p, null, \"세마포어 S가 2 이상의 값을 가진, 제한 없는 domain을 가지는 세마포어를 뜻한다. 만약 Counting 세마포어를 이용할 때 n개의 쓰레드가 n개 미만의 공유변수에 접근한다면 Critical-Section 문제를 동일하게 겪게 될 것이다. 예를들어, \", React.createElement(_components.code, null, \"S = 5\"), \"인 세마포어를 이용해 5개의 쓰레드가 동일한 \", React.createElement(_components.code, null, \"sum\"), \" 변수를 for 문으로 10,000까지 증가시킨다면? CSP 때문에 50,000까지 도달하지 못할 것이다.\"), \"\\n\", React.createElement(_components.p, null, \"이처럼 Counting Semaphore를 이용해 동기화 문제를 해결하고자 한다면 접근하는 공유 변수 역시 S와 동일한 개수여야 한다. 접근하고자 하는 sum 변수가 5개라면 각 10,000씩 올바르게 더해져있을 것.\"), \"\\n\", React.createElement(_components.p, null, \"Counting 세마포어는 주로 유한한 개수를 지닌 자원에 대한 접근을 제어하고자 할 때 이용된다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"662-semaphore-구현\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#662-semaphore-%EA%B5%AC%ED%98%84\",\n    \"aria-label\": \"662 semaphore 구현 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.6.2 Semaphore 구현\"), \"\\n\", React.createElement(_components.p, null, \"위의 고전적인 세마포는 S를 정수 변수로 두었고, busy waiting을 이용해 \", React.createElement(_components.code, null, \"wait()\"), \"을 수행한다. 이번 구현에서는 busy waiting 대신, 세마포어를 대기하는 상황에서는 프로세스 자신을 waiting queue에 삽입하고, 세마포어를 이용할 준비가 되었을 때 waiting queue에서 꺼내 ready queue로 이동하는 방식을 택해보자.\"), \"\\n\", React.createElement(_components.h5, {\n    id: \"semaphore\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#semaphore\",\n    \"aria-label\": \"semaphore permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"semaphore\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-C++\"\n  }, \"typedef struct {\\n  int value;\\n  struct process *list;\\n} semaphore;\\n\")), \"\\n\", React.createElement(_components.h5, {\n    id: \"wait-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#wait-1\",\n    \"aria-label\": \"wait 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"wait()\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"wait(semaphore *S) {\\n  S->value++;\\n  if (S->value < 0) {\\n    add this process to S->list; // pseudo code\\n    sleep();\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.h5, {\n    id: \"signal-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#signal-1\",\n    \"aria-label\": \"signal 1 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"signal()\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-c++\"\n  }, \"signal(semaphore *S) {\\n  S->value--;\\n  if (S->value <= 0) {\\n    remove a process P from S->list; // pseudo code\\n    wakeup(P);\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"sleep()\"), \" 연산은 자기를 호출한 프로세스를 일시 중지시킨다. \", React.createElement(_components.code, null, \"wakeup(P)\"), \" 연산은 일시중지된 프로세스 \", React.createElement(_components.code, null, \"P\"), \" 를 재개시킨다. 이 두 연산은 OS의 기본적인 시스템 콜로 제공된다.\"), \"\\n\", React.createElement(_components.p, null, \"busy waiting을 수행하는 고전적인 세마포의 경우 S값에 대해 음수를 허용하지 않지만, 6.6.2의 구현은 고전적인 세마포의 값 검사와 값 감소의 순서를 바꾸었으므로 음수를 허용한다. 세마포어가 0일 경우에 임계구역에 접근할 수 있으며, 0 이하의 음수일 경우 접근하지 못한다. S의 절대값은 세마포를 대기하고 있는 프로세스들의 수이다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"67-monitor\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#67-monitor\",\n    \"aria-label\": \"67 monitor permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.7 Monitor\"), \"\\n\", React.createElement(_components.p, null, \"세마포어와 뮤텍스 락이 동기화를 위해 편리하고 효과적으로 쓰일 수 있지만, 이는 발견하기 힘든 timing 에러를 야기하기도 한다. 프로그래머가 악의적으로 이용하건 초보 프로그래머가 실수로 잘못 이용하건 메서드들을 적확한 순서로 이용하지 않는다면 발견하기 힘든 치명적인 동기화 오류를 야기한다. 뮤텍스를 써도, 세마포어를 써도 Timing Error는 여전히 발생할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"보다 고수준의 락을 걸 수있는 방식인 Monitor 기법을 알아보자.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"671-모니터-adt\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#671-%EB%AA%A8%EB%8B%88%ED%84%B0-adt\",\n    \"aria-label\": \"671 모니터 adt permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.7.1 모니터 ADT\"), \"\\n\", React.createElement(_components.p, null, \"모니터 type은 모니터 내부에서 Mutex가 보장되는, 프로그래머가 정의한 일련의 연산자 집합을 포함하는 ADT이다. 모니터 type은 변수들의 선언을 포함하고 있는데, 이 변수들의 값은 그 type에 해당하는 한 인스턴스의 상태를 정의한다.\"), \"\\n\", React.createElement(_components.p, null, \"모니터 형의 표현은 다른 프로세스들이 직접 사용할 수 없다. 따라서 모니터 내에 정의된 함수만이 오직 모니터 내에 지역적으로 선언된 변수들과 형식 매개변수들에만 접근할 수 있다. 마찬가지로 모니토 내의 지역 변수는 오직 지역 함수만이 접근할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"모니터 structure는 모니터 안에 항상 하나의 프로세스만이 활성화 되도록 보장해준다. 프로그래머들은 이와 같은 동기화 제약조건을 명시적으로 코딩할 필요가 없다.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"672-java의-동기화-monitor-lock\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#672-java%EC%9D%98-%EB%8F%99%EA%B8%B0%ED%99%94-monitor-lock\",\n    \"aria-label\": \"672 java의 동기화 monitor lock permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"6.7.2 Java의 동기화, Monitor-Lock\"), \"\\n\", React.createElement(_components.p, null, \"자바가 충실하게 Monitor를 따르고 있다. 따라서 Java의 동기화를 이해한다면 Monitor를 이해했다고 볼 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"Java에서는 Monitor와 유사한 Monitor-Lock, 혹은 Intrinsic-Lock (본질적 락)을 제공한다. (세마포어보다는 본질적이므로 Intrinsic-Lock이라 부른다.)\"), \"\\n\", React.createElement(_components.p, null, \"Java는 기본적인 실행단위가 프로세스가 아니라 쓰레드였다. 따라서 쓰레드 동기화를 위한 concurrency 메커니즘이 Monitor-Lock이다.\"), \"\\n\", React.createElement(_components.p, null, \"이번까지는 임계영역에 진입하는 것을 암시적으로 선언했다. 세마포어 혹은 뮤텍스를 이용해서 들어갔지만, 이는 암시적인 진입. Java에서는 임계영역에 대한 코드블록을 명시적으로 선언한다.\"), \"\\n\", React.createElement(_components.p, null, \"해당 코드 블록에는 Monitor-Lock을 획득해야만 진입할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"Monitor-Lock을 수행해야하는 객체 인스턴스를 지정할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"메서드에 선언하면 메서드 코드블록 전체가 critical section으로 지정된다. 이 때 모니터 락을 가진 객체 인스턴스는 this이다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/leobang/blog-starter/documents/운영체제/운영체제06-동기화도구들.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","blockquote","p","strong","ul","li","h2","h5","code","pre","em","h3","h4","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}