"use strict";(self.webpackChunkgatsby_theme_simplex=self.webpackChunkgatsby_theme_simplex||[]).push([[3273],{1275:function(e,n,t){t.r(n),t.d(n,{Head:function(){return p.py},default:function(){return v}});var a=t(1151),l=t(7294);function r(e){const n=Object.assign({h2:"h2",a:"a",div:"div",p:"p",code:"code",h4:"h4",ul:"ul",li:"li",pre:"pre"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.h2,{id:"문제",style:{position:"relative"}},l.createElement(n.a,{href:"#%EB%AC%B8%EC%A0%9C","aria-label":"문제 permalink",className:"header-links before"},l.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"문제"),"\n",l.createElement(n.p,null,"유전자를 나타내는 문자열을 8개의 ‘A’, ‘C’, ‘G’ 혹은 ‘T’로 이루어져 있다."),"\n",l.createElement(n.p,null,"유전자 변형이란 유전자를 구성하는 8개의 문자열 중 하나의 유전정보, 즉 하나의 문자가 변경되는 것을 말한다."),"\n",l.createElement(n.p,null,"두 개의 유전자 문자열 ",l.createElement(n.code,null,"startGene"),"과 ",l.createElement(n.code,null,"endGene"),"이 주어진다. 또한 유전자 문자열이 담긴 배열 ",l.createElement(n.code,null,"bank"),"가 주어진다. ",l.createElement(n.code,null,"bank")," 속의 유전자들로 유전자 변형을 시도할 수 있다.\n",l.createElement(n.code,null,"startGene"),"에서 ",l.createElement(n.code,null,"endGene"),"까지 갈 수 있는 최소 횟수의 유전자 변형을 구하라. 유전자 변형으로 도달할 수 없다면 ",l.createElement(n.code,null,"-1"),"을 반환한다."),"\n",l.createElement(n.h4,{id:"constraints",style:{position:"relative"}},l.createElement(n.a,{href:"#constraints","aria-label":"constraints permalink",className:"header-links before"},l.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Constraints"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.code,null,"0 <= bank.length <= 10")),"\n",l.createElement(n.li,null,l.createElement(n.code,null,"startGene.length == endGene.length == bank[i].length == 8")),"\n",l.createElement(n.li,null,l.createElement(n.code,null,"startGene, endGene, and bank[i] consist of only the characters ['A', 'C', 'G', 'T'].")),"\n"),"\n",l.createElement(n.h2,{id:"approach---graph-dijkstra",style:{position:"relative"}},l.createElement(n.a,{href:"#approach---graph-dijkstra","aria-label":"approach   graph dijkstra permalink",className:"header-links before"},l.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach - Graph: Dijkstra"),"\n",l.createElement(n.p,null,"최단거리, 최소거리만 보고 다익스트라 알고리즘이라고 생각했다. 구현도 어렵지 않았다."),"\n",l.createElement(n.p,null,"각 ",l.createElement(n.code,null,"bank"),"의 유전자들의 거리 정보를 기억하고, ",l.createElement(n.code,null,"bank")," 속의 유전자들로 변형이 가능할 때 = 유전자 문자열이 한 개만 차이날 때에 거리 정보를 대조한 후 queue에 넣는다."),"\n",l.createElement(n.h4,{id:"complexity",style:{position:"relative"}},l.createElement(n.a,{href:"#complexity","aria-label":"complexity permalink",className:"header-links before"},l.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"time complexity:"),"\n",l.createElement(n.li,null,"space complexity:"),"\n"),"\n",l.createElement(n.h4,{id:"code",style:{position:"relative"}},l.createElement(n.a,{href:"#code","aria-label":"code permalink",className:"header-links before"},l.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-python"},"import heapq\n\nclass Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        INF = 1e9\n        dist = dict({ startGene: INF})\n        for b in bank:\n            dist[b] = INF\n\n        q = [(0, startGene)]\n\n        while q:\n            d, gene = heapq.heappop(q)\n\n            if d > dist[gene]:\n                continue\n\n            for b in bank:\n                count = 0\n                for i in range(8):\n                    if gene[i] != b[i]:\n                        count += 1\n                if count == 1 and dist[b] > d + 1:\n                    heapq.heappush(q, (d + 1, b))\n                    dist[b] = d + 1\n        \n        return dist[endGene] if endGene in dist and dist[endGene] != INF else -1\n")),"\n",l.createElement(n.h2,{id:"approach-graph---bfs",style:{position:"relative"}},l.createElement(n.a,{href:"#approach-graph---bfs","aria-label":"approach graph   bfs permalink",className:"header-links before"},l.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach: Graph - BFS"),"\n",l.createElement(n.p,null,"다시 생각해보니 다익스트라가 아니라 단순 BFS로도 풀 수 있는 문제였다. 각 vertex들 간의 거리가 1이기 때문에 어차피 BFS는 layer 순으로 진행하므로 먼저 도달하는게 항상 가장 최단 거리이기 때문이다.\n다익스트라는 vertex들 간의 거리가 2 이상이라 이동 횟수 != 이동 거리 인 경우에 효과적인 알고리즘이다.\n틀린 답은 아니지만 이래서 무지성으로 푸는게 위험하구만."),"\n",l.createElement(n.h4,{id:"complexity-1",style:{position:"relative"}},l.createElement(n.a,{href:"#complexity-1","aria-label":"complexity 1 permalink",className:"header-links before"},l.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Complexity"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"time complexity:"),"\n",l.createElement(n.li,null,"space complexity:"),"\n"),"\n",l.createElement(n.h4,{id:"code-1",style:{position:"relative"}},l.createElement(n.a,{href:"#code-1","aria-label":"code 1 permalink",className:"header-links before"},l.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Code"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-python"},"from collections import deque\n\nclass Solution:\n    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:\n        visited = dict({ startGene: True })\n        for b in bank:\n            visited[b] = False\n        \n        q = deque([(startGene, 0)])\n\n        while q:\n            gene, d = q.popleft()\n            if gene == endGene:\n                return d\n\n            for b in bank:\n                count = 0\n                for i in range(8):\n                    if gene[i] != b[i]:\n                        count += 1\n                if count == 1 and not visited[b]:\n                    q.append((b, d + 1))\n                    visited[b] = True\n\n        return -1\n")))}var c=function(e={}){const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?l.createElement(n,e,l.createElement(r,e)):r(e)},i=t(5670),s=t(1326),h=t(4517),o=t(698),d=t(8627),m=t(662),p=t(1873);const u=({data:e,children:n,serverData:t})=>{const{prevPost:a,nextPost:r}=e,c={...e.mdx.frontmatter,timeToRead:e.mdx.fields.timeToRead};return l.createElement(o.Z,{data:e},l.createElement(i.Z,null,l.createElement(h.Z,c),l.createElement(s.Z,null,n),l.createElement(m.Z,{prev:a,next:r}),l.createElement(d.Z)))};function v(e){return l.createElement(u,e,l.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-algorithm-433-minimum-genetic-mutation-md-1ea6d121b6675c02dda9.js.map