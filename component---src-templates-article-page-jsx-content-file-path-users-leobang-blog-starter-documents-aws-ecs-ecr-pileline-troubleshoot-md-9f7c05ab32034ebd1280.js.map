{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-aws-ecs-ecr-pileline-troubleshoot-md-9f7c05ab32034ebd1280.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/AWS/ecs-ecr-pileline-troubleshoot.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    pre: \"pre\",\n    h4: \"h4\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"slack bot을 원래는 그냥 bare한 EC2 instance에 배포할 생각이었다. 빠르게 echo bot을 위한 환경을 구성하고, 업데이트하는 automation을 정의하는게 목적이었으니까. 원래 생각해뒀던 pipeline은\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"git repo에 push\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"git actions server에서 docker image build 후 ECR에 push\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"ECR Push event를 발생하도록 등록\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"해당 event에 trigger되는 Lambda 정의\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"기존의 docker compose 환경 종료\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"EC2 instance에서 latest version의 image를 pull 받고, 새 image를 기반으로 docker compose 실행\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"였다.\"), \"\\n\", React.createElement(_components.p, null, \"어느정도 pipeline 정의를 내린 와중에, 별안간 ECS 환경으로 발걸음을 돌렸다. 이유는 이 쪽이 더 환경 구성 및 코드 통합/배포 과정이 단순하겠다 싶어서였다. 처음 정의했던 ECR 환경의 cicd pipeline은 다음과 같다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"git repo에 push\"), \"\\n\", React.createElement(_components.li, null, \"git actions server에서 docker image build 후 ECR에 push\"), \"\\n\", React.createElement(_components.li, null, \"AWS CodePipeline 실행\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Source: ECR repository\"), \"\\n\", React.createElement(_components.li, null, \"Deploy: ECS service\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ECR로부터 source해서 ECS 환경으로 deploy를 손쉽게 지원하는 CodePipeline을 지원하기에 금방 세팅할 수 있겠다 싶었는데··· 이 과정에서 생각보다 오래 삽질을 했다.\"), \"\\n\", React.createElement(_components.p, null, \"사실 내가 겪은 애로사항들은 일반적인 상황은 아니다. free tier의 범위 안에서 app을 돌리기 위해 리소스 이용을 최소화한 경우기 때문에 대부분의 enterprise 환경에서는 이를 다음과 같은 trouble shooting을 겪을 일이 없지 않을까.\"), \"\\n\", React.createElement(_components.p, null, \"ECS의 구성은 다음과 같다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Capacity Provider는 EC2 instance로 이루어진 ASG이다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"max, desired capacity 모두 1로 정의한 single instance ASG\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"EC2 instance의 type은 free tier를 지원하는 \", React.createElement(_components.code, null, \"t2.micro\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"1vCPU와 1GB RAM의 시스템 리소스를 가지고 있다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"ECS Service에서 시작하는 task의 수는 1개이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"did-not-find-the-image-definition-file\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#did-not-find-the-image-definition-file\",\n    \"aria-label\": \"did not find the image definition file permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Did not find the image definition file\"), \"\\n\", React.createElement(_components.p, null, \"이름 그대로 \", React.createElement(_components.code, null, \"imagedefinition.json\"), \"을 정의해주지 않았기 때문에 발생하는 에러. CodePipeline의 Deploy stage에서, deploy의 target이 ECS service일 경우엔 \", React.createElement(_components.code, null, \"imagedefinitions.json\"), \"을 참고해서 service에 새로운 task definition의 revision을 배포하게 된다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"container name과 image uri가 담긴 json file이다.\"), \"\\n\", React.createElement(_components.li, null, \"image definition에 대한 정보는 \", React.createElement(_components.a, {\n    href: \"https://docs.aws.amazon.com/ko_kr/codepipeline/latest/userguide/file-reference.html\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"Codepipeline: Image definition reference\"), \"을 참고하자.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"나의 경우엔 CodePipeline에 ECR에서 변경사항을 Source하고, 중간에 \", React.createElement(_components.code, null, \"imagedefinition.json\"), \"을 생성해주는 단계 없이 바로 deploy stage로 전달했기 때문에 발생했다.\"), \"\\n\", React.createElement(_components.p, null, \"해결방법은 어찌되었건 deploy stage에서 \", React.createElement(_components.code, null, \"imagedefinition.json\"), \"을 색인할 위치에 해당 파일을 생성해두는 과정을 pipeline 안에 병합하는 것인데, 2가지 방법이 있다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"S3 bucket에 직접 업로드\"), \"\\n\", React.createElement(_components.li, null, \"code build stage에서 artifact로 해당 파일을 출력해낸다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"두번째 방식이 더 쉽다. 해당 pipeline에 CodeBuild stage를 추가해서 deploy stage가 시작되기 전에 \", React.createElement(_components.code, null, \"imagedefinition.json\"), \"를 생성해주는 script를 작성했다. build와는 관련이 없기에, 정의한 stage는 post_build부터 시작한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-yaml\"\n  }, \"version: 0.2\\n\\nphases:\\n  post_build:\\n    commands:\\n      printf '[{\\\"name\\\":\\\"{{container-name}}\\\",\\\"imageUri\\\":\\\"{{image-uri}}\\\"}]' > imagedefinitions.json\\nartifacts:\\n  files:\\n    - imagedefinitions.json\\n\")), \"\\n\", React.createElement(_components.p, null, \"이제 잘 찾는다! deploy stage로 진입하는 과정까지는 문제없이 수행된다. 하지만 또 문제는 ···\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"minimum--maximumhealthypercent\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#minimum--maximumhealthypercent\",\n    \"aria-label\": \"minimum  maximumhealthypercent permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"minimum & maximumHealthyPercent\"), \"\\n\", React.createElement(_components.p, null, \"ECS에서 service를 정의할 때 \", React.createElement(_components.code, null, \"minimumHealthyPercent\"), \"와 \", React.createElement(_components.code, null, \"maximumHealthyPercent\"), \"는 service의 deploy 및 update 동안 유지되어야 하는 최소 및 최대 실행 task의 비율을 정의한다.\"), \"\\n\", React.createElement(_components.p, null, \"minimumHealthyPercent\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"service update 중에 실행 상태를 유지해야하는 task의 최소 비율.\"), \"\\n\", React.createElement(_components.li, null, \"전체 task 수의 일정 비율이 service update 중에도 계속 실행되어야 함을 의미한다.\"), \"\\n\", React.createElement(_components.li, null, \"rolling 배포 도중의 최소한의 가용성을 정의하는데 쓰인다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"maximumHealthyPercent\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"service update 중에 실행될 수 있는 task의 최대 비율.\"), \"\\n\", React.createElement(_components.li, null, \"전체 task 수의 최대 허용량을 나타낸다.\"), \"\\n\", React.createElement(_components.li, null, \"만약 task의 수를 10개로 설정해두고 해당 task를 실행하는 service의 maxPercent를 200%로 정의했다면, 해당 service는 update 도중 최대 20개의 task (기존 10개 + 새 task 10개)까지 동시에 실행할 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"두 지표에 대해서 잘 알지 못한 채 default setting을 따랐던 것 때문에 삽질을 좀 했다··· 문서를 잘 읽자.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"insufficient-cpu-units-available\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#insufficient-cpu-units-available\",\n    \"aria-label\": \"insufficient cpu units available permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Insufficient CPU Units Available\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"service (\", React.createElement(_components.code, null, \"service-name\"), \") was unable to place a task because no container instance met all of its requirements. The closest matching container-instance \", React.createElement(_components.code, null, \"container-instance-id\"), \" has insufficient CPU units available. - \", React.createElement(_components.a, {\n    href: \"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-event-messages-list.html#service-event-messages-2\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"ECS Service event messages\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"task 배치에 이용되는 container instance CPU unit이 task definition에서 요구하는 것에 미치지 못하기 때문에 발생하는 에러.\"), \"\\n\", React.createElement(_components.p, null, \"분명 실행할 task를 1개로 제한해두었고 CPU unit 할당도 여유롭게 해두었는데 발생한 에러라 의아했다.  게다가 배포 전략을 rolling으로 설정해두었으니 그냥 manual 하게 task 종료 후 revision된 task 실행하는 것과 동일하다고 생각했었다.\"), \"\\n\", React.createElement(_components.p, null, \"문제는 service를 정의할 때 \", React.createElement(_components.code, null, \"minimumHealthyPercent\"), \"와 \", React.createElement(_components.code, null, \"maximumHealthyPercent\"), \" 값이 default로 각각 100%, 200%로 설정된다는 점이다. 따라서 정의했던 task는 1개지만, 해당 service를 update하는 과정에서 기존의 task를 1개 유지한 채, 새로운 revision된 task를 하나 더 실행함으로써 2개의 task가 동시에 실행된다.\"), \"\\n\", React.createElement(_components.p, null, \"이 탓에 CPU unit 부족 에러가 발생했다.\"), \"\\n\", React.createElement(_components.h4, {\n    id: \"unable-to-stop-or-start-tasks\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#unable-to-stop-or-start-tasks\",\n    \"aria-label\": \"unable to stop or start tasks permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"unable to stop or start tasks\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"service (\", React.createElement(_components.code, null, \"service-name\"), \") was unable to stop or start tasks during a deployment because of the service deployment configuration. Update the minimumHealthyPercent or maximumPercent value and try again. - \", React.createElement(_components.a, {\n    href: \"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-event-messages-list.html#service-event-messages-7\",\n    target: \"_self\",\n    rel: \"nofollow\"\n  }, \"ECS Service event messages\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"위와 같은 이유로 일단은 \", React.createElement(_components.code, null, \"maximumHealthyPercent\"), \"를 100%로 낮췄다. 문제는 \", React.createElement(_components.code, null, \"minimumHealthyPercent\"), \"를 0%로 지정했어야 했는데, 임의로 50%로 지정했었다. task의 수의 percentage를 말하는지 모르고 단순하게 생각해서 발생한 문제··· 문서를 잘 읽자.\"), \"\\n\", React.createElement(_components.p, null, \"정의된 task는 1개인데 당연히 이를 50%로 drop down 할 수는 없다. 0%로 정의해야지 기존의 task를 중지하고 새 task를 실행할 수 있게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"max - 100, min - 0 으로 설정해주니 pipeline이 ECS service 전달까지 문제없이 실행되었다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/leobang/blog-starter/documents/AWS/ecs-ecr-pileline-troubleshoot.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","p","ol","li","ul","code","h2","a","div","pre","h4","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","target","rel","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}