{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-users-leobang-blog-starter-documents-go-lang-go-array-and-slices-md-73e6ccd862c5d1993b5b.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/GoLang/Go-Array-and-slices.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    blockquote: \"blockquote\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Go의 \", React.createElement(_components.strong, null, \"Array\"), \"는 동일한 자료형을 저장하는 순서를 가진 (sequence) 크기가 ’\", React.createElement(_components.strong, null, \"고정\"), \"‘된, 정말 기본적인 배열을 말한다. 즉, \", React.createElement(\"u\", null, \"static array\"), \"이다. Array는 물리적으로 연속적인 공간에 저장되므로, 각 element를 iterate할 때 cache hit을 달성할 확률이 높다.\"), \"\\n\", React.createElement(_components.p, null, \"Array를 선언하는 방법은 다음과 같다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"var a [5]int // int type의 element 5개를 저장할 수 있다. 64bit * 5 만큼의 메모리를 차지하겠지? \\nb := [5]int{ 1, 2, 3, 4, 5} // initialize while declaring \\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"slice-dynamic-array\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#slice-dynamic-array\",\n    \"aria-label\": \"slice dynamic array permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Slice: Dynamic Array\"), \"\\n\", React.createElement(_components.p, null, \"크기가 고정된 static array는 그다지 좋지 못한 developer experience를 제공한다. 이를 위해 Go는 \", React.createElement(_components.strong, null, \"Slice\"), \"라는 dynamic array를 제공한다. Slice는 \", React.createElement(_components.strong, null, \"array를 기반으로 구현된 가변길이 Array\"), \"이다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Go 개발의 99%는 기본 Array보다는 Slice를 활용할 것이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Slice는 내부적으로 3가지 주요 구성 요소를 가지고 있다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"pointer\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Slice의 첫번째 element의 위치를 가리키는 pointer. Slice가 reference하는 내부 Array의 시작점을 나타낸다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"Length\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Slice가 현재 ‘저장하고 있는’ element의 수. \", React.createElement(_components.code, null, \"len()\"), \" 함수를 통해 얻을 수 있다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"Capacity\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Slice가 의존하고 있는 ‘내부 Array의 고정된 길이’를 나타낸다. \", React.createElement(_components.code, null, \"cap()\"), \" 함수를 통해 얻을 수 있다.\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Capacity가 있는 것을 보면 알 수 있듯이, Slice는 Array를 기반으로 구현된 여느 다른 Dynamic Array들과 동일한 메커니즘을 가지고 있다. 예컨데, Java의 ArrayList와 동일하다.\"), \"\\n\", React.createElement(_components.p, null, \"현재 Slice의 length가 capacity를 초과하지 않을 경우, 새 element는 내부 array에 추가된다. 반면 length가 capacity를 초과할 경우, Go runtime은 보다 큰 capacity를 가진 Array를 pre-allocate한 후 기존 Array의 element를 새 Array로 복사한다. 그리고 기존 Array의 Pointer를 새 Array의 Pointer로 업데이트한다. 이와 같은 방식으로 Dynamic Array를 구현한다.\"), \"\\n\", React.createElement(_components.p, null, \"Slice는 다음과 같이 빈 square bracket으로 선언할 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"var sliceExample []string\\n\")), \"\\n\", React.createElement(_components.p, null, \"주의할 점은, slice와 array는 서로 다른 자료형이라는 것이다. 강타입인 Go는 이 둘을 엄격하게 구분하기 때문에 만약 function signature가 slice의 return 타입을 가진다면 array를 반환할 경우 Type Error가 발생한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"func getArrReturnSlice(arrays [3]int) []int {\\n  return arrays // Type Error! Slice를 반환해야하는데 고정길이인 array를 반환함.\\n}\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"tricky-slices-slice의-동작을-살펴보자\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tricky-slices-slice%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9D%84-%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90\",\n    \"aria-label\": \"tricky slices slice의 동작을 살펴보자 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Tricky Slices: Slice의 동작을 살펴보자\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"append()\"), \" function을 활용해서 Slice의 under the hood를 살펴보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"a := make([]int, 3)\\nfmt.Println(\\\"len of a:\\\", len(a))\\n// len of a: 3 \\nfmt.Println(\\\"cap of a:\\\", cap(a))\\n// cap of a: 3\\nfmt.Println(\\\"appending 4 to b from a\\\")\\n// appending 4 to b from a\\nb := append(a, 4)\\nfmt.Println(\\\"b:\\\", b)\\n// b: [0 0 0 4]\\nfmt.Println(\\\"addr of b:\\\", &b[0])\\n// addr of b: 0x44a0c0\\nfmt.Println(\\\"appending 5 to c from a\\\")\\n// appending 5 to c from a\\nc := append(a, 5)\\nfmt.Println(\\\"addr of c:\\\", &c[0])\\n// addr of c: 0x44a180\\nfmt.Println(\\\"a:\\\", a)\\n// a: [0 0 0]\\nfmt.Println(\\\"b:\\\", b)\\n// b: [0 0 0 4]\\nfmt.Println(\\\"c:\\\", c)\\n// c: [0 0 0 5]\\n\")), \"\\n\", React.createElement(_components.p, null, \"a, b, c가 모두 기대와 같이 동작한 이유는, b와 c에게 walrus operator로 배열을 할당하는 시점에, a의 slice의 capacity를 넘어섰기 때문에 배열이 새로 할당되었으며, 새로 할당된 배열의 첫번째 요소를 가리키는 pointer가 반환되었기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"기대와 같이 동작하지 않는 예시를 살펴보자:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"i := make([]int, 3, 8)\\nfmt.Println(\\\"len of i:\\\", len(i))\\n// len of i: 3\\nfmt.Println(\\\"cap of i:\\\", cap(i))\\n// cap of i: 8\\nfmt.Println(\\\"appending 4 to j from i\\\")\\n// appending 4 to j from i\\nj := append(i, 4)\\nfmt.Println(\\\"j:\\\", j)\\n// j: [0 0 0 4]\\nfmt.Println(\\\"addr of j:\\\", &j[0])\\n// addr of j: 0x454000\\nfmt.Println(\\\"appending 5 to g from i\\\")\\n// appending 5 to g from i\\ng := append(i, 5)\\nfmt.Println(\\\"addr of g:\\\", &g[0])\\n// addr of g: 0x454000\\nfmt.Println(\\\"i:\\\", i)\\n// i: [0 0 0]\\nfmt.Println(\\\"j:\\\", j)\\n// j: [0 0 0 5]\\nfmt.Println(\\\"g:\\\", g)\\n// g: [0 0 0 5]\\n\")), \"\\n\", React.createElement(_components.p, null, \"b와 c는 모두 동일한 addr을 공유하기 때문에.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"variadic-funciton과-spread-operator\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#variadic-funciton%EA%B3%BC-spread-operator\",\n    \"aria-label\": \"variadic funciton과 spread operator permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Variadic Funciton과 Spread Operator\"), \"\\n\", React.createElement(_components.p, null, \"Variadic Function은 argument의 개수가 정해지지 않은 함수를 말한다. 즉, 가변길이의 argument를 받아들일 수 있다. Go의 variadic function은 \", React.createElement(_components.code, null, \"...\"), \" operator를 사용해 정의한다.\"), \"\\n\", React.createElement(_components.p, null, \"variadic function 내부에서 spread operator로 전달받은 argument는 해당 타입의 Slice로 처리된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"func sum(nums ...int) int {\\n  total := 0\\n  for _, num := range nums {\\n    total += num\\n  }\\n  return total\\n}\\n\\n\\nfmt.Println(sum(1, 2))\\t\\t \\t// 3\\nfmt.Println(sum(1, 2, 3, 4)) // 10\\n\")), \"\\n\", React.createElement(_components.p, null, \"variadic operator가 이용되는 대표적인 예시는 바로 \", React.createElement(_components.code, null, \"fmt\"), \" 패키지의 \", React.createElement(_components.code, null, \"Println()\"), \" 함수이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"func Println(a ...interface{}) (n int, err error) \\n\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"아무것도 구현하지 않은 interface, 즉 모든 값을 가변길이로 수용하는 print문을 볼 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"spread operator는 \", React.createElement(_components.code, null, \"...\"), \" 으로 표현하며, 배열이나 객체와 같은 \", React.createElement(_components.em, null, \"iterable\"), \"한 element를 개별 element로 확장할 때 이용된다. Javascript를 이용한 개발자라면 매우 익숙할 것이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-go\"\n  }, \"nums := []int { 1, 2, 3, 4, 5 }\\nfmt.Println(sum(...nums)) // 개별 인자로 전달한다.\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/leobang/blog-starter/documents/GoLang/Go-Array-and-slices.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","pre","code","h2","a","div","blockquote","ol","li","ul","em","_provideComponents","components","React","className","id","style","position","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}