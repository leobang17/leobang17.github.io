{"version":3,"file":"component---src-templates-article-page-jsx-content-file-path-home-runner-work-leobang-17-github-io-leobang-17-github-io-documents-데이터베이스-database-connection-pool-md-ca9131542015f8091d87.js","mappings":"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","sources":["webpack://gatsby-theme-simplex/./documents/데이터베이스/Database-connection-pool.md","webpack://gatsby-theme-simplex/./src/templates/ArticlePage.jsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    hr: \"hr\",\n    h2: \"h2\",\n    a: \"a\",\n    div: \"div\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"데이터베이스 서버와의 통신은 대부분 TCP 기반으로 동작한다.\"), \"\\n\", React.createElement(_components.p, null, \"TCP는 연결지향적으로 동작하기 때문에 데이터를 주고 받기 전 connection을 생성하고, connection을 닫는다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이 connection을 맺거나 푸는데 은근히 시간이 많이 잡아먹힌다.\"), \"\\n\", React.createElement(_components.li, null, \"3way, 4way로 동작하기 때문에\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"백엔드 관점에서 생각해보면 매번 connection을 열고 닫는 시간적인 비용이 낭비된다. 처리하는 request가 실시간으로 매우 많기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"서비스의 성능에 안좋은 영향을 끼치게 된다.\"), \"\\n\", React.createElement(_components.p, null, \"이걸 어떻게 해결할까 고민해서 나오게된 해결책이 DBCP이다.\"), \"\\n\", React.createElement(_components.hr), \"\\n\", React.createElement(_components.p, null, \"Application 서버를 띄울 때, 즉, 본격적으로 request를 받기 전에 DB connection을 미리 맺어놓는다. (Open Connection)\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"TCP 기반이므로 미리 3way handshake로\"), \"\\n\", React.createElement(_components.li, null, \"연결된 connection을 마치 pool 처럼 관리한다.\"), \"\\n\", React.createElement(_components.li, null, \"DB 서버로의 네트워크 I/O가 필요한 경우에는 DB Connection Pool에서 connection을 빌려와서 그 connection을 바탕으로 데이터를 주고 받는다.\"), \"\\n\", React.createElement(_components.li, null, \"통신이 모두 끝난 뒤에는 다시 DBCP로 connection을 반환한다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"close connection\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"DBCP는 백엔드 개발하면 항상 쓰인다! 어떻게 동작하는지, 어떤 장점이 있는지는 알아두는 것이 좋다.\"), \"\\n\", React.createElement(_components.p, null, \"DB Connection은 BE 서버와 DB 서버 사이의 connection을 의미하므로 둘 각각에서의 configuration 방법을 잘 알고 있어야 한다.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"db-서버-configuration\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#db-%EC%84%9C%EB%B2%84-configuration\",\n    \"aria-label\": \"db 서버 configuration permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"DB 서버 Configuration\"), \"\\n\", React.createElement(_components.p, null, \"max_connections\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"client와 맺을 수 있는 최대 connection의 수를 말한다.\"), \"\\n\", React.createElement(_components.li, null, \"만약 max_connections = 4로 설정했는데, 어느 BE application의 DBCP의 connection 수가 4라면?\"), \"\\n\", React.createElement(_components.li, null, \"이미 모두 가능한 connection을 맺어버린 상태\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"만약 요청이 ㅈㄴ 많이 들어와서 로드밸런싱을 하자고 결정해 새 instance를 띄웠다고 생각하자.\"), \"\\n\", React.createElement(_components.li, null, \"max_connection에 임계인 connection이 맺혀있으므로 해당 instance의 애플리케이션은 connection을 새로 맺지 못한다···\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"이런 의미에서 max_connection의 파라미터가 굉장히 중요하다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"wait_timeout\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"DB 서버에서 connection이 inactive할 때 (놀고 있을 때) 다시 요청이 오기까지 얼마의 시간을 기다린 뒤에 close할 것인지를 결정\"), \"\\n\", React.createElement(_components.li, null, \"비정상적인 connection 종료나 connection을 다 쓰고 반환이 안된 경우. 혹은 네트워크 문제로 둘의 통신에 문제가 될 수도.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"해당 connection은 누군가가 점유는 하고있지만 더이상 쓰고 있지 않은 이상한 상태가 된다.\"), \"\\n\", React.createElement(_components.li, null, \"DB 서버 입장에서는 어찌되었든 정상적으로 열려있는 connection이라고 생각할 수 밖에 없다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"60초로 설정햇다고 하면, 마지막 request를 기준으로 60초를 기다리고 그 뒤에도 요청이 오지 않는다면 해당 connection을 끊어버린다.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"dbcp-configuration-be-application-측\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#dbcp-configuration-be-application-%EC%B8%A1\",\n    \"aria-label\": \"dbcp configuration be application 측 permalink\",\n    className: \"header-links before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"DBCP Configuration (BE Application 측)\"), \"\\n\", React.createElement(_components.p, null, \"minumumIdle\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"pool에서 유지하는 최소한의 idle connection 수\"), \"\\n\", React.createElement(_components.li, null, \"아무런 일을 하지 않고 놀고 있는 유휴 connection을 최소한으로 몇개를 잡을 것인가\"), \"\\n\", React.createElement(_components.li, null, \"idle connection 수가 \", React.createElement(_components.code, null, \"minimumIdle\"), \"보다 작고, 전체 connection 수도 \", React.createElement(_components.code, null, \"maximumPoolSize\"), \"보다 작다면 신속하게 추가로 connection을 맺어 pool에 대기시킨다.\"), \"\\n\", React.createElement(_components.li, null, \"만약 idle connection 수가 \", React.createElement(_components.code, null, \"minimumIdel\"), \" 보다 크다면 minumum에 맞게 connection을 없앤다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"만약 minumumIdle=2, maximumPoolsize=4 라면?\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"기본 값은 maxPoolSize와 동일하다.\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"그대로 쓰는 것을 권장한다. 둘이 같을 수 있도록 권장함\"), \"\\n\", React.createElement(_components.li, null, \"그말인 즉, pool의 size가 항상 고정이라는 것이다.\"), \"\\n\", React.createElement(_components.li, null, \"둘의 사이즈가 다르면 connection을 맺고 풀면서 pool의 사이즈를 조정하는 과정이 중간에 유동적으로 생기는데, 애초에 dbcp를 만든 이유가 connection 비용을 줄이기 위한 것. -> request가 몰려오는 상황에서 성능을 악화시킬 수 있으므로 그냥 pool size를 고정해두고 이용하는 것을 권장한다.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"실무에서도 pool size를 넉넉하게 잡아놓고 고정으로 이용하는 경우가 많다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"maximumPoolSize\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"pool이 가질 수 있는 최대 connection의 수\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"idle과 active (in-use: 실제로 요청을 수행하고 있는) connection을 합친 수\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"maxLifeTime\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"pool에서 connection의 최대 수명\"), \"\\n\", React.createElement(_components.li, null, \"maxLifetime을 넘기면 idle일 경우 pool에서 바로 제거한다.\"), \"\\n\", React.createElement(_components.li, null, \"active인 경우 pool로 반환된 후 제거\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"이말인 즉, pool로 반환이 안되면 maxLifetime은 동작하지 않는 다는 것이다.\\\\\"), \"\\n\", React.createElement(_components.li, null, \"다 쓴 connection은 pool로 반환을 시켜주는 것이 매우 중요하다···\"), \"\\n\", React.createElement(_components.li, null, \"mysql에서 wait timeout에 걸려서 connection\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"제거되면 pool size가 변하잖아? 아님. pool size를 고정해놓은 경우 그 숫자만큼으로 다시 증설한다.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/leobang17.github.io/leobang17.github.io/documents/데이터베이스/Database-connection-pool.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport ArticleLayout from 'components/Layout/ArticleLayout';\nimport MarkdownWrapper from 'components/MarkdownWrapper';\nimport ArticleFrontmatter from 'components/ArticleFrontmatter';\nimport ArticlePageContext from 'contexts/ArticlePageContext';\nimport Utterances from 'components/Utterance';\nimport RecentPosts from 'components/RecentPosts/RecentPosts';\nconst isBrowser = typeof window !== undefined;\nconst ArticlePage = ({data, children, serverData}) => {\n  const {prevPost, nextPost} = data;\n  const frontmatters = {\n    ...data.mdx.frontmatter,\n    timeToRead: data.mdx.fields.timeToRead\n  };\n  return React.createElement(ArticlePageContext, {\n    data: data\n  }, React.createElement(ArticleLayout, null, React.createElement(ArticleFrontmatter, frontmatters), React.createElement(MarkdownWrapper, null, children), React.createElement(RecentPosts, {\n    prev: prevPost,\n    next: nextPost\n  }), React.createElement(Utterances)));\n};\nArticlePage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(ArticlePage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const query = graphql`\n  query ($id: String, $nextId: String, $prevId: String) {\n    mdx(id: { eq: $id }) {\n      id\n      fields {\n        slug\n        timeToRead\n        categoryDirectory\n      }\n      frontmatter {\n        title\n        createdAt(formatString: \"MMMM DD, YYYY\")\n      }\n      tableOfContents\n    }\n    prevPost: mdx(id: { eq: $prevId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    nextPost: mdx(id: { eq: $nextId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\nexport {ArticlePageHead as Head} from 'components/head';\n"],"names":["_createMdxContent","props","_components","Object","assign","p","ul","li","hr","h2","a","div","code","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","ArticlePage","data","children","serverData","prevPost","nextPost","frontmatters","mdx","frontmatter","timeToRead","fields","ArticlePageContext","ArticleLayout","ArticleFrontmatter","MarkdownWrapper","RecentPosts","prev","next","Utterances","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}